/*
 * GeoNetwork Api Documentation (beta)
 * Learn how to access the catalog using the GeoNetwork REST API.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.fao.geonet.openapi.model;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModelProperty;

/**
 * SiteInformation
 */

public class SiteInformation {
    @JsonProperty("catalogue")
    private Map<String, String> catalogue = null;

    @JsonProperty("database")
    private Map<String, String> database = null;

    @JsonProperty("index")
    private Map<String, String> index = null;

    @JsonProperty("main")
    private Map<String, String> main = null;

    @JsonProperty("version")
    private Map<String, String> version = null;

    public SiteInformation catalogue(Map<String, String> catalogue) {
        this.catalogue = catalogue;
        return this;
    }

    public SiteInformation putCatalogueItem(String key, String catalogueItem) {
        if (this.catalogue == null) {
            this.catalogue = new HashMap<>();
        }
        this.catalogue.put(key, catalogueItem);
        return this;
    }

    /**
     * Get catalogue
     * 
     * @return catalogue
     **/
    @ApiModelProperty(value = "")
    public Map<String, String> getCatalogue() {
        return catalogue;
    }

    public void setCatalogue(Map<String, String> catalogue) {
        this.catalogue = catalogue;
    }

    public SiteInformation database(Map<String, String> database) {
        this.database = database;
        return this;
    }

    public SiteInformation putDatabaseItem(String key, String databaseItem) {
        if (this.database == null) {
            this.database = new HashMap<>();
        }
        this.database.put(key, databaseItem);
        return this;
    }

    /**
     * Get database
     * 
     * @return database
     **/
    @ApiModelProperty(value = "")
    public Map<String, String> getDatabase() {
        return database;
    }

    public void setDatabase(Map<String, String> database) {
        this.database = database;
    }

    public SiteInformation index(Map<String, String> index) {
        this.index = index;
        return this;
    }

    public SiteInformation putIndexItem(String key, String indexItem) {
        if (this.index == null) {
            this.index = new HashMap<>();
        }
        this.index.put(key, indexItem);
        return this;
    }

    /**
     * Get index
     * 
     * @return index
     **/
    @ApiModelProperty(value = "")
    public Map<String, String> getIndex() {
        return index;
    }

    public void setIndex(Map<String, String> index) {
        this.index = index;
    }

    public SiteInformation main(Map<String, String> main) {
        this.main = main;
        return this;
    }

    public SiteInformation putMainItem(String key, String mainItem) {
        if (this.main == null) {
            this.main = new HashMap<>();
        }
        this.main.put(key, mainItem);
        return this;
    }

    /**
     * Get main
     * 
     * @return main
     **/
    @ApiModelProperty(value = "")
    public Map<String, String> getMain() {
        return main;
    }

    public void setMain(Map<String, String> main) {
        this.main = main;
    }

    public SiteInformation version(Map<String, String> version) {
        this.version = version;
        return this;
    }

    public SiteInformation putVersionItem(String key, String versionItem) {
        if (this.version == null) {
            this.version = new HashMap<>();
        }
        this.version.put(key, versionItem);
        return this;
    }

    /**
     * Get version
     * 
     * @return version
     **/
    @ApiModelProperty(value = "")
    public Map<String, String> getVersion() {
        return version;
    }

    public void setVersion(Map<String, String> version) {
        this.version = version;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SiteInformation siteInformation = (SiteInformation) o;
        return Objects.equals(this.catalogue, siteInformation.catalogue)
                && Objects.equals(this.database, siteInformation.database)
                && Objects.equals(this.index, siteInformation.index) && Objects.equals(this.main, siteInformation.main)
                && Objects.equals(this.version, siteInformation.version);
    }

    @Override
    public int hashCode() {
        return Objects.hash(catalogue, database, index, main, version);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SiteInformation {\n");

        sb.append("    catalogue: ").append(toIndentedString(catalogue)).append("\n");
        sb.append("    database: ").append(toIndentedString(database)).append("\n");
        sb.append("    index: ").append(toIndentedString(index)).append("\n");
        sb.append("    main: ").append(toIndentedString(main)).append("\n");
        sb.append("    version: ").append(toIndentedString(version)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
