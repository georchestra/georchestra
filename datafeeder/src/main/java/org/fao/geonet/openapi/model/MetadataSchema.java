/*
 * GeoNetwork Api Documentation (beta)
 * Learn how to access the catalog using the GeoNetwork REST API.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.fao.geonet.openapi.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModelProperty;

/**
 * MetadataSchema
 */

public class MetadataSchema {
    @JsonProperty("appMajorVersionSupported")
    private String appMajorVersionSupported = null;

    @JsonProperty("appMinorVersionSupported")
    private String appMinorVersionSupported = null;

    @JsonProperty("dependsOn")
    private String dependsOn = null;

    @JsonProperty("descriptions")
    private Map<String, String> descriptions = null;

    @JsonProperty("name")
    private String name = null;

    @JsonProperty("namespaces")
    private Map<String, String> namespaces = null;

    @JsonProperty("readwriteUUID")
    private Boolean readwriteUUID = null;

    @JsonProperty("schematronRules")
    private List<String> schematronRules = null;

    @JsonProperty("standardUrl")
    private String standardUrl = null;

    @JsonProperty("targetNamespace")
    private String targetNamespace = null;

    @JsonProperty("titles")
    private Map<String, String> titles = null;

    public MetadataSchema appMajorVersionSupported(String appMajorVersionSupported) {
        this.appMajorVersionSupported = appMajorVersionSupported;
        return this;
    }

    /**
     * Get appMajorVersionSupported
     * 
     * @return appMajorVersionSupported
     **/
    @ApiModelProperty(value = "")
    public String getAppMajorVersionSupported() {
        return appMajorVersionSupported;
    }

    public void setAppMajorVersionSupported(String appMajorVersionSupported) {
        this.appMajorVersionSupported = appMajorVersionSupported;
    }

    public MetadataSchema appMinorVersionSupported(String appMinorVersionSupported) {
        this.appMinorVersionSupported = appMinorVersionSupported;
        return this;
    }

    /**
     * Get appMinorVersionSupported
     * 
     * @return appMinorVersionSupported
     **/
    @ApiModelProperty(value = "")
    public String getAppMinorVersionSupported() {
        return appMinorVersionSupported;
    }

    public void setAppMinorVersionSupported(String appMinorVersionSupported) {
        this.appMinorVersionSupported = appMinorVersionSupported;
    }

    public MetadataSchema dependsOn(String dependsOn) {
        this.dependsOn = dependsOn;
        return this;
    }

    /**
     * Get dependsOn
     * 
     * @return dependsOn
     **/
    @ApiModelProperty(value = "")
    public String getDependsOn() {
        return dependsOn;
    }

    public void setDependsOn(String dependsOn) {
        this.dependsOn = dependsOn;
    }

    public MetadataSchema descriptions(Map<String, String> descriptions) {
        this.descriptions = descriptions;
        return this;
    }

    public MetadataSchema putDescriptionsItem(String key, String descriptionsItem) {
        if (this.descriptions == null) {
            this.descriptions = new HashMap<>();
        }
        this.descriptions.put(key, descriptionsItem);
        return this;
    }

    /**
     * Get descriptions
     * 
     * @return descriptions
     **/
    @ApiModelProperty(value = "")
    public Map<String, String> getDescriptions() {
        return descriptions;
    }

    public void setDescriptions(Map<String, String> descriptions) {
        this.descriptions = descriptions;
    }

    public MetadataSchema name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     * 
     * @return name
     **/
    @ApiModelProperty(value = "")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public MetadataSchema namespaces(Map<String, String> namespaces) {
        this.namespaces = namespaces;
        return this;
    }

    public MetadataSchema putNamespacesItem(String key, String namespacesItem) {
        if (this.namespaces == null) {
            this.namespaces = new HashMap<>();
        }
        this.namespaces.put(key, namespacesItem);
        return this;
    }

    /**
     * Get namespaces
     * 
     * @return namespaces
     **/
    @ApiModelProperty(value = "")
    public Map<String, String> getNamespaces() {
        return namespaces;
    }

    public void setNamespaces(Map<String, String> namespaces) {
        this.namespaces = namespaces;
    }

    public MetadataSchema readwriteUUID(Boolean readwriteUUID) {
        this.readwriteUUID = readwriteUUID;
        return this;
    }

    /**
     * Get readwriteUUID
     * 
     * @return readwriteUUID
     **/
    @ApiModelProperty(value = "")
    public Boolean isReadwriteUUID() {
        return readwriteUUID;
    }

    public void setReadwriteUUID(Boolean readwriteUUID) {
        this.readwriteUUID = readwriteUUID;
    }

    public MetadataSchema schematronRules(List<String> schematronRules) {
        this.schematronRules = schematronRules;
        return this;
    }

    public MetadataSchema addSchematronRulesItem(String schematronRulesItem) {
        if (this.schematronRules == null) {
            this.schematronRules = new ArrayList<>();
        }
        this.schematronRules.add(schematronRulesItem);
        return this;
    }

    /**
     * Get schematronRules
     * 
     * @return schematronRules
     **/
    @ApiModelProperty(value = "")
    public List<String> getSchematronRules() {
        return schematronRules;
    }

    public void setSchematronRules(List<String> schematronRules) {
        this.schematronRules = schematronRules;
    }

    public MetadataSchema standardUrl(String standardUrl) {
        this.standardUrl = standardUrl;
        return this;
    }

    /**
     * Get standardUrl
     * 
     * @return standardUrl
     **/
    @ApiModelProperty(value = "")
    public String getStandardUrl() {
        return standardUrl;
    }

    public void setStandardUrl(String standardUrl) {
        this.standardUrl = standardUrl;
    }

    public MetadataSchema targetNamespace(String targetNamespace) {
        this.targetNamespace = targetNamespace;
        return this;
    }

    /**
     * Get targetNamespace
     * 
     * @return targetNamespace
     **/
    @ApiModelProperty(value = "")
    public String getTargetNamespace() {
        return targetNamespace;
    }

    public void setTargetNamespace(String targetNamespace) {
        this.targetNamespace = targetNamespace;
    }

    public MetadataSchema titles(Map<String, String> titles) {
        this.titles = titles;
        return this;
    }

    public MetadataSchema putTitlesItem(String key, String titlesItem) {
        if (this.titles == null) {
            this.titles = new HashMap<>();
        }
        this.titles.put(key, titlesItem);
        return this;
    }

    /**
     * Get titles
     * 
     * @return titles
     **/
    @ApiModelProperty(value = "")
    public Map<String, String> getTitles() {
        return titles;
    }

    public void setTitles(Map<String, String> titles) {
        this.titles = titles;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MetadataSchema metadataSchema = (MetadataSchema) o;
        return Objects.equals(this.appMajorVersionSupported, metadataSchema.appMajorVersionSupported)
                && Objects.equals(this.appMinorVersionSupported, metadataSchema.appMinorVersionSupported)
                && Objects.equals(this.dependsOn, metadataSchema.dependsOn)
                && Objects.equals(this.descriptions, metadataSchema.descriptions)
                && Objects.equals(this.name, metadataSchema.name)
                && Objects.equals(this.namespaces, metadataSchema.namespaces)
                && Objects.equals(this.readwriteUUID, metadataSchema.readwriteUUID)
                && Objects.equals(this.schematronRules, metadataSchema.schematronRules)
                && Objects.equals(this.standardUrl, metadataSchema.standardUrl)
                && Objects.equals(this.targetNamespace, metadataSchema.targetNamespace)
                && Objects.equals(this.titles, metadataSchema.titles);
    }

    @Override
    public int hashCode() {
        return Objects.hash(appMajorVersionSupported, appMinorVersionSupported, dependsOn, descriptions, name,
                namespaces, readwriteUUID, schematronRules, standardUrl, targetNamespace, titles);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MetadataSchema {\n");

        sb.append("    appMajorVersionSupported: ").append(toIndentedString(appMajorVersionSupported)).append("\n");
        sb.append("    appMinorVersionSupported: ").append(toIndentedString(appMinorVersionSupported)).append("\n");
        sb.append("    dependsOn: ").append(toIndentedString(dependsOn)).append("\n");
        sb.append("    descriptions: ").append(toIndentedString(descriptions)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    namespaces: ").append(toIndentedString(namespaces)).append("\n");
        sb.append("    readwriteUUID: ").append(toIndentedString(readwriteUUID)).append("\n");
        sb.append("    schematronRules: ").append(toIndentedString(schematronRules)).append("\n");
        sb.append("    standardUrl: ").append(toIndentedString(standardUrl)).append("\n");
        sb.append("    targetNamespace: ").append(toIndentedString(targetNamespace)).append("\n");
        sb.append("    titles: ").append(toIndentedString(titles)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
