### The following properties are inherited from the geOrchestra default.properties,
### if you want to override them for datafeeder, uncomment them.
# PostgreSQL server domain name
# Domain name, or IP address, of the PostgreSQL server
# pgsqlHost=localhost

# PostgreSQL server port
# Listening port of the PostgreSQL server
# pgsqlPort=5432

# PostgreSQL database name
# Default common PostgreSQL database for all geOrchestra modules
# pgsqlDatabase=georchestra

# User to connect to PostgreSQL server
# Default common PostgreSQL user for all geOrchestra modules
# pgsqlUser=georchestra

# Password to connect to PostgreSQL server
# Default common password of PostgreSQL user for all geOrchestra modules
# pgsqlPassword=georchestra

####################################
#  Datafeeder specific properties  #
####################################

# pgsqlSchema=datafeeder

# maximum size allowed for uploaded files. (e.g. 128MB, GB can't be used, only KB or MB)
file-upload.max-file-size=5MB
# maximum size allowed for multipart/form-data requests (e.g. 128MB, GB can't be used, only KB or MB)
file-upload.max-request-size=10MB
# size threshold after which files will be written to disk.
file-upload.file-size-threshold=1MB
# directory location where files will be stored by the servlet container once the request exceeds the {@link #fileSizeThreshold}
file-upload.temporary-location=${java.io.tmpdir}/datafeeder/tmp
# directory location where files will be stored.
file-upload.persistent-location=${java.io.tmpdir}/datafeeder/uploads

datafeeder.publishing.geoserver.api-url=http://localhost:8080/geoserver/rest
datafeeder.publishing.geoserver.public-url=${scheme}://${domainName}/geoserver

datafeeder.publishing.geonetwork.api-url=http://localhost:8081/geonetwork
datafeeder.publishing.geonetwork.public-url=${scheme}://${domainName}/geonetwork

datafeeder.publishing.backend.local.dbtype=postgis
datafeeder.publishing.backend.local.host=localhost
datafeeder.publishing.backend.local.port=5432
datafeeder.publishing.backend.local.database=datafeeder
datafeeder.publishing.backend.local.schema=public
datafeeder.publishing.backend.local.user=postgres
datafeeder.publishing.backend.local.passwd=postgres
datafeeder.publishing.backend.local.preparedStatements=true

datafeeder.publishing.backend.geoserver.dbtype=postgis
datafeeder.publishing.backend.geoserver.preparedStatements=true
#<schema> is a placeholder to be replaced by the actual schema computed from the "sec-org" request header
datafeeder.publishing.backend.geoserver.schema=<schema>
#datafeeder.publishing.backend.geoserver.jndiReferenceName=java:comp/env/jdbc/datafeeder
#if a JNDI data source is configured in geoserver, uncomment the above line and comment out the following ones 
datafeeder.publishing.backend.geoserver.host=localhost
datafeeder.publishing.backend.geoserver.port=5432
datafeeder.publishing.backend.geoserver.database=datafeeder
datafeeder.publishing.backend.geoserver.user=postgres
datafeeder.publishing.backend.geoserver.passwd=postgres

# note how to set a property with spaces: property.prefix.[name\ with\ spaces]=value
datafeeder.publishing.backend.geoserver.[Loose\ bbox]=false
datafeeder.publishing.backend.geoserver.[Estimated\ extends]=true




