# GeoNetwork datadir location:
geonetwork.dir=/mnt/geonetwork_datadir
# Note that it can/should be overriden at runtime with -Dgeonetwork.dir=/path/to/...

# GeoNetwork datadir subdirectories are embedded by default,
# but they can be eventually relocated elsewhere, eg to use geonetwork-provided
# schemas:
# geonetwork.schema.dir=/var/lib/jetty/webapps/geonetwork/WEB-INF/data/config/schema_plugins/
geonetwork.config.dir=${geonetwork.dir}/config/
geonetwork.schema.dir=/var/lib/jetty/webapps/geonetwork/WEB-INF/data/config/schema_plugins/
geonetwork.lucene.dir=${geonetwork.dir}/index/
geonetwork.thesauri.dir=${geonetwork.config.dir}/codelist/
geonetwork.data.dir=${geonetwork.dir}/data/metadata_data/
geonetwork.svn.dir=${geonetwork.dir}/data/metadata_subversion/
geonetwork.resources.dir=${geonetwork.dir}/data/resources/
geonetwork.upload.dir=${geonetwork.dir}/data/upload/
geonetwork.formatter.dir=${geonetwork.dir}/data/formatter/
geonetwork.htmlcache.dir=${geonetwork.resources.dir}/htmlcache/
geonetwork.indexConfig.dir=/var/lib/jetty/webapps/geonetwork/WEB-INF/data/config/index

# AuthNZ integration uses console's REST API to fetch the canonical
# users and groups, regardless of where geOrchestra gets them from (LDAP or otherwise)
georchestra.console.url=http://console:8080

# Group synchronization mode.
# Defines whether to synchronize GeoNetwork Groups with Georchestra Organizations or Roles.
# Allowed values are 'orgs' and 'roles'. Defaults to 'orgs', meaning each synchronized
# User will be matched to one GeoNetwork Group, which in turn matches the user's organization.
# A value of 'roles' means GeoNetwork Groups will be synchronized with Georchestra roles instead
# of organizations, and Users will be synchronized so that they belong to all the Groups that match
# its roles
geonetwork.syncMode=orgs

# If using 'roles' sync mode, a Java regular expression can be used to filter
# which Georchestra roles are to be mapped to GeoNetwork groups. Only those role names
# that march the regular expression will be mapped.
geonetwork.syncRolesFilter=EL_(.*)


# Map geOrchestra user role names to GeoNetwork user profiles.
# Available GN profile names are:
# Administrator, UserAdmin, Reviewer, Editor, RegisteredUser, Guest, Monitor
geonetwork.profiles.default:RegisteredUser
geonetwork.profiles.rolemappings.[GN_ADMIN]=Administrator
geonetwork.profiles.rolemappings.[GN_USERADMIN]=UserAdmin
geonetwork.profiles.rolemappings.[GN_REVIEWER]=Reviewer
geonetwork.profiles.rolemappings.[GN_EDITOR]=Editor
geonetwork.profiles.rolemappings.[USER]=RegisteredUser

# Scheduled users/groups synchronization configuration
# timeUnit allows: MILLISECONDS/SECONDS/MINUTES/HOURS
# The following are default values, uncomment and modify as needed
geonetwork.scheduled.enabled=true
#geonetwork.scheduled.timeUnit=SECONDS
#geonetwork.scheduled.retryOnFailure=true
#geonetwork.scheduled.initialDelay=10
#geonetwork.scheduled.retryDelay=10
#geonetwork.scheduled.delayBetweenRuns=60

# database configuration
jdbc.host=database
jdbc.port=5432
jdbc.database=georchestra
jdbc.schema=geonetwork
jdbc.username=georchestra
jdbc.password=georchestra
jdbc.connectionProperties=currentSchema=geonetwork

# The maximum number of active connections that can be allocated from this pool
# at the same time, or negative for no limit
jdbc.basic.maxActive=50
# The minimum number of active connections that can remain idle in the pool,
# without extra ones being created, or 0 to create none
jdbc.basic.minIdle=1
# The maximum number of connections that can remain idle in the pool, without
# extra ones being released, or negative for no limit
jdbc.basic.maxIdle=10
# The maximum number of open statements that can be allocated from the statement
# pool at the same time, or non-positive for no limit
jdbc.basic.maxOpenPreparedStatements=100
# The maximum number of milliseconds that the pool will wait (when there are no
# available connections) for a connection to be returned before throwing an
# exception, or <= 0 to wait indefinitely
jdbc.basic.maxWait=200
# The indication of whether objects will be validated before being borrowed from
# the pool:
jdbc.basic.testOnBorrow=true
# The SQL query that will be used to validate connections from this pool before
# returning them to the caller
jdbc.basic.validationQuery=SELECT 1

# Schematron validation job, which scans non-harvested metadatas regularly,
# then updates the validation table in the database, runs every 2 hours:
schematron.job.activated=true
schematron.job.cronExpression=0 0 0/2 * * ?

# GN 4
es.featureproxy.targeturi=http://${ES_HOST}:${ES_PORT}/gn-features/{_}
es.protocol=http
es.port=9200
es.host=elasticsearch
es.url=${es.protocol}://${es.host}:${es.port}
kb.url=http://kibana:5601
jms.url=tcp://localhost:61616
