swagger: '2.0'
info:
  description: Learn how to access the catalog using the GeoNetwork REST API.
  version: '0.1'
  title: GeoNetwork Api Documentation (beta)
  termsOfService: 'urn:tos'
  contact:
    name: geonetwork@osgeo.org
  license:
    name: GPL 2.0
    url: 'http://www.gnu.org/licenses/old-licenses/gpl-2.0.html'
host: 'localhost:28080'
basePath: /geonetwork
tags:
  - name: csw
    description: Virtual CSW operations
  - name: customstyle
    description: Functionalities for custom styling
  - name: formatters
    description: Formatter operations
  - name: groups
    description: Groups operations
  - name: harvesters
    description: Harvester operations
  - name: identifiers
    description: Identifiers operations
  - name: languages
    description: Languages operations
  - name: links
    description: Record link operations
  - name: logos
    description: Logos operations
  - name: mapservers
    description: Mapservers related operations
  - name: me
    description: Me operations
  - name: operations
    description: Privileges operations
  - name: pages
    description: Static pages inside GeoNetwork
  - name: processes
    description: Processing operations
  - name: records
    description: Metadata record operations
  - name: regions
    description: Regions operations
  - name: registries
    description: Registries related operations
  - name: related
    description: Related records
  - name: selections
    description: Selection related operations
  - name: site
    description: Catalog operations
  - name: sources
    description: Source catalogue operations
  - name: standards
    description: Standard related operations
  - name: status
    description: Workflow status operations
  - name: tags
    description: Tags operations
  - name: tools
    description: Utility operations
  - name: ui
    description: User interface configuration operations
  - name: userfeedback
    description: User feedback
  - name: users
    description: User operations
  - name: usersearches
    description: User custom searches operations
  - name: userselections
    description: User selections related operations
  - name: workers
    description: Workers related operations
paths:
  '/srv/api/0.1/csw/virtuals':
    get:
      tags:
        - csw
      summary: Get virtual CSW services
      description: >-
        Virtual CSWs are created to easily setup services providing access to
        records without the need to define filters. For example, in Europe,
        local, regional and national organizations define entry point for
        records in the scope of the INSPIRE directive. Those services can then
        be easily harvested to exchange information. Virtual CSWs do not support
        transaction. For this use the main catalog CSW service.
      operationId: getAllVirtualCsw
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
    put:
      tags:
        - csw
      summary: Add a virtual CSW
      description: >-
        The service name MUST be unique. An exception is returned if not the
        case.
      operationId: addVirtualCsw
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: service
          description: Service details
          required: true
          schema:
            $ref: '#/definitions/Service'
      responses:
        '201':
          description: Return the identifier of the newly created service
          schema:
            type: integer
            format: int32
        '403':
          description: Operation not allowed. Only Administrator can access it.
        '404':
          description: A service already exist with this name
      security:
        - basicAuth: []
  '/srv/api/0.1/csw/virtuals/{identifier}':
    get:
      tags:
        - csw
      summary: Get a virtual CSW
      operationId: getVirtualCsw
      produces:
        - application/json
      parameters:
        - name: identifier
          in: path
          description: Service identifier
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Service'
        '404':
          description: Resource not found.
    put:
      tags:
        - csw
      summary: Update a virtual CSW
      operationId: updateVirtualCsw
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: identifier
          in: path
          description: Service identifier
          required: true
          type: integer
          format: int32
        - in: body
          name: service
          description: Service details
          required: true
          schema:
            $ref: '#/definitions/Service'
      responses:
        '204':
          description: Service updated.
        '403':
          description: Operation not allowed. Only Administrator can access it.
        '404':
          description: Resource not found.
      security:
        - basicAuth: []
    delete:
      tags:
        - csw
      summary: Remove a virtual CSW
      description: 'After removal, all virtual CSW configuration is reloaded.'
      operationId: deleteVirtualCsw
      produces:
        - application/json
      parameters:
        - name: identifier
          in: path
          description: Service identifier
          required: true
          type: integer
          format: int32
      responses:
        '204':
          description: Service removed.
        '403':
          description: Operation not allowed. Only Administrator can access it.
        '404':
          description: Resource not found.
      security:
        - basicAuth: []
  '/srv/api/0.1/customstyle':
    get:
      tags:
        - customstyle
      summary: Get CssStyleSettings
      description: This returns a map with all Less variables.
      operationId: getCssStyle
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: string
    post:
      tags:
        - customstyle
      summary: Saves custom style variables.
      description: Saves custom style variables.
      operationId: saveCustomStyle
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: gnCssStyle
          description: jsonVariables
          required: false
          schema:
            type: string
      responses:
        '201':
          description: Created
          schema:
            type: string
  '/srv/api/0.1/formatters/cache':
    delete:
      tags:
        - formatters
      summary: Clear formatter cache
      description: >-
        Formatters are used to render records in various format (HTML, PDF,
        ...). When a record is rendered a cache is populated for better
        performance. By default the cache is an H2 database with files on the
        filesystems (See <dataDirectory>/resources/htmlcache/formatter-cache
        folder).
      operationId: clearFormatterCache
      produces:
        - '*/*'
      responses:
        '204':
          description: Cache cleared.
        '403':
          description: Operation not allowed. Only Administrator can access it.
      security:
        - basicAuth: []
  '/srv/api/0.1/groups':
    get:
      tags:
        - groups
      summary: Get groups
      description: >-
        The catalog contains one or more groups. By default, there is 3 reserved
        groups (Internet, Intranet, Guest) and a sample group.<br/>This service
        returns all catalog groups when not authenticated or when current is
        user is an administrator. The list can contains or not reserved groups
        depending on the parameters.<br/>When authenticated, return user groups
        optionally filtered on a specific user profile.
      operationId: getGroups
      produces:
        - application/json
      parameters:
        - name: withReservedGroup
          in: query
          description: 'Including Internet, Intranet, Guest groups or not'
          required: false
          type: boolean
          default: false
        - name: profile
          in: query
          description: For a specific profile
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
    put:
      tags:
        - groups
      summary: Add a group
      description: Return the identifier of the group created.
      operationId: addGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: group
          description: Group details
          required: false
          schema:
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Group created.
          schema:
            type: integer
            format: int32
        '400':
          description: Group with that id or name already exist.
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
      security:
        - basicAuth: []
  '/srv/api/0.1/groups/{groupIdentifier}':
    get:
      tags:
        - groups
      summary: Get group
      description: Return the requested group details.
      operationId: getGroup
      produces:
        - application/json
      parameters:
        - name: groupIdentifier
          in: path
          description: Group identifier
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Group'
        '404':
          description: Resource not found.
    put:
      tags:
        - groups
      summary: Update a group
      operationId: updateGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: groupIdentifier
          in: path
          description: Group identifier
          required: true
          type: integer
          format: int32
        - in: body
          name: group
          description: Group details
          required: false
          schema:
            $ref: '#/definitions/Group'
      responses:
        '204':
          description: Group updated.
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
        '404':
          description: Resource not found.
      security:
        - basicAuth: []
    delete:
      tags:
        - groups
      summary: Remove a group
      description: >-
        Remove a group by first removing sharing settings, link to users and
        finally reindex all affected records.
      operationId: deleteGroup
      produces:
        - application/json
      parameters:
        - name: groupIdentifier
          in: path
          description: Group identifier.
          required: true
          type: integer
          format: int32
        - name: force
          in: query
          description: Force removal even if records are assigned to that group.
          required: false
          type: boolean
          default: false
      responses:
        '204':
          description: Group removed.
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
        '404':
          description: Resource not found.
      security:
        - basicAuth: []
  '/srv/api/0.1/groups/{groupIdentifier}/users':
    get:
      tags:
        - groups
      summary: Get group users
      operationId: getGroupUsers
      produces:
        - application/json
      parameters:
        - name: groupIdentifier
          in: path
          description: Group identifier
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: List of users in that group.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
        '404':
          description: Resource not found.
      security:
        - basicAuth: []
  '/srv/api/0.1/groups/{groupId}/logo':
    get:
      tags:
        - groups
      summary: Get the group logo image.
      description: >-
        If last-modified header is present it is used to check if the logo has
        been modified since the header date. If it hasn't been modified returns
        an empty 304 Not Modified response. If modified returns the image. If
        the group has no logo then returns a transparent 1x1 px PNG image.
      operationId: get
      produces:
        - '*/*'
      parameters:
        - name: groupId
          in: path
          description: Group identifier
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
  '/srv/api/0.1/harvesters/properties/{property}':
    get:
      tags:
        - harvesters
      summary: Check if a harvester name or host already exist
      operationId: checkHarvesterPropertyExist
      produces:
        - '*/*'
      parameters:
        - name: property
          in: path
          description: The harvester property to check
          required: true
          type: string
        - name: exist
          in: query
          description: The value to search
          required: false
          type: string
      responses:
        '200':
          description: Property does not exist.
          schema:
            type: string
            enum:
              - '100'
              - '101'
              - '102'
              - '103'
              - '200'
              - '201'
              - '202'
              - '203'
              - '204'
              - '205'
              - '206'
              - '207'
              - '208'
              - '226'
              - '300'
              - '301'
              - '302'
              - '303'
              - '304'
              - '305'
              - '307'
              - '308'
              - '400'
              - '401'
              - '402'
              - '403'
              - '404'
              - '405'
              - '406'
              - '407'
              - '408'
              - '409'
              - '410'
              - '411'
              - '412'
              - '413'
              - '414'
              - '415'
              - '416'
              - '417'
              - '418'
              - '419'
              - '420'
              - '421'
              - '422'
              - '423'
              - '424'
              - '426'
              - '428'
              - '429'
              - '431'
              - '500'
              - '501'
              - '502'
              - '503'
              - '504'
              - '505'
              - '506'
              - '507'
              - '508'
              - '509'
              - '510'
              - '511'
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
        '404':
          description: A property with that value already exist.
      security:
        - basicAuth: []
  '/srv/api/0.1/harvesters/{harvesterUuid}/assign':
    post:
      tags:
        - harvesters
      summary: Assign harvester records to a new source
      operationId: assignHarvestedRecordToSource
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: harvesterUuid
          in: path
          description: The harvester UUID
          required: true
          type: string
        - name: source
          in: query
          description: The target source UUID
          required: false
          type: string
      responses:
        '204':
          description: Harvester records transfered to new source.
          schema:
            type: string
            enum:
              - '100'
              - '101'
              - '102'
              - '103'
              - '200'
              - '201'
              - '202'
              - '203'
              - '204'
              - '205'
              - '206'
              - '207'
              - '208'
              - '226'
              - '300'
              - '301'
              - '302'
              - '303'
              - '304'
              - '305'
              - '307'
              - '308'
              - '400'
              - '401'
              - '402'
              - '403'
              - '404'
              - '405'
              - '406'
              - '407'
              - '408'
              - '409'
              - '410'
              - '411'
              - '412'
              - '413'
              - '414'
              - '415'
              - '416'
              - '417'
              - '418'
              - '419'
              - '420'
              - '421'
              - '422'
              - '423'
              - '424'
              - '426'
              - '428'
              - '429'
              - '431'
              - '500'
              - '501'
              - '502'
              - '503'
              - '504'
              - '505'
              - '506'
              - '507'
              - '508'
              - '509'
              - '510'
              - '511'
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
        '404':
          description: Resource not found.
      security:
        - basicAuth: []
  '/srv/api/0.1/identifiers':
    get:
      tags:
        - identifiers
      summary: Get identifier templates
      description: >-
        Identifier templates are used to create record UUIDs havind a particular
        structure. The template will be used when user creates a new record. The
        template identifier to use is defined in the administration > settings.
      operationId: getIdentifiers
      produces:
        - application/json
      parameters:
        - name: userDefinedOnly
          in: query
          description: Only user defined ones
          required: false
          type: boolean
          default: false
      responses:
        '200':
          description: List of identifier templates.
          schema:
            type: array
            items:
              $ref: '#/definitions/MetadataIdentifierTemplate'
        '403':
          description: Operation not allowed. Only Editor can access it.
      security:
        - basicAuth: []
    put:
      tags:
        - identifiers
      summary: Add an identifier template
      operationId: addIdentifier
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: metadataIdentifierTemplate
          description: Identifier template details
          required: false
          schema:
            $ref: '#/definitions/MetadataIdentifierTemplate'
      responses:
        '201':
          description: Identifier template created.
          schema:
            type: integer
            format: int32
        '403':
          description: Operation not allowed. Only Editor can access it.
      security:
        - basicAuth: []
  '/srv/api/0.1/identifiers/{identifier}':
    put:
      tags:
        - identifiers
      summary: Update an identifier template
      operationId: updateIdentifier
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: identifier
          in: path
          description: Identifier template identifier
          required: true
          type: integer
          format: int32
        - in: body
          name: metadataIdentifierTemplate
          description: Identifier template details
          required: false
          schema:
            $ref: '#/definitions/MetadataIdentifierTemplate'
      responses:
        '204':
          description: Identifier template updated.
        '403':
          description: Operation not allowed. Only Editor can access it.
        '404':
          description: Resource not found.
      security:
        - basicAuth: []
    delete:
      tags:
        - identifiers
      summary: Remove an identifier template
      operationId: deleteIdentifier
      produces:
        - application/json
      parameters:
        - name: identifier
          in: path
          description: Identifier template identifier
          required: true
          type: integer
          format: int32
      responses:
        '204':
          description: Template identifier removed.
        '403':
          description: Operation not allowed. Only Editor can access it.
        '404':
          description: Resource not found.
      security:
        - basicAuth: []
  '/srv/api/0.1/isolanguages':
    get:
      tags:
        - languages
      summary: Get ISO languages
      description: >-
        ISO languages provides a list of all languages (eg. used for
        autocompletion in metadata editor).
      operationId: getIsoLanguages
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/IsoLanguage'
  '/srv/api/0.1/languages':
    get:
      tags:
        - languages
      summary: Get languages
      description: >-
        Languages for the application having translations in the database. All
        tables with 'Desc' suffix contains translation for some domain objects
        like groups, tags, ...
      operationId: getLanguages
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Language'
  '/srv/api/0.1/languages/{langCode}':
    put:
      tags:
        - languages
      summary: Add a language
      description: >-
        Add all default translations from all *Desc tables in the database. This
        operation will only add translations for a default catalog installation.
        Defaults can be customized in SQL scripts located in
        WEB-INF/classes/setup/sql/data/*.
      operationId: addLanguage
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: langCode
          in: path
          description: ISO 3 letter code
          required: true
          type: string
      responses:
        '201':
          description: Language translations added.
        '403':
          description: Operation not allowed. Only Administrator can access it.
        '404':
          description: Resource not found. eg. No SQL file available for that langugae.
      security:
        - basicAuth: []
    delete:
      tags:
        - languages
      summary: Remove a language
      description: >-
        Delete all translations from all *Desc tables in the database. Warning:
        This will also remove all translations you may have done to those
        objects (eg. custom groups).
      operationId: deleteLanguage
      produces:
        - '*/*'
      parameters:
        - name: langCode
          in: path
          description: ISO 3 letter code
          required: true
          type: string
      responses:
        '204':
          description: Language translations removed.
        '403':
          description: Operation not allowed. Only Administrator can access it.
        '404':
          description: Resource not found.
      security:
        - basicAuth: []
  '/srv/api/0.1/logos':
    get:
      tags:
        - logos
      summary: Get all logos
      description: >-
        Logos are used for the catalog, the groups logos, and harvester icons.
        Logos are stored in the data directory in
        <dataDirectory>/resources/images/harvesting.<br/> Records are attached
        to a source. A source can be the local catalog or a harvester node. When
        a source is created, its logo is located in the images/logos folder with
        the source UUID as filename. For some sources the logo can be
        automatically retrieved (eg. when harvesting GeoNetwork catalogs). For
        others, the logo is usually manually defined when configuring the
        harvester.
      operationId: getLogos
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: string
    post:
      tags:
        - logos
      summary: Add a logo
      operationId: addLogo
      consumes:
        - application/json
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: file
          in: formData
          description: The logo image to upload
          required: false
          type: array
          items:
            type: file
          collectionFormat: multi
        - name: overwrite
          in: query
          description: Overwrite if exists
          required: false
          type: boolean
          default: false
      responses:
        '201':
          description: Logo added.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
      security:
        - basicAuth: []
  '/srv/api/0.1/logos/{file}':
    delete:
      tags:
        - logos
      summary: Remove a logo
      operationId: deleteLogo
      produces:
        - application/json
      parameters:
        - name: file
          in: path
          description: The logo filename to delete
          required: true
          type: string
      responses:
        '204':
          description: Logo removed.
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
        '404':
          description: Resource not found.
      security:
        - basicAuth: []
  '/srv/api/0.1/mapservers':
    get:
      tags:
        - mapservers
      summary: Get mapservers
      description: >-
        Mapservers are used by the catalog to publish record attachements (eg.
        ZIP file with shape) or record associated resources (eg. database table,
        file on the local network) in a remote mapserver like GeoServer or
        MapServer. The catalog communicate with the mapserver using GeoServer
        REST API.
      operationId: getMapservers
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/AnonymousMapserver'
        '403':
          description: Operation not allowed. Only Editors can access it.
      security:
        - basicAuth: []
    put:
      tags:
        - mapservers
      summary: Add a mapserver
      description: Return the id of the newly created mapserver.
      operationId: addMapserver
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: mapserver
          description: Mapserver details
          required: true
          schema:
            $ref: '#/definitions/MapServer'
      responses:
        '201':
          description: Mapserver created.
          schema:
            type: integer
            format: int32
        '400':
          description: Bad parameters.
        '403':
          description: Operation not allowed. Only Reviewvers can access it.
      security:
        - basicAuth: []
  '/srv/api/0.1/mapservers/{mapserverId}':
    get:
      tags:
        - mapservers
      summary: Get a mapserver
      operationId: getMapserver
      produces:
        - application/json
      parameters:
        - name: mapserverId
          in: path
          description: Mapserver identifier
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AnonymousMapserver'
        '403':
          description: Operation not allowed. Only Editors can access it.
        '404':
          description: Resource not found.
      security:
        - basicAuth: []
    put:
      tags:
        - mapservers
      summary: Update a mapserver
      operationId: updateMapserver
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: mapserverId
          in: path
          description: Mapserver identifier
          required: true
          type: integer
          format: int32
        - in: body
          name: mapserver
          description: Mapserver details
          required: true
          schema:
            $ref: '#/definitions/MapServer'
      responses:
        '204':
          description: Mapserver updated.
        '403':
          description: Operation not allowed. Only Reviewvers can access it.
        '404':
          description: Resource not found.
      security:
        - basicAuth: []
    delete:
      tags:
        - mapservers
      summary: Remove a mapserver
      operationId: deleteMapserver
      produces:
        - application/json
      parameters:
        - name: mapserverId
          in: path
          description: Mapserver identifier
          required: true
          type: integer
          format: int32
      responses:
        '204':
          description: Mapserver removed.
        '403':
          description: Operation not allowed. Only Reviewvers can access it.
        '404':
          description: Resource not found.
      security:
        - basicAuth: []
  '/srv/api/0.1/mapservers/{mapserverId}/auth':
    post:
      tags:
        - mapservers
      summary: Update a mapserver authentication
      description: >-
        The remote mapserver REST API may require basic authentication. This
        operation set the username and password.
      operationId: updateMapserverAuth
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: mapserverId
          in: path
          description: Mapserver identifier
          required: true
          type: integer
          format: int32
        - name: username
          in: query
          description: User name
          required: true
          type: string
        - name: password
          in: query
          description: Password
          required: true
          type: string
      responses:
        '204':
          description: Mapserver updated.
        '403':
          description: Operation not allowed. Only Reviewvers can access it.
        '404':
          description: Resource not found.
      security:
        - basicAuth: []
  '/srv/api/0.1/mapservers/{mapserverId}/records/{metadataUuid}':
    get:
      tags:
        - mapservers
      summary: 'Check metadata mapserver resource is published '
      operationId: getMapserverResource
      produces:
        - text/plain
      parameters:
        - name: mapserverId
          in: path
          description: Mapserver identifier
          required: true
          type: string
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: resource
          in: query
          description: Resource name (could be a file or a db connection)
          required: true
          type: string
        - name: metadataTitle
          in: query
          description: Metadata title
          required: false
          type: string
        - name: metadataAbstract
          in: query
          description: Metadata abstract
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '403':
          description: Operation not allowed. Only Editors can access it.
      security:
        - basicAuth: []
    put:
      tags:
        - mapservers
      summary: Publish a metadata resource in a mapserver
      operationId: publishMapserverResource
      consumes:
        - application/json
      produces:
        - text/plain
      parameters:
        - name: mapserverId
          in: path
          description: Mapserver identifier
          required: true
          type: string
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: resource
          in: query
          description: Resource name (could be a file or a db connection)
          required: true
          type: string
        - name: metadataTitle
          in: query
          description: Metadata title
          required: false
          type: string
        - name: metadataAbstract
          in: query
          description: Metadata abstract
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '403':
          description: Operation not allowed. Only Editors can access it.
      security:
        - basicAuth: []
    delete:
      tags:
        - mapservers
      summary: Remove a metadata mapserver resource
      operationId: deleteMapserverResource
      produces:
        - text/plain
      parameters:
        - name: mapserverId
          in: path
          description: Mapserver identifier
          required: true
          type: string
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: resource
          in: query
          description: Resource name (could be a file or a db connection)
          required: true
          type: string
        - name: metadataTitle
          in: query
          description: Metadata title
          required: false
          type: string
        - name: metadataAbstract
          in: query
          description: Metadata abstract
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '403':
          description: Operation not allowed. Only Editors can access it.
      security:
        - basicAuth: []
  '/srv/api/0.1/me':
    get:
      tags:
        - me
      summary: Get information about me
      description: >-
        If not authenticated, return status 204 (NO_CONTENT), else return basic
        user information. This operation is usually used to know if current user
        is authenticated or not.It returns also info about groups and profiles.
      operationId: getMe
      produces:
        - application/json
      responses:
        '200':
          description: Authenticated. Return user details.
          schema:
            $ref: '#/definitions/MeResponse'
        '204':
          description: Not authenticated.
          schema:
            $ref: '#/definitions/MeResponse'
  '/srv/api/0.1/operations':
    get:
      tags:
        - operations
      summary: Get operations
      description: >-
        Return the list of operations. Operations are used to define
        authorization per group. Extending the list of default operations (ie.
        view, dynamic, download, editing, notify, featured) might be feasible
        but is experimental.<br/> Featured is not really used anymore (was used
        in past version for home page highlights).
      operationId: getOperations
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Operation'
  '/srv/api/0.1/pages/':
    post:
      tags:
        - pages
      summary: Add a new Page object in DRAFT section in status HIDDEN
      description: >-
        <p>Is not possible to load a link and a file at the same time.</p> <a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html'>More
        info</a>
      operationId: addPage
      consumes:
        - multipart/form-data
      produces:
        - '*/*'
      parameters:
        - name: language
          in: query
          description: language
          required: true
          type: string
        - name: pageId
          in: query
          description: pageId
          required: true
          type: string
        - name: data
          in: formData
          description: data
          required: false
          type: file
        - name: link
          in: query
          description: link
          required: false
          type: string
        - name: format
          in: query
          description: format
          required: true
          type: string
          enum:
            - LINK
            - HTML
            - TEXT
            - MARKDOWN
            - WIKI
      responses:
        '200':
          description: Page saved
        '400':
          description: Wrong parameters are provided
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
        '404':
          description: Page not found
        '409':
          description: 'Page already in the system: use PUT'
        '500':
          description: File not valid
  '/srv/api/0.1/pages/list':
    get:
      tags:
        - pages
      summary: List all pages according to the filters
      description: >-
        <a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html'>More
        info</a>
      operationId: listPages
      produces:
        - application/json
      parameters:
        - name: language
          in: query
          description: language
          required: false
          type: string
        - name: section
          in: query
          description: section
          required: false
          type: string
          enum:
            - ALL
            - TOP
            - FOOTER
            - MENU
            - SUBMENU
            - CUSTOM_MENU1
            - CUSTOM_MENU2
            - CUSTOM_MENU3
            - DRAFT
        - name: format
          in: query
          description: format
          required: false
          type: string
          enum:
            - LINK
            - HTML
            - TEXT
            - MARKDOWN
            - WIKI
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/PageJSONWrapper'
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
  '/srv/api/0.1/pages/{language}/{pageId}':
    get:
      tags:
        - pages
      summary: Return the page object details except the content
      description: >-
        <a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html'>More
        info</a>
      operationId: getPage
      produces:
        - application/json
      parameters:
        - name: language
          in: path
          description: language
          required: true
          type: string
        - name: pageId
          in: path
          description: pageId
          required: true
          type: string
      responses:
        '200':
          description: Page found
          schema:
            $ref: '#/definitions/PageJSONWrapper'
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
        '404':
          description: Page not found
    post:
      tags:
        - pages
      summary: Edit a Page content and format
      description: >-
        <a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html'>More
        info</a>
      operationId: editPage
      consumes:
        - multipart/form-data
      produces:
        - '*/*'
      parameters:
        - name: language
          in: path
          description: language
          required: true
          type: string
        - name: pageId
          in: path
          description: pageId
          required: true
          type: string
        - name: data
          in: formData
          description: data
          required: false
          type: file
        - name: link
          in: query
          description: link
          required: false
          type: string
        - name: format
          in: query
          description: format
          required: true
          type: string
          enum:
            - LINK
            - HTML
            - TEXT
            - MARKDOWN
            - WIKI
      responses:
        '200':
          description: Page changes saved
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
    put:
      tags:
        - pages
      summary: Edit a Page name and language
      description: >-
        <a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html'>More
        info</a>
      operationId: editPage_1
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: language
          in: path
          description: language
          required: true
          type: string
        - name: pageId
          in: path
          description: pageId
          required: true
          type: string
        - name: newLanguage
          in: query
          description: newLanguage
          required: false
          type: string
        - name: newPageId
          in: query
          description: newPageId
          required: false
          type: string
      responses:
        '200':
          description: Page changes saved
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
    delete:
      tags:
        - pages
      summary: Delete a Page object
      description: >-
        <a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html'>More
        info</a>
      operationId: deletePage
      produces:
        - '*/*'
      parameters:
        - name: language
          in: path
          description: language
          required: true
          type: string
        - name: pageId
          in: path
          description: pageId
          required: true
          type: string
        - name: format
          in: query
          description: format
          required: true
          type: string
          enum:
            - LINK
            - HTML
            - TEXT
            - MARKDOWN
            - WIKI
      responses:
        '200':
          description: Page removed
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
        '404':
          description: Page not found
  '/srv/api/0.1/pages/{language}/{pageId}/content':
    get:
      tags:
        - pages
      summary: Return the static html content identified by pageId
      description: >-
        <a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html'>More
        info</a>
      operationId: getPage_1
      produces:
        - text/plain;charset=UTF-8
      parameters:
        - name: language
          in: path
          description: language
          required: true
          type: string
        - name: pageId
          in: path
          description: pageId
          required: true
          type: string
      responses:
        '200':
          description: Page found
          schema:
            type: string
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
        '404':
          description: Page not found
  '/srv/api/0.1/pages/{language}/{pageId}/{section}':
    post:
      tags:
        - pages
      summary: >-
        Adds the page to a section. This means that the link to the page will be
        shown in the list associated to that section.
      description: >-
        <a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html'>More
        info</a>
      operationId: addPageToSection
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: language
          in: path
          description: language
          required: true
          type: string
        - name: pageId
          in: path
          description: pageId
          required: true
          type: string
        - name: section
          in: path
          description: section
          required: true
          type: string
          enum:
            - ALL
            - TOP
            - FOOTER
            - MENU
            - SUBMENU
            - CUSTOM_MENU1
            - CUSTOM_MENU2
            - CUSTOM_MENU3
            - DRAFT
      responses:
        '200':
          description: Page changes saved
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
        '404':
          description: Page not found
    delete:
      tags:
        - pages
      summary: >-
        Removes the page from a section. This means that the link to the page
        will not be shown in the list associated to that section.
      description: >-
        <a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html'>More
        info</a>
      operationId: removePageFromSection_1
      produces:
        - '*/*'
      parameters:
        - name: language
          in: path
          description: language
          required: true
          type: string
        - name: pageId
          in: path
          description: pageId
          required: true
          type: string
        - name: section
          in: path
          description: section
          required: true
          type: string
          enum:
            - ALL
            - TOP
            - FOOTER
            - MENU
            - SUBMENU
            - CUSTOM_MENU1
            - CUSTOM_MENU2
            - CUSTOM_MENU3
            - DRAFT
      responses:
        '200':
          description: Page changes saved
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
        '404':
          description: Page not found
  '/srv/api/0.1/pages/{language}/{pageId}/{status}':
    put:
      tags:
        - pages
      summary: Changes the status of a page.
      description: >-
        <a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html'>More
        info</a>
      operationId: removePageFromSection
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: language
          in: path
          description: language
          required: true
          type: string
        - name: pageId
          in: path
          description: pageId
          required: true
          type: string
        - name: status
          in: path
          description: status
          required: true
          type: string
          enum:
            - PUBLIC
            - PUBLIC_ONLY
            - PRIVATE
            - HIDDEN
      responses:
        '200':
          description: Page changes saved
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
        '404':
          description: Page not found
  '/srv/api/0.1/processes/reports':
    get:
      tags:
        - processes
      summary: Get current process reports
      description: >-
        When processing, the report is stored in memory and allows to retrieve
        progress repport during processing. Usually, process reports are
        returned by the synchronous processing operation.
      operationId: getProcessReport
      produces:
        - application/json
      responses:
        '200':
          description: List of reports returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/ProcessingReport'
        '403':
          description: Operation not allowed. Only authenticated user can access it.
    delete:
      tags:
        - processes
      summary: Clear process reports list
      operationId: deleteProcess
      produces:
        - application/json
      responses:
        '204':
          description: Report registry cleared.
        '403':
          description: Operation not allowed. Only authenticated user can access it.
  '/srv/api/0.1/processes/search-and-replace':
    post:
      tags:
        - processes
      summary: Search and replace values in one or more records
      description: >-
        Service to apply replacements to one or more records.
         To define a replacement, send the following parameters:
         * mdsection-139815551372=metadata
         * mdfield-1398155513728=id.contact.individualName
         * replaceValue-1398155513728=Juan
         * searchValue-1398155513728=Jose

        TODO: Would be good to provide a simple object to define list of changes
        instead of group of parameters.<br/>Batch editing can also be used for
        similar works.
      operationId: searchAndReplace
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: process
          in: query
          description: process
          required: false
          type: string
          default: massive-content-update
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
        - name: isTesting
          in: query
          description: Test only (ie. metadata are not saved). Return the report only.
          required: false
          type: boolean
          default: false
        - name: isCaseInsensitive
          in: query
          description: Case insensitive search.
          required: false
          type: boolean
          default: false
        - name: vacuumMode
          in: query
          description: >-
            'record' to apply vacuum.xsl, 'element' to remove empty elements.
            Empty to not affect empty elements.
          required: false
          type: string
      responses:
        '200':
          description: Replacements applied.
          schema:
            $ref: '#/definitions/MetadataReplacementProcessingReport'
        '403':
          description: Operation not allowed. Only Editors can access it.
  '/srv/api/0.1/processes/{process}':
    get:
      tags:
        - processes
      summary: Preview process result applied to one or more records
      description: >-
        Preview result of a process applied to metadata records with an XSL
        transformation declared in the metadata schema (See the process folder).
        Parameters sent to the service are forwarded to XSL process. Append mode
        has 2 limitations. First, it only support a set of records in the same
        schema. Secondly, it does not propagate URL parameters. This mode is
        mainly used to create custom reports based on metadata records
        content.If process name ends with '.csv', the XSL process output a text
        document which is returned. When errors occur during processing, the
        processing report is returned in JSON format.
      operationId: previewProcessRecordsUsingXslt
      consumes:
        - text/html
        - '*/*'
      produces:
        - '*/*'
      parameters:
        - name: process
          in: path
          description: Process identifier
          required: false
          type: string
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
        - name: updateDateStamp
          in: query
          description: >-
            If true updates the DateStamp (or equivalent in standards different
            to ISO 19139) field in the metadata with the current timestamp
          required: false
          type: boolean
          default: true
        - name: appendFirst
          in: query
          description: Append documents before processing
          required: false
          type: boolean
          default: false
      responses:
        '200':
          description: Processed records.
          schema:
            type: object
        '403':
          description: Operation not allowed. Only Editors can access it.
    post:
      tags:
        - processes
      summary: Apply a process to one or more records
      description: >-
        Process a metadata with an XSL transformation declared in the metadata
        schema (See the process folder). Parameters sent to the service are
        forwarded to XSL process.
      operationId: processRecordsUsingXslt
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: process
          in: path
          description: Process identifier
          required: false
          type: string
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
        - name: updateDateStamp
          in: query
          description: >-
            If true updates the DateStamp (or equivalent in standards different
            to ISO 19139) field in the metadata with the current timestamp
          required: false
          type: boolean
          default: true
        - name: index
          in: query
          description: Index after processing
          required: false
          type: boolean
          default: true
      responses:
        '201':
          description: Report about processed records.
          schema:
            $ref: '#/definitions/XsltMetadataProcessingReport'
        '403':
          description: Operation not allowed. Only Editors can access it.
  '/srv/api/0.1/records':
    get:
      tags:
        - records
      summary: >-
        Get catalog content as RDF. This endpoint supports the same Lucene query
        parameters as for the GUI search.
      description: .
      operationId: getAsRdf
      consumes:
        - '*/*'
      produces:
        - '*/*'
        - application/rdf+xml
      parameters:
        - name: from
          in: query
          description: >-
            Indicates the start position in a sorted list of matches that the
            client wants to use as the beginning of a page result.
          required: false
          type: integer
          default: 1
          format: int32
        - name: hitsPerPage
          in: query
          description: Indicates the number of hits per page.
          required: false
          type: integer
          default: 10
          format: int32
        - name: any
          in: query
          description: Search key
          required: false
          type: string
        - name: title
          in: query
          description: A search key for the title.
          required: false
          type: string
        - name: facet.q
          in: query
          description: >-
            A search facet in the Lucene index. Use the GeoNetwork GUI search to
            generate the suitable filter values. Example:
            standard/dcat-ap&createDateYear/2018&sourceCatalog/6d93613e-2b76-4e26-94af-4b4c420a1758
            (filter by creation year and source catalog).
          required: false
          type: string
        - name: sortBy
          in: query
          description: >-
            Lucene sortBy criteria. Relevant values: relevance, title,
            changeDate.
          required: false
          type: string
        - name: sortOrder
          in: query
          description: 'Sort order. Possible values: reverse.'
          required: false
          type: string
        - name: similarity
          in: query
          description: >-
            Use the Lucene FuzzyQuery. Values range from 0.0 to 1.0 and defaults
            to 0.8.
          required: false
          type: number
          default: 0.8
          format: float
      responses:
        '200':
          description: Return the catalog content as RDF.
          headers:
            Link:
              type: string
              description: ' This response header parameter is used to indicate any of the links defined by LDP Paging: first page links, next page links, last page links, previous page links. First page link: a link to the first in-sequence page resource P1 (first) of a page sequence. The first page is the one that a LDP Paging server redirects to (303 response) in response to a retrieval request for the paged resource''s URI. Syntactically, a HTTP Link <P1>; rel="first" header [RFC5988]. Next page link: a link to the next in-sequence page resource of a page sequence. Syntactically, a HTTP Link <Pi>; rel="next" header [RFC5988] where the context URI identifies some Pi=1 (first)...n-1 (next to last) and the target URI identifies Pi+1. Last page link: a link to the last in-sequence page resource Pn (last) of a page sequence. The last page is the page that terminates a forward traversal, because it contains no next page link. Syntactically, a HTTP Link <Pn>; rel="last" header [RFC5988]. Previous page link: a link to the previous in-sequence page resource of a page sequence Syntactically, a HTTP Link <Pi>; rel="prev" header [RFC5988] where the context URI identifies some Pi=2...n (last) and the target URI identifies Pi-1. '
        '303':
          description: >-
            Redirect the client to the first in-sequence page resource. This
            happens when the paging parameters (from, hitsPerPage) are not
            included in the request.
    post:
      tags:
        - records
      summary: Add a record from XML or MEF/ZIP file
      description: Add record in the catalog by uploading files.
      operationId: insertFile
      consumes:
        - multipart/form-data
        - application/json
      produces:
        - application/json
      parameters:
        - name: metadataType
          in: query
          description: The type of record.
          required: false
          type: string
          default: METADATA
          enum:
            - METADATA
            - TEMPLATE
            - SUB_TEMPLATE
            - TEMPLATE_OF_SUB_TEMPLATE
        - name: file
          in: formData
          description: XML or MEF file to upload
          required: false
          type: array
          items:
            type: file
          collectionFormat: multi
        - name: uuidProcessing
          in: query
          description: Record identifier processing.
          required: false
          type: string
          default: NOTHING
          enum:
            - GENERATEUUID
            - NOTHING
            - OVERWRITE
        - name: group
          in: query
          description: The group the record is attached to.
          required: false
          type: string
        - name: category
          in: query
          description: Tags to assign to the record.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: rejectIfInvalid
          in: query
          description: Validate the record first and reject it if not valid.
          required: false
          type: boolean
          default: false
        - name: publishToAll
          in: query
          description: (XML file only) Publish record.
          required: false
          type: boolean
          default: false
        - name: assignToCatalog
          in: query
          description: (MEF file only) Assign to current catalog.
          required: false
          type: boolean
          default: false
        - name: transformWith
          in: query
          description: XSL transformation to apply to the record.
          required: false
          type: string
          default: _none_
        - name: schema
          in: query
          description: >-
            Force the schema of the record. If not set, schema autodetection is
            used (and is the preferred method).
          required: false
          type: string
        - name: extra
          in: query
          description: (experimental) Add extra information to the record.
          required: false
          type: string
      responses:
        '201':
          description: Report about imported records.
          schema:
            $ref: '#/definitions/SimpleMetadataProcessingReport'
        '403':
          description: Operation not allowed. Only Editors can access it.
    put:
      tags:
        - records
      summary: Add a record
      description: >-
        Add one or more record from an XML fragment, URL or file in a folder on
        the catalog server. When loadingfrom the catalog server folder, it might
        be faster to use a local filesystem harvester.
      operationId: insert
      consumes:
        - application/xml
#        - application/json
#        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: metadataType
          in: query
          description: The type of record.
          required: false
          type: string
          default: METADATA
          enum:
            - METADATA
            - TEMPLATE
            - SUB_TEMPLATE
            - TEMPLATE_OF_SUB_TEMPLATE
        - in: body
          name: xml
          description: XML fragment.
          required: false
          schema:
            type: string
        - name: url
          in: query
          description: URL of a file to download and insert.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: serverFolder
          in: query
          description: Server folder where to look for files.
          required: false
          type: string
        - name: recursiveSearch
          in: query
          description: (Server folder import only) Recursive search in folder.
          required: false
          type: boolean
          default: false
        - name: assignToCatalog
          in: query
          description: (MEF file only) Assign to current catalog.
          required: false
          type: boolean
          default: false
        - name: uuidProcessing
          in: query
          description: Record identifier processing.
          required: false
          type: string
          default: NOTHING
          enum:
            - GENERATEUUID
            - NOTHING
            - OVERWRITE
        - name: group
          in: query
          description: The group the record is attached to.
          required: false
          type: string
        - name: category
          in: query
          description: Tags to assign to the record.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: rejectIfInvalid
          in: query
          description: Validate the record first and reject it if not valid.
          required: false
          type: boolean
          default: false
        - name: transformWith
          in: query
          description: XSL transformation to apply to the record.
          required: false
          type: string
          default: _none_
        - name: schema
          in: query
          description: >-
            Force the schema of the record. If not set, schema autodetection is
            used (and is the preferred method).
          required: false
          type: string
        - name: extra
          in: query
          description: (experimental) Add extra information to the record.
          required: false
          type: string
      responses:
        '201':
          description: Report about imported records.
          schema:
            $ref: '#/definitions/SimpleMetadataProcessingReport'
        '403':
          description: Operation not allowed. Only Editors can access it.
    delete:
      tags:
        - records
      summary: Delete one or more records
      description: 'User MUST be able to edit the record to delete it. '
      operationId: deleteRecords
      produces:
        - application/json
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
        - name: withBackup
          in: query
          description: Backup first the record as MEF in the metadata removed folder.
          required: false
          type: boolean
          default: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SimpleMetadataProcessingReport'
        '204':
          description: Report about deleted records.
          schema:
            $ref: '#/definitions/SimpleMetadataProcessingReport'
        '403':
          description: Operation not allowed. Only Editors can access it.
  '/srv/api/0.1/records/backups':
    put:
      tags:
        - records
      summary: Trigger MEF backup archive
      description: The backup contains all metadata not harvested including templates.
      operationId: triggerBackup
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Return succeed message.
          schema:
            type: string
  '/srv/api/0.1/records/backups/latest':
    get:
      tags:
        - records
      summary: Download MEF backup archive
      description: The backup contains all metadata not harvested including templates.
      operationId: downloadBackup
      produces:
        - application/zip
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FileSystemResource'
        '404':
          description: Resource not found.
  '/srv/api/0.1/records/batchediting':
    put:
      tags:
        - records
      summary: >-
        Edit a set of records by XPath expressions. This operations applies the
        update-fixed-info.xsl transformation for the metadata schema and updates
        the change date if the parameter updateDateStamp is set to true.
      operationId: batchEdit
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
        - name: updateDateStamp
          in: query
          description: >-
            If true updates the DateStamp (or equivalent in standards different
            to ISO 19139) field in the metadata with the current timestamp
          required: false
          type: boolean
          default: false
        - in: body
          name: edits
          description: edits
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/BatchEditParameter'
      responses:
        '201':
          description: Return a report of what has been done.
          schema:
            $ref: '#/definitions/IProcessingReport'
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/duplicate':
    put:
      tags:
        - records
      summary: Create a new record
      description: >-
        Create a record from a template or by copying an existing record.Return
        the UUID of the newly created record. Existing links in the source
        record are preserved, this means that the new record may contains link
        to the source attachements. They need to be manually updated after
        creation.
      operationId: create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: metadataType
          in: query
          description: The type of record.
          required: false
          type: string
          default: METADATA
          enum:
            - METADATA
            - TEMPLATE
            - SUB_TEMPLATE
            - TEMPLATE_OF_SUB_TEMPLATE
        - name: sourceUuid
          in: query
          description: UUID of the source record to copy.
          required: true
          type: string
        - name: targetUuid
          in: query
          description: >-
            Assign a custom UUID. If this UUID already exist an error is
            returned. This is enabled only if metadata create / generate UUID
            settings is activated.
          required: false
          type: string
        - name: group
          in: query
          description: The group the record is attached to.
          required: true
          type: string
        - name: isVisibleByAllGroupMembers
          in: query
          description: >-
            Is published to all user group members? If not, only the author and
            administrator can edit the record.
          required: false
          type: boolean
          default: false
        - name: category
          in: query
          description: Tags to assign to the record.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: hasCategoryOfSource
          in: query
          description: Copy categories from source?
          required: false
          type: boolean
          default: false
        - name: isChildOfSource
          in: query
          description: Is child of the record to copy?
          required: false
          type: boolean
          default: false
      responses:
        '201':
          description: Return the internal id of the newly created record.
          schema:
            type: string
        '403':
          description: Operation not allowed. Only Editors can access it.
  '/srv/api/0.1/records/importfrommap':
    post:
      tags:
        - records
      summary: Add a map metadata record from OGC OWS context
      description: Add record in the catalog by uploading a map context.
      operationId: insertOgcMapContextFile
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: title
          in: query
          description: A map title
          required: true
          type: string
        - name: recordAbstract
          in: query
          description: A map abstract
          required: false
          type: string
        - name: xml
          in: query
          description: OGC OWS context as string
          required: false
          type: string
        - name: filename
          in: query
          description: OGC OWS context file name
          required: false
          type: string
        - name: url
          in: query
          description: OGC OWS context URL
          required: false
          type: string
        - name: viewerUrl
          in: query
          description: A map viewer URL to visualize the map
          required: false
          type: string
        - name: overview
          in: query
          description: Map overview as PNG (base64 encoded)
          required: false
          type: string
        - name: overviewFilename
          in: query
          description: Map overview filename
          required: false
          type: string
        - name: topic
          in: query
          description: Topic category
          required: false
          type: string
        - name: publishToAll
          in: query
          description: Publish record.
          required: false
          type: boolean
          default: false
        - name: uuidProcessing
          in: query
          description: Record identifier processing.
          required: false
          type: string
          default: NOTHING
          enum:
            - GENERATEUUID
            - NOTHING
            - OVERWRITE
        - name: group
          in: query
          description: The group the record is attached to.
          required: false
          type: string
      responses:
        '201':
          description: Report about imported records.
          schema:
            $ref: '#/definitions/SimpleMetadataProcessingReport'
        '403':
          description: Operation not allowed. Only Editors can access it.
  '/srv/api/0.1/records/index':
    get:
      tags:
        - records
      summary: Index a set of records
      description: Index a set of records provided either by a bucket or a list of uuids
      operationId: indexSelection
      produces:
        - application/json
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
      responses:
        '200':
          description: Record indexed.
          schema:
            type: object
            additionalProperties:
              type: object
        '403':
          description: Operation not allowed. Only Administrators can access it.
  '/srv/api/0.1/records/links':
    get:
      tags:
        - links
      summary: Get record links
      operationId: getRecordLinks
      produces:
        - application/json
      parameters:
        - name: from
          in: query
          description: From page
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: Number of records to return
          required: false
          type: integer
          default: 200
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Link'
    post:
      tags:
        - links
      summary: Analyze records links
      operationId: analyzeRecordLinks
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
        - name: removeFirst
          in: query
          description: removeFirst
          required: false
          type: boolean
          default: true
        - name: analyze
          in: query
          description: analyze
          required: false
          type: boolean
          default: false
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ResponseEntity'
    delete:
      tags:
        - links
      summary: Remove all links and status history
      operationId: purgeAll
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ResponseEntity'
  '/srv/api/0.1/records/ownership':
    put:
      tags:
        - records
      summary: Set group and owner for one or more records
      operationId: setGroupAndOwner
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: groupIdentifier
          in: query
          description: Group identifier
          required: true
          type: integer
          format: int32
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
        - name: userIdentifier
          in: query
          description: User identifier
          required: true
          type: integer
          format: int32
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          type: boolean
          default: false
      responses:
        '201':
          description: Records group and owner updated
          schema:
            $ref: '#/definitions/MetadataProcessingReport'
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/publish':
    put:
      tags:
        - records
      summary: Publish one or more records
      description: See record sharing for more details.
      operationId: publishRecords
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
      responses:
        '201':
          description: Report about updated privileges.
          schema:
            $ref: '#/definitions/MetadataProcessingReport'
        '403':
          description: Operation not allowed. Only Editors can access it.
  '/srv/api/0.1/records/samples':
    put:
      tags:
        - records
      summary: Add samples
      description: >-
        Add sample records for one or more schemas. Samples are defined for each
        standard in the samples folder as MEF files.
      operationId: addSamples
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: schema
          in: query
          description: Schema identifiers
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '201':
          description: Return a report of what has been done.
          schema:
            $ref: '#/definitions/SimpleMetadataProcessingReport'
        '403':
          description: Operation not allowed. Only Administrators can access it.
  '/srv/api/0.1/records/sharing':
    get:
      tags:
        - records
      summary: Get record sharing settings
      operationId: getSharingSettings
      produces:
        - application/json
      responses:
        '200':
          description: >-
            Return a default array of group and operations that can be used to
            set record sharing properties.
          schema:
            $ref: '#/definitions/SharingResponse'
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
    put:
      tags:
        - records
      summary: Set sharing settings for one or more records
      description: See record sharing for more details.
      operationId: shareRecords
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
        - in: body
          name: sharing
          description: Privileges
          required: true
          schema:
            $ref: '#/definitions/SharingParameter'
      responses:
        '201':
          description: Report about updated privileges.
          schema:
            $ref: '#/definitions/MetadataProcessingReport'
        '403':
          description: Operation not allowed. Only Editors can access it.
  '/srv/api/0.1/records/status/search':
    get:
      tags:
        - records
      summary: Search status
      operationId: searchStatusByType
      produces:
        - application/json
      parameters:
        - name: type
          in: query
          description: >-
            One or more types to retrieve (ie. worflow, event, task). Default is
            all.
          required: false
          type: array
          items:
            type: string
            enum:
              - workflow
              - task
              - event
          collectionFormat: multi
          enum:
            - workflow
            - task
            - event
        - name: details
          in: query
          description: >-
            All event details including XML changes. Responses are bigger.
            Default is false
          required: false
          type: boolean
        - name: author
          in: query
          description: One or more event author. Default is all.
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
        - name: owner
          in: query
          description: One or more event owners. Default is all.
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
        - name: record
          in: query
          description: One or more record identifier. Default is all.
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
        - name: dateFrom
          in: query
          description: Start date
          required: false
          type: string
        - name: dateTo
          in: query
          description: End date
          required: false
          type: string
        - name: from
          in: query
          description: From page
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: Number of records to return
          required: false
          type: integer
          default: 100
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/MetadataStatusResponse'
  '/srv/api/0.1/records/tags':
    put:
      tags:
        - records
      summary: Add tags to one or more records
      operationId: addTagsToRecords
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
        - name: id
          in: query
          description: Tag identifier
          required: true
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
        - name: clear
          in: query
          description: Clear all before adding new ones
          required: false
          type: boolean
          default: false
      responses:
        '201':
          description: Report about updated records.
          schema:
            $ref: '#/definitions/MetadataProcessingReport'
        '403':
          description: Operation not allowed. Only Editors can access it.
    delete:
      tags:
        - records
      summary: Delete tags to one or more records
      operationId: deleteRecordsTags
      produces:
        - application/json
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
        - name: id
          in: query
          description: Tag identifier
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
      responses:
        '201':
          description: Report about removed records.
          schema:
            $ref: '#/definitions/MetadataProcessingReport'
        '204':
          description: No Content
          schema:
            $ref: '#/definitions/MetadataProcessingReport'
        '403':
          description: Operation not allowed. Only Editors can access it.
  '/srv/api/0.1/records/templates':
    put:
      tags:
        - records
      summary: Add templates
      description: >-
        Add template records for one or more schemas. Templates are defined for
        each standard in the template folder as XML files. Template may also
        contains subtemplates.
      operationId: addTemplates
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: schema
          in: query
          description: Schema identifiers
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '201':
          description: Return a report of what has been done.
          schema:
            $ref: '#/definitions/SimpleMetadataProcessingReport'
        '403':
          description: Operation not allowed. Only Administrators can access it.
  '/srv/api/0.1/records/unpublish':
    put:
      tags:
        - records
      summary: Un-publish one or more records
      description: See record sharing for more details.
      operationId: publishRecords_1
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
      responses:
        '201':
          description: Report about updated privileges.
          schema:
            $ref: '#/definitions/MetadataProcessingReport'
        '403':
          description: Operation not allowed. Only Editors can access it.
  '/srv/api/0.1/records/validate':
    put:
      tags:
        - records
      summary: Validate one or more records
      description: Update validation status for all records.
      operationId: validateRecords
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
      responses:
        '201':
          description: Records validated.
          schema:
            $ref: '#/definitions/SimpleMetadataProcessingReport'
        '403':
          description: Operation not allowed. Only Editors can access it.
  '/srv/api/0.1/records/versions':
    put:
      tags:
        - records
      summary: (Experimental) Enable version control for one or more records
      operationId: enableVersionControlForRecords
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MetadataProcessingReport'
  '/srv/api/0.1/records/{metadataUuid}':
    get:
      tags:
        - records
      summary: Get a metadata record
      description: >-
        Depending on the accept header the appropriate formatter is used. When
        requesting a ZIP, a MEF version 2 file is returned. When requesting
        HTML, the default formatter is used.
      operationId: getRecord
      consumes:
        - '*/*'
      produces:
        - application/xml
        - text/html
        - application/json
        - application/pdf
        - '*/*'
        - application/x-gn-mef-1-zip
        - application/zip
        - application/xhtml+xml
        - application/x-gn-mef-2-zip
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: Accept
          in: header
          description: >-
            Accept header should indicate which is the appropriate format to
            return. It could be text/html, application/xml, application/zip,
            ...If no appropriate Accept header found, the XML format is
            returned.
          required: true
          type: string
          default: application/xml
      responses:
        '200':
          description: Return the record.
          schema:
            type: string
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
        '404':
          description: Resource not found.
    delete:
      tags:
        - records
      summary: Delete a record
      description: >-
        User MUST be able to edit the record to delete it. By default, a backup
        is made in ZIP format. After that, the record attachments are removed,
        the document removed from the index and then from the database.
      operationId: deleteRecord
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: withBackup
          in: query
          description: Backup first the record as MEF in the metadata removed folder.
          required: false
          type: boolean
          default: true
      responses:
        '204':
          description: Record deleted.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/alert':
    post:
      tags:
        - userfeedback
      summary: Send an email to catalogue administrator or record's contact
      operationId: sendEmailToContact
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Metadata record UUID.
          required: true
          type: string
        - name: recaptcha
          in: query
          description: Recaptcha validation key.
          required: false
          type: string
        - name: name
          in: query
          description: User name.
          required: true
          type: string
        - name: org
          in: query
          description: User organisation.
          required: true
          type: string
        - name: email
          in: query
          description: User email address.
          required: true
          type: string
        - name: comments
          in: query
          description: A comment or question.
          required: true
          type: string
        - name: phone
          in: query
          description: User phone number.
          required: false
          type: string
        - name: subject
          in: query
          description: Email subject.
          required: false
          type: string
          default: User feedback
        - name: function
          in: query
          description: User function.
          required: false
          type: string
          default: '-'
        - name: type
          in: query
          description: Comment type.
          required: false
          type: string
          default: '-'
        - name: category
          in: query
          description: Comment category.
          required: false
          type: string
          default: '-'
        - name: metadataEmail
          in: query
          description: List of record's contact to send this email.
          required: false
          type: string
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/ResponseEntity'
  '/srv/api/0.1/records/{metadataUuid}/attachments':
    get:
      tags:
        - records
      summary: List all metadata attachments
      description: >-
        <a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/using-filestore.html'>More
        info</a>
      operationId: getAllMetadataResources
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          type: string
        - name: sort
          in: query
          description: Sort by
          required: false
          type: string
          default: name
          enum:
            - type
            - name
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          type: boolean
          default: true
        - name: filter
          in: query
          description: filter
          required: false
          type: string
          default: '*.*'
      responses:
        '200':
          description: Return the record attachments.
          schema:
            type: array
            items:
              $ref: '#/definitions/MetadataResource'
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
    post:
      tags:
        - records
      summary: Create a new resource for a given metadata
      operationId: putResourceFromFile
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          type: string
        - name: visibility
          in: query
          description: The sharing policy
          required: false
          type: string
          default: public
          enum:
            - public
            - private
        - name: file
          in: formData
          description: The file to upload
          required: false
          type: file
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          type: boolean
          default: false
      responses:
        '201':
          description: Attachment uploaded.
          schema:
            $ref: '#/definitions/MetadataResource'
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
    put:
      tags:
        - records
      summary: Create a new resource from a URL for a given metadata
      operationId: putResourcesFromURL
      consumes:
        - application/json
      produces:
        - '*/*'
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          type: string
        - name: visibility
          in: query
          description: The sharing policy
          required: false
          type: string
          default: public
          enum:
            - public
            - private
        - name: url
          in: query
          description: The URL to load in the store
          required: false
          type: string
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          type: boolean
          default: false
      responses:
        '201':
          description: Attachment added.
          schema:
            $ref: '#/definitions/MetadataResource'
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
    delete:
      tags:
        - records
      summary: Delete all uploaded metadata resources
      operationId: deleteAllMetadataResources
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          type: string
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          type: boolean
          default: false
      responses:
        '204':
          description: Attachment added.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/attachments/print-thumbnail':
    put:
      tags:
        - records
      summary: Create an overview using the map print module
      description: >-
        <a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/linking-thumbnail.html#generating-a-thumbnail-using-wms-layers'>More
        info</a>
      operationId: createMetadataOverview
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: jsonConfig
          in: query
          description: The mapprint module JSON configuration
          required: true
          type: string
        - name: rotationAngle
          in: query
          description: The rotation angle of the map
          required: false
          type: integer
          default: 0
          format: int32
      responses:
        '201':
          description: Thumbnail created.
          schema:
            $ref: '#/definitions/MetadataResource'
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/attachments/{resourceId}':
    get:
      tags:
        - records
      summary: Get a metadata resource
      operationId: getResource
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          type: string
        - name: resourceId
          in: path
          description: The resource identifier (ie. filename)
          required: true
          type: string
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          type: boolean
          default: true
      responses:
        '200':
          description: OK
          schema:
            type: string
            format: byte
        '201':
          description: Record attachment.
          schema:
            type: string
            format: byte
        '403':
          description: >-
            Operation not allowed. User needs to be able to download the
            resource.
    delete:
      tags:
        - records
      summary: Delete a metadata resource
      operationId: deleteMetadataResource
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          type: string
        - name: resourceId
          in: path
          description: The resource identifier (ie. filename)
          required: true
          type: string
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          type: boolean
          default: false
      responses:
        '204':
          description: Attachment visibility removed.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
    patch:
      tags:
        - records
      summary: Update the metadata resource visibility
      operationId: patchMetadataResourceVisibility
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          type: string
        - name: resourceId
          in: path
          description: The resource identifier (ie. filename)
          required: true
          type: string
        - name: visibility
          in: query
          description: The visibility
          required: true
          type: string
          enum:
            - public
            - private
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          type: boolean
          default: false
      responses:
        '201':
          description: Attachment visibility updated.
          schema:
            $ref: '#/definitions/MetadataResource'
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/doi':
    put:
      tags:
        - records
      summary: Submit a record to the Datacite metadata store in order to create a DOI.
      operationId: createDoi
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: string
        '201':
          description: Check status of the report.
          schema:
            type: object
            additionalProperties:
              type: string
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
        '404':
          description: Metadata not found.
        '500':
          description: Service unavailable.
    delete:
      tags:
        - records
      summary: >-
        Remove a DOI (this is not recommended, DOI are supposed to be persistent
        once created. This is mainly here for testing).
      operationId: deleteDoi
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ResponseEntity'
        '204':
          description: DOI unregistered.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '403':
          description: Operation not allowed. Only Administrators can access it.
        '404':
          description: Metadata or DOI not found.
        '500':
          description: Service unavailable.
  '/srv/api/0.1/records/{metadataUuid}/doi/checkPreConditions':
    get:
      tags:
        - records
      summary: >-
        Check that a record can be submitted to DataCite for DOI creation.
        DataCite requires some fields to be populated.
      operationId: checkDoiStatus
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
      responses:
        '200':
          description: Record can be proposed to DataCite.
          schema:
            type: object
            additionalProperties:
              type: boolean
        '400':
          description: Record does not meet preconditions. Check error message.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
        '404':
          description: Metadata not found.
        '500':
          description: Service unavailable.
  '/srv/api/0.1/records/{metadataUuid}/editor':
    get:
      tags:
        - records
      summary: Edit a record
      description: Return HTML form for editing.
      operationId: editor
      consumes:
        - '*/*'
      produces:
        - application/xml
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: currTab
          in: query
          description: Tab
          required: false
          type: string
          default: simple
        - name: withAttributes
          in: query
          description: withAttributes
          required: false
          type: boolean
          default: false
      responses:
        '200':
          description: The editor form.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
    post:
      tags:
        - records
      summary: Save edits
      description: Save the HTML form content.
      operationId: saveEdits
      consumes:
        - '*/*'
      produces:
        - application/xml
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: tab
          in: query
          description: Tab
          required: false
          type: string
          default: simple
        - name: withAttributes
          in: query
          description: withAttributes
          required: false
          type: boolean
          default: false
        - name: withValidationErrors
          in: query
          description: withValidationErrors
          required: false
          type: boolean
          default: false
        - name: minor
          in: query
          description: minor
          required: false
          type: boolean
          default: false
        - name: status
          in: query
          description: Submit for review directly after save.
          required: false
          type: string
          default: '1'
        - name: commit
          in: query
          description: Save current edits.
          required: false
          type: boolean
          default: false
        - name: terminate
          in: query
          description: Save and terminate session.
          required: false
          type: boolean
          default: false
        - name: data
          in: query
          description: 'Record as XML. TODO: rename xml'
          required: false
          type: string
      responses:
        '200':
          description: The editor form.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
    delete:
      tags:
        - records
      summary: Cancel edits
      description: Cancel current editing session.
      operationId: cancelEdits
      consumes:
        - '*/*'
      produces:
        - application/xml
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
      responses:
        '204':
          description: Editing session cancelled.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/editor/attributes':
    delete:
      tags:
        - records
      summary: Delete attribute
      operationId: deleteAttribute
      consumes:
        - '*/*'
      produces:
        - application/xml
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: ref
          in: query
          description: Reference of the attribute to remove.
          required: true
          type: string
        - name: displayAttributes
          in: query
          description: Should attributes be shown on the editor snippet?
          required: false
          type: boolean
          default: false
      responses:
        '204':
          description: Attribute removed.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/editor/elements':
    put:
      tags:
        - records
      summary: Add element
      operationId: addElement
      consumes:
        - '*/*'
      produces:
        - application/xml
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: ref
          in: query
          description: Reference of the insertion point.
          required: true
          type: string
        - name: name
          in: query
          description: Name of the element to add (with prefix)
          required: true
          type: string
        - name: child
          in: query
          description: 'Use geonet:attribute for attributes or child name.'
          required: false
          type: string
        - name: displayAttributes
          in: query
          description: Should attributes be shown on the editor snippet?
          required: false
          type: boolean
          default: false
      responses:
        '200':
          description: Element added.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
    delete:
      tags:
        - records
      summary: Delete element
      operationId: deleteElement
      consumes:
        - '*/*'
      produces:
        - application/xml
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: ref
          in: query
          description: Reference of the element to remove.
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: parent
          in: query
          description: Name of the parent.
          required: true
          type: string
        - name: displayAttributes
          in: query
          description: Should attributes be shown on the editor snippet?
          required: false
          type: boolean
          default: false
      responses:
        '204':
          description: Element removed.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/editor/elements/{direction}':
    put:
      tags:
        - records
      summary: Reorder element
      operationId: reorderElement
      consumes:
        - '*/*'
      produces:
        - application/xml
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: ref
          in: query
          description: Reference of the element to move.
          required: true
          type: string
        - name: direction
          in: path
          description: Direction
          required: true
          type: string
          enum:
            - up
            - down
        - name: displayAttributes
          in: query
          description: Should attributes be shown on the editor snippet?
          required: false
          type: boolean
          default: false
      responses:
        '201':
          description: Element reordered.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/featureCatalog':
    get:
      tags:
        - records
      summary: >-
        Returns a map to decode attributes in a dataset (from the associated
        feature catalog)
      description: >-
        Retrieve related services, datasets, onlines, thumbnails, sources, ...
        to this records.<br/><a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'>More
        info</a>
      operationId: getFeatureCatalog
      produces:
        - application/xml
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
      responses:
        '200':
          description: Return the associated resources.
          schema:
            $ref: '#/definitions/FeatureResponse'
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
  '/srv/api/0.1/records/{metadataUuid}/formatters/json':
    get:
      tags:
        - records
      summary: Get a metadata record as XML or JSON
      operationId: getRecordAsXmlOrJSON
      produces:
        - application/xml
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: addSchemaLocation
          in: query
          description: >-
            Add XSD schema location based on standard configuration (see
            schema-ident.xml).
          required: false
          type: boolean
          default: true
        - name: increasePopularity
          in: query
          description: Increase record popularity
          required: false
          type: boolean
          default: true
        - name: withInfo
          in: query
          description: 'Add geonet:info details'
          required: false
          type: boolean
          default: false
        - name: attachment
          in: query
          description: Download as a file
          required: false
          type: boolean
          default: false
        - name: approved
          in: query
          description: Download the approved version
          required: false
          type: boolean
          default: true
        - name: Accept
          in: header
          description: Accept
          required: true
          type: string
          default: application/xml
      responses:
        '200':
          description: Return the record.
          schema:
            type: object
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
  '/srv/api/0.1/records/{metadataUuid}/formatters/xml':
    get:
      tags:
        - records
      summary: Get a metadata record as XML or JSON
      operationId: getRecordAsXmlOrJSON_1
      produces:
        - application/xml
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: addSchemaLocation
          in: query
          description: >-
            Add XSD schema location based on standard configuration (see
            schema-ident.xml).
          required: false
          type: boolean
          default: true
        - name: increasePopularity
          in: query
          description: Increase record popularity
          required: false
          type: boolean
          default: true
        - name: withInfo
          in: query
          description: 'Add geonet:info details'
          required: false
          type: boolean
          default: false
        - name: attachment
          in: query
          description: Download as a file
          required: false
          type: boolean
          default: false
        - name: approved
          in: query
          description: Download the approved version
          required: false
          type: boolean
          default: true
        - name: Accept
          in: header
          description: Accept
          required: true
          type: string
          default: application/xml
      responses:
        '200':
          description: Return the record.
          schema:
            type: object
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
  '/srv/api/0.1/records/{metadataUuid}/formatters/zip':
    get:
      tags:
        - records
      summary: Get a metadata record as ZIP
      description: >-
        Metadata Exchange Format (MEF) is returned. MEF is a ZIP file containing
        the metadata as XML and some others files depending on the version
        requested. See
        http://geonetwork-opensource.org/manuals/trunk/eng/users/annexes/mef-format.html.
      operationId: getRecordAsZip
      consumes:
        - '*/*'
      produces:
        - application/x-gn-mef-1-zip
        - application/zip
        - application/x-gn-mef-2-zip
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: format
          in: query
          description: MEF file format.
          required: false
          type: string
          default: FULL
          enum:
            - simple
            - partial
            - full
        - name: withRelated
          in: query
          description: With related records (parent and service).
          required: false
          type: boolean
          default: true
        - name: withXLinksResolved
          in: query
          description: Resolve XLinks in the records.
          required: false
          type: boolean
          default: true
        - name: withXLinkAttribute
          in: query
          description: Preserve XLink URLs in the records.
          required: false
          type: boolean
          default: false
        - name: addSchemaLocation
          in: query
          description: addSchemaLocation
          required: false
          type: boolean
          default: true
        - name: approved
          in: query
          description: Download the approved version
          required: false
          type: boolean
          default: true
        - name: Accept
          in: header
          description: Accept
          required: true
          type: string
          default: application/x-gn-mef-2-zip
      responses:
        '200':
          description: Return the record.
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
  '/srv/api/0.1/records/{metadataUuid}/formatters/{formatterId}':
    get:
      tags:
        - records
      summary: Get a formatted metadata record
      operationId: getRecordFormattedBy
      produces:
        - text/html
        - application/pdf
        - '*/*'
        - application/xhtml+xml
      parameters:
        - name: Accept
          in: header
          description: Formatter type to use.
          required: false
          type: string
          default: text/html
        - name: formatterId
          in: path
          description: formatterId
          required: true
          type: string
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: width
          in: query
          description: width
          required: false
          type: string
          default: _100
          enum:
            - _25
            - _50
            - _75
            - _100
        - name: mdpath
          in: query
          description: mdpath
          required: false
          type: string
        - name: language
          in: query
          description: >-
            Optional language ISO 3 letters code to override HTTP
            Accept-language header.
          required: false
          type: string
        - name: output
          in: query
          description: output
          required: false
          type: string
          enum:
            - txt
            - html
            - xml
            - json
            - jsonld
            - pdf
            - testpdf
        - name: approved
          in: query
          description: Download the approved version
          required: false
          type: boolean
          default: true
      responses:
        '200':
          description: OK
  '/srv/api/0.1/records/{metadataUuid}/group':
    put:
      tags:
        - records
      summary: Set record group
      description: A record is related to one group.
      operationId: setRecordGroup
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - in: body
          name: groupIdentifier
          description: Group identifier
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Record group updated.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/ownership':
    put:
      tags:
        - records
      summary: Set record group and owner
      operationId: setRecordOwnership
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: groupIdentifier
          in: query
          description: Group identifier
          required: true
          type: integer
          format: int32
        - name: userIdentifier
          in: query
          description: User identifier
          required: true
          type: integer
          format: int32
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          type: boolean
          default: true
      responses:
        '201':
          description: Record group and owner updated
          schema:
            $ref: '#/definitions/MetadataProcessingReport'
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/popularity':
    post:
      tags:
        - records
      summary: Increase record popularity
      description: >-
        Used when a view is based on the search results content and does not
        really access the record. Record is then added to the indexing queue and
        popularity will be updated soon.
      operationId: increaseRecordPopularity
      consumes:
        - '*/*'
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
      responses:
        '201':
          description: Popularity updated.
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
        '404':
          description: Resource not found.
  '/srv/api/0.1/records/{metadataUuid}/processes':
    get:
      tags:
        - records
      summary: Get suggestions
      description: >-
        Analyze the record an suggest processes to improve the quality of the
        record.<br/><a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/workflow/batchupdate-xsl.html'>More
        info</a>
      operationId: getSuggestions
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
      responses:
        '200':
          description: Record suggestions.
          schema:
            type: array
            items:
              $ref: '#/definitions/SuggestionType'
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/processes/{process}':
    get:
      tags:
        - records
      summary: Preview process result
      description: >-
        Process a metadata with an XSL transformation declared in the metadata
        schema (See the process folder). Parameters sent to the service are
        forwarded to XSL process.
      operationId: processRecordPreview
      produces:
        - application/xml
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: process
          in: path
          description: Process identifier
          required: false
          type: string
      responses:
        '200':
          description: A preview of the processed record.
          schema:
            $ref: '#/definitions/Element'
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
    post:
      tags:
        - records
      summary: Apply a process
      description: >-
        Process a metadata with an XSL transformation declared in the metadata
        schema (See the process folder). Parameters sent to the service are
        forwarded to XSL process.
      operationId: processRecord
      consumes:
        - application/json
      produces:
        - application/xml
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: process
          in: path
          description: Process identifier
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ResponseEntity'
        '204':
          description: Record processed and saved.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/publish':
    put:
      tags:
        - records
      summary: Set privileges for ALL group to publish the metadata for all users.
      operationId: publish
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
      responses:
        '204':
          description: Settings updated.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/query':
    get:
      tags:
        - records
      summary: List saved queries for this metadata
      operationId: getMetadataSavedQueries
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
      responses:
        '200':
          description: Saved query available.
          schema:
            type: array
            items:
              $ref: '#/definitions/SavedQuery'
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
  '/srv/api/0.1/records/{metadataUuid}/query/{savedQuery}':
    post:
      tags:
        - records
      summary: Apply a saved query for this metadata
      description: >-
        All parameters will be substituted to the XPath query. eg. {{protocol}}
        in the XPath expression will be replaced by the protocol parameter
        provided in the request body.
      operationId: applyQuery
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          type: string
        - name: savedQuery
          in: path
          description: The saved query to apply
          required: true
          type: string
        - in: body
          name: parameters
          description: The query parameters
          required: false
          schema:
            type: object
            additionalProperties:
              type: string
      responses:
        '200':
          description: >-
            List of matching elements. If element are nodes, then they are
            returned as string.
          schema:
            type: object
            additionalProperties:
              type: string
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
  '/srv/api/0.1/records/{metadataUuid}/rate':
    put:
      tags:
        - records
      summary: Rate a record
      description: >-
        User rating of metadata. If the metadata was harvested using the
        'GeoNetwork' protocol and the system setting localrating/enable is false
        (the default), the user's rating is shared between GN nodes in this
        harvesting network. If the metadata was not harvested or if
        localrating/enable is true then 'local rating' is applied, counting only
        rating from users of this node.<br/>When a remote rating is applied, the
        local rating is not updated. It will be updated on the next harvest run
        (FIXME ?).
      operationId: rate
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - in: body
          name: rating
          description: Rating
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '201':
          description: New rating value.
          schema:
            type: integer
            format: int32
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
  '/srv/api/0.1/records/{metadataUuid}/related':
    get:
      tags:
        - records
      summary: Get record related resources
      description: >-
        Retrieve related services, datasets, onlines, thumbnails, sources, ...
        to this records.<br/><a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'>More
        info</a>
      operationId: getAssociated
      produces:
        - application/xml
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: type
          in: query
          description: 'Type of related resource. If none, all resources are returned.'
          required: false
          type: array
          items:
            type: string
            enum:
              - children
              - parent
              - siblings
              - associated
              - services
              - datasets
              - fcats
              - hasfeaturecats
              - sources
              - hassources
              - related
              - onlines
              - thumbnails
          collectionFormat: multi
          enum:
            - children
            - parent
            - siblings
            - associated
            - services
            - datasets
            - fcats
            - hasfeaturecats
            - sources
            - hassources
            - related
            - onlines
            - thumbnails
        - name: start
          in: query
          description: >-
            Start offset for paging. Default 1. Only applies to related metadata
            records (ie. not for thumbnails).
          required: false
          type: integer
          default: 1
          format: int32
        - name: rows
          in: query
          description: Number of rows returned. Default 100.
          required: false
          type: integer
          default: 100
          format: int32
      responses:
        '200':
          description: Return the associated resources.
          schema:
            $ref: '#/definitions/RelatedResponse'
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
  '/srv/api/0.1/records/{metadataUuid}/sharing':
    get:
      tags:
        - records
      summary: Get record sharing settings
      description: Return current sharing options for a record.
      operationId: getRecordSharingSettings
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
      responses:
        '200':
          description: The record sharing settings.
          schema:
            $ref: '#/definitions/SharingResponse'
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
    put:
      tags:
        - records
      summary: Set record sharing
      description: >-
        Privileges are assigned by group. User needs to be able to edit a record
        to set sharing settings. For reserved group (ie. Internet, Intranet &
        Guest), user MUST be reviewer of one group. For other group, if Only set
        privileges to user's groups is set in catalog configuration user MUST be
        a member of the group.<br/>Clear first allows to unset all operations
        first before setting the new ones.Clear option does not remove reserved
        groups operation if user is not an administrator, a reviewer or the
        owner of the record.<br/><a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/publishing/managing-privileges.html'>More
        info</a>
      operationId: share
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - in: body
          name: sharing
          description: Privileges
          required: true
          schema:
            $ref: '#/definitions/SharingParameter'
      responses:
        '204':
          description: Settings updated.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/status':
    get:
      tags:
        - records
      summary: Get record status history
      operationId: getRecordStatusHistory
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: details
          in: query
          description: details
          required: false
          type: boolean
        - name: sortOrder
          in: query
          description: Sort direction
          required: false
          type: string
          default: DESC
          enum:
            - ASC
            - DESC
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/MetadataStatusResponse'
    put:
      tags:
        - records
      summary: Set the record status
      operationId: setStatus
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - in: body
          name: status
          description: Metadata status
          required: true
          schema:
            $ref: '#/definitions/MetadataStatusParameter'
      responses:
        '204':
          description: Status updated.
        '400':
          description: Metadata workflow not enabled.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/status/workflow/last':
    get:
      tags:
        - records
      summary: Get last workflow status for a record
      operationId: getStatus
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
      responses:
        '200':
          description: Record status.
          schema:
            $ref: '#/definitions/MetadataWorkflowStatusResponse'
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}':
    delete:
      tags:
        - records
      summary: Delete a record status
      operationId: deleteStatus
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: statusId
          in: path
          description: Status identifier
          required: true
          type: integer
          format: int32
        - name: userId
          in: path
          description: User identifier
          required: true
          type: integer
          format: int32
        - name: changeDate
          in: path
          description: Change date
          required: true
          type: string
      responses:
        '204':
          description: Status removed.
        '403':
          description: Operation not allowed. Only Administrators can access it.
        '404':
          description: Status not found.
  '/srv/api/0.1/records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/close':
    put:
      tags:
        - records
      summary: Close a record task
      operationId: closeTask
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: statusId
          in: path
          description: Status identifier
          required: true
          type: integer
          format: int32
        - name: userId
          in: path
          description: User identifier
          required: true
          type: integer
          format: int32
        - name: changeDate
          in: path
          description: Change date
          required: true
          type: string
        - name: closeDate
          in: query
          description: Close date
          required: true
          type: string
      responses:
        '204':
          description: Task closed.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
        '404':
          description: Status not found.
  '/srv/api/0.1/records/{metadataUuid}/status/{type}':
    get:
      tags:
        - records
      summary: Get record status history by type
      operationId: getRecordStatusHistoryByType
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: type
          in: path
          description: Type
          required: true
          type: string
          enum:
            - workflow
            - task
            - event
        - name: details
          in: query
          description: details
          required: false
          type: boolean
        - name: sortOrder
          in: query
          description: Sort direction
          required: false
          type: string
          default: DESC
          enum:
            - ASC
            - DESC
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/MetadataStatusResponse'
  '/srv/api/0.1/records/{metadataUuid}/tags':
    get:
      tags:
        - records
      summary: Get record tags
      description: >-
        Tags are used to classify information.<br/><a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/tag-information/tagging-with-categories.html'>More
        info</a>
      operationId: getRecordTags
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
      responses:
        '200':
          description: Record tags.
          schema:
            type: array
            items:
              $ref: '#/definitions/MetadataCategory'
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
    put:
      tags:
        - records
      summary: Add tags to a record
      operationId: addTagsToRecord
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: id
          in: query
          description: Tag identifier
          required: true
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
        - name: clear
          in: query
          description: Clear all before adding new ones
          required: false
          type: boolean
          default: false
      responses:
        '201':
          description: Record tags added.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
    delete:
      tags:
        - records
      summary: Delete tags of a record
      operationId: deleteRecordTags
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: id
          in: query
          description: 'Tag identifier. If none, all tags are removed.'
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
      responses:
        '204':
          description: Record tags removed.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/unpublish':
    put:
      tags:
        - records
      summary: Unsets privileges for ALL group to publish the metadata for all users.
      operationId: unpublish
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
      responses:
        '204':
          description: Settings updated.
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/userfeedback':
    get:
      tags:
        - userfeedback
      summary: 'Finds a list of user feedback for a specific records. '
      description: ' This list will include also the draft user feedback if the client is logged as reviewer.'
      operationId: getUserCommentsOnARecord
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Metadata record UUID.
          required: true
          type: string
        - name: size
          in: query
          description: Maximum number of feedback to return.
          required: false
          type: integer
          default: -1
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/UserFeedbackDTO'
  '/srv/api/0.1/records/{metadataUuid}/userfeedbackrating':
    get:
      tags:
        - userfeedback
      summary: Provides an average rating for a metadata record
      operationId: getMetadataUserComments
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Metadata record UUID.
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RatingAverage'
  '/srv/api/0.1/records/{metadataUuid}/validate/inspire':
    put:
      tags:
        - records
      summary: Submit a record to the INSPIRE service for validation.
      description: >-
        User MUST be able to edit the record to validate it. An INSPIRE endpoint
        must be configured in Settings. This activates an asyncronous process,
        this method does not return any report. This method returns an id to be
        used to get the report.
      operationId: submitValidate
      consumes:
        - application/json
      produces:
        - text/plain
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: testsuite
          in: query
          description: Test suite to run
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '201':
          description: Check status of the report.
          schema:
            type: string
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
        '404':
          description: Metadata not found.
        '500':
          description: Service unavailable.
  '/srv/api/0.1/records/{metadataUuid}/validate/inspire/testsuites':
    get:
      tags:
        - records
      summary: Get test suites available.
      description: 'TG13, TG2, ...'
      operationId: getTestSuites
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
      responses:
        '200':
          description: List of testsuites available.
          schema:
            type: object
            additionalProperties:
              type: array
              items:
                type: string
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/validate/internal':
    put:
      tags:
        - records
      summary: Validate a record
      description: >-
        User MUST be able to edit the record to validate it. FIXME : id MUST be
        the id of the current metadata record in session ?
      operationId: validate
      consumes:
        - application/json
      produces:
        - application/xml
        - application/json
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
        - name: isvalid
          in: query
          description: >-
            Validation status. Should be provided only in case of SUBTEMPLATE
            validation. If provided for another type, throw a BadParameter
            Exception
          required: false
          type: boolean
      responses:
        '201':
          description: Validation report.
          schema:
            $ref: '#/definitions/Reports'
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
  '/srv/api/0.1/records/{metadataUuid}/versions':
    put:
      tags:
        - records
      summary: (Experimental) Enable version control
      operationId: enableVersionControl
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ResponseEntity'
  '/srv/api/0.1/records/{testId}/validate/inspire':
    get:
      tags:
        - records
      summary: Check the status of validation with the INSPIRE service.
      description: >-
        User MUST be able to edit the record to validate it. An INSPIRE endpoint
        must be configured in Settings. If the process is complete an object
        with status is returned. 
      operationId: checkValidateStatus
      produces:
        - application/json
      parameters:
        - name: testId
          in: path
          description: Test identifier
          required: true
          type: string
      responses:
        '200':
          description: Report ready.
          schema:
            type: object
            additionalProperties:
              type: string
        '201':
          description: Report not ready.
          schema:
            type: object
            additionalProperties:
              type: string
        '403':
          description: Operation not allowed. User needs to be able to edit the resource.
        '404':
          description: Report id not found.
  '/srv/api/0.1/regions':
    get:
      tags:
        - regions
      summary: Get list of regions
      operationId: getRegions
      produces:
        - application/xml
        - application/json
      parameters:
        - name: label
          in: query
          description: label
          required: false
          type: string
        - name: categoryId
          in: query
          description: categoryId
          required: false
          type: string
        - name: maxRecords
          in: query
          description: maxRecords
          required: false
          type: integer
          default: -1
          format: int32
      responses:
        '200':
          description: List of regions.
          schema:
            $ref: '#/definitions/ListRegionsResponse'
  '/srv/api/0.1/regions/types':
    get:
      tags:
        - regions
      summary: Get list of region types
      operationId: getRegionTypes
      produces:
        - application/json
      responses:
        '200':
          description: List of region types.
          schema:
            type: array
            items:
              $ref: '#/definitions/Category'
  '/srv/api/0.1/registries/actions/entries/collect':
    get:
      tags:
        - registries
      summary: Preview directory entries extracted from records
      description: >-
        Scan one or more records for element matching the XPath provided and
        save them as directory entries (ie. subtemplate).<br/><br/>Only records
        that the current user can edit are analyzed.
      operationId: previewExtractedEntries
      produces:
        - application/xml
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
        - name: xpath
          in: query
          description: XPath of the elements to extract as entry.
          required: true
          type: string
        - name: identifierXpath
          in: query
          description: >-
            XPath of the element identifier. If not defined a random UUID is
            generated and analysis will not check for duplicates.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
    put:
      tags:
        - registries
      summary: Extracts directory entries from records
      description: >-
        Scan one or more records for element matching the XPath provided and
        save them as directory entries (ie. subtemplate).<br/><br/>Only records
        that the current user can edit are analyzed.
      operationId: extractEntries
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
        - name: xpath
          in: query
          description: XPath of the elements to extract as entry.
          required: true
          type: string
        - name: identifierXpath
          in: query
          description: >-
            XPath of the element identifier. If not defined a random UUID is
            generated and analysis will not check for duplicates.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
      security:
        - basicAuth: []
  '/srv/api/0.1/registries/actions/entries/import/spatial':
    post:
      tags:
        - registries
      summary: Import spatial directory entries
      description: >-
        Directory entry (AKA subtemplates) are XML fragments that can be
        inserted in metadata records. Use this service to import geographic
        extent entries from an ESRI Shapefile format.
      operationId: importSpatialEntries
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: file
          in: formData
          description: The ZIP file to upload containing the Shapefile.
          required: true
          type: file
        - name: uuidAttribute
          in: query
          description: 'Attribute to use for UUID. If none, random UUID are generated.'
          required: false
          type: string
        - name: uuidPattern
          in: query
          description: 'Pattern to build UUID from. Default is ''{{uuid}}''.'
          required: false
          type: string
          default: '{{uuid}}'
        - name: descriptionAttribute
          in: query
          description: >-
            Attribute to use for extent description. If none, no extent
            description defined. TODO: Add per language desc ?
          required: false
          type: string
        - name: geomProjectionTo
          in: query
          description: geomProjectionTo
          required: false
          type: string
        - name: lenient
          in: query
          description: lenient
          required: false
          type: boolean
          default: false
        - name: onlyBoundingBox
          in: query
          description: Create only bounding box for each spatial objects.
          required: false
          type: boolean
          default: true
        - name: process
          in: query
          description: Process
          required: false
          type: string
          default: build-extent-subtemplate
        - name: schema
          in: query
          description: Schema identifier
          required: false
          type: string
          default: iso19139
        - name: uuidProcessing
          in: query
          description: Record identifier processing.
          required: false
          type: string
          default: NOTHING
          enum:
            - GENERATEUUID
            - NOTHING
            - OVERWRITE
        - name: group
          in: query
          description: The group the record is attached to.
          required: false
          type: integer
          format: int32
      responses:
        '201':
          description: Directory entries imported.
          schema:
            $ref: '#/definitions/SimpleMetadataProcessingReport'
        '403':
          description: Operation not allowed. Only Reviewvers can access it.
  '/srv/api/0.1/registries/actions/entries/synchronize':
    get:
      tags:
        - registries
      summary: Preview updated matching entries in records
      description: >-
        Scan one or more records for element matching the XPath provided and
        then check if this element is available in the directory. If Found, the
        element from the directory update the element in the record and
        optionally properties are preserved.<br/><br/>The identifier XPath is
        used to find a match. An optional filtercan be added to restrict search
        to a subset of the directory. If no identifier XPaths is provided, the
        UUID is based on the content of the snippet (hash). It is recommended to
        use an identifier for better matching (eg. ISO19139 contact with
        different roles will not match on the automatic UUID mode).
      operationId: previewUpdatedRecordEntries
      produces:
        - application/xml
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
        - name: xpath
          in: query
          description: XPath of the elements to extract as entry.
          required: true
          type: string
        - name: identifierXpath
          in: query
          description: >-
            XPath of the element identifier. If not defined a random UUID is
            generated and analysis will not check for duplicates.
          required: false
          type: string
        - name: propertiesToCopy
          in: query
          description: List of XPath of properties to copy from record to matching entry.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: substituteAsXLink
          in: query
          description: Replace entry by XLink.
          required: false
          type: boolean
          default: false
        - name: fq
          in: query
          description: Filter query for directory search.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
    put:
      tags:
        - registries
      summary: Update matching entries in records
      description: >-
        Scan one or more records for element matching the XPath provided and
        then check if this element is available in the directory. If Found, the
        element from the directory update the element in the record and
        optionally properties are preserved.<br/><br/>The identifier XPath is
        used to find a match. An optional filtercan be added to restrict search
        to a subset of the directory. If no identifier XPaths is provided, the
        UUID is based on the content of the snippet (hash). It is recommended to
        use an identifier for better matching (eg. ISO19139 contact with
        different roles will not match on the automatic UUID mode).
      operationId: updateRecordEntries
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
        - name: xpath
          in: query
          description: XPath of the elements to extract as entry.
          required: true
          type: string
        - name: identifierXpath
          in: query
          description: >-
            XPath of the element identifier. If not defined a random UUID is
            generated and analysis will not check for duplicates.
          required: false
          type: string
        - name: propertiesToCopy
          in: query
          description: List of XPath of properties to copy from record to matching entry.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: substituteAsXLink
          in: query
          description: Replace entry by XLink.
          required: false
          type: boolean
          default: false
        - name: fq
          in: query
          description: Filter query for directory search.
          required: false
          type: string
      responses:
        '201':
          description: Created
          schema:
            type: object
  '/srv/api/0.1/registries/crs':
    get:
      tags:
        - registries
      summary: Search coordinate reference system (CRS)
      description: >-
        Based on GeoTools EPSG database. If phrase query, each words are
        searched separately.
      operationId: searchCrs
      produces:
        - application/json
      parameters:
        - name: q
          in: query
          description: Search value
          required: false
          type: string
        - name: type
          in: query
          description: Type of CRS
          required: false
          type: string
          enum:
            - CoordinateReferenceSystem
            - VerticalCRS
            - GeographicCRS
            - ProjectedCRS
        - name: rows
          in: query
          description: 'Number of results. Default is: 100'
          required: false
          type: integer
          default: 100
          format: int32
      responses:
        '200':
          description: List of CRS.
          schema:
            type: array
            items:
              $ref: '#/definitions/Crs'
  '/srv/api/0.1/registries/crs/types':
    get:
      tags:
        - registries
      summary: Get list of CRS type
      operationId: getCrsType
      produces:
        - application/json
      responses:
        '200':
          description: List of CRS types.
          schema:
            type: array
            items:
              type: string
              enum:
                - CoordinateReferenceSystem
                - VerticalCRS
                - GeographicCRS
                - ProjectedCRS
  '/srv/api/0.1/registries/crs/{id}':
    get:
      tags:
        - registries
      summary: Get CRS
      operationId: getCrsById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: CRS identifier
          required: true
          type: string
      responses:
        '200':
          description: CRS details.
          schema:
            $ref: '#/definitions/Crs'
        '404':
          description: CRS not found.
  '/srv/api/0.1/registries/entries/{uuid}':
    get:
      tags:
        - registries
      summary: Get a directory entry
      description: >-
        Directory entry (AKA subtemplates) are XML fragments that can be
        inserted in metadata records using XLinks. XLinks can be remote or
        local.
      operationId: getEntry
      produces:
        - application/xml
      parameters:
        - name: uuid
          in: path
          description: Directory entry UUID.
          required: true
          type: string
        - name: process
          in: query
          description: Process
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: transformation
          in: query
          description: Transformation
          required: false
          type: string
        - name: lang
          in: query
          description: lang
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: schema
          in: query
          description: schema
          required: false
          type: string
          default: iso19139
      responses:
        '200':
          description: Directory entry.
          schema:
            type: object
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
  '/srv/api/0.1/registries/vocabularies':
    post:
      tags:
        - registries
      summary: Uploads a new thesaurus from a file
      description: Uploads a new thesaurus.
      operationId: uploadThesaurus
      consumes:
        - multipart/form-data
      produces:
        - text/xml
      parameters:
        - name: file
          in: formData
          description: 'If set, do a file upload.'
          required: false
          type: file
        - name: type
          in: query
          description: Local or external (default).
          required: false
          type: string
          default: external
        - name: dir
          in: query
          description: >-
            Type of thesaurus, usually one of the ISO thesaurus type codelist
            value. Default is theme.
          required: false
          type: string
          default: theme
        - name: stylesheet
          in: query
          description: XSL to be use to convert the thesaurus before load. Default _none_.
          required: false
          type: string
          default: _none_
      responses:
        '201':
          description: Thesaurus uploaded in SKOS format.
          schema:
            type: string
        '403':
          description: Operation not allowed. Only Reviewvers can access it.
    put:
      tags:
        - registries
      summary: Uploads a new thesaurus from URL or Registry
      description: Uploads a new thesaurus.
      operationId: uploadThesaurusFromUrl
      consumes:
        - application/json
      produces:
        - text/xml
      parameters:
        - name: url
          in: query
          description: 'If set, try to download from the Internet.'
          required: false
          type: string
        - name: registryUrl
          in: query
          description: 'If set, try to download from a registry.'
          required: false
          type: string
        - name: registryLanguage
          in: query
          description: Languages to download from a registry.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: type
          in: query
          description: Local or external (default).
          required: false
          type: string
          default: external
        - name: dir
          in: query
          description: >-
            Type of thesaurus, usually one of the ISO thesaurus type codelist
            value. Default is theme.
          required: false
          type: string
          default: theme
        - name: stylesheet
          in: query
          description: XSL to be use to convert the thesaurus before load. Default _none_.
          required: false
          type: string
          default: _none_
      responses:
        '201':
          description: Thesaurus uploaded in SKOS format.
          schema:
            type: string
        '403':
          description: Operation not allowed. Only Reviewvers can access it.
  '/srv/api/0.1/registries/vocabularies/keyword':
    get:
      tags:
        - registries
      summary: Get keyword by id
      description: >-
        Retrieve XML representation of keyword(s) from same thesaurususing
        different transformations. 'to-iso19139-keyword' is the default and
        return an ISO19139 snippet.'to-iso19139-keyword-as-xlink' return an
        XLinked element. Custom transformation can be create on a per schema
        basis.
      operationId: getKeywordById
      produces:
        - application/xml
      parameters:
        - name: id
          in: query
          description: Keyword identifier or list of keyword identifiers comma separated.
          required: true
          type: string
        - name: thesaurus
          in: query
          description: Thesaurus to look info for the keyword(s).
          required: true
          type: string
        - name: lang
          in: query
          description: Languages.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: keywordOnly
          in: query
          description: 'Only print the keyword, no thesaurus information.'
          required: false
          type: boolean
          default: false
        - name: transformation
          in: query
          description: 'XSL template to use (ISO19139 keyword by default, see convert.xsl).'
          required: false
          type: string
      responses:
        '200':
          description: XML snippet with requested keywords.
          schema:
            type: object
  '/srv/api/0.1/registries/vocabularies/search':
    get:
      tags:
        - registries
      summary: Search keywords
      operationId: searchKeywords
      produces:
        - application/json
      parameters:
        - name: q
          in: query
          description: Query
          required: false
          type: string
        - name: lang
          in: query
          description: Query in that language
          required: false
          type: string
          default: eng
        - name: rows
          in: query
          description: Number of rows
          required: false
          type: integer
          default: 1000
          format: int32
        - name: start
          in: query
          description: Start from
          required: false
          type: integer
          default: 0
          format: int32
        - name: pLang
          in: query
          description: Return keyword information in one or more languages
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: thesaurus
          in: query
          description: Thesaurus identifier
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: type
          in: query
          description: Type of search
          required: false
          type: string
          default: CONTAINS
          enum:
            - STARTS_WITH
            - CONTAINS
            - MATCH
        - name: uri
          in: query
          description: URI query
          required: false
          type: string
        - name: sort
          in: query
          description: Sort by
          required: false
          type: string
          default: DESC
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/KeywordBean'
  '/srv/api/0.1/registries/vocabularies/{thesaurus}':
    get:
      tags:
        - registries
      summary: Download a thesaurus by name
      description: Download the thesaurus in SKOS format.
      operationId: getThesaurus
      produces:
        - text/xml
      parameters:
        - name: thesaurus
          in: path
          description: Thesaurus to download.
          required: true
          type: string
      responses:
        '200':
          description: Thesaurus in SKOS format.
        '404':
          description: Resource not found.
    delete:
      tags:
        - registries
      summary: Delete a thesaurus by name
      description: Delete a thesaurus.
      operationId: deleteThesaurus
      produces:
        - '*/*'
      parameters:
        - name: thesaurus
          in: path
          description: Thesaurus to delete.
          required: true
          type: string
      responses:
        '200':
          description: Thesaurus deleted.
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
        '404':
          description: Resource not found.
  '/srv/api/0.1/related':
    get:
      tags:
        - related
      summary: Get record related resources for all requested metadatas
      description: >-
        Retrieve related services, datasets, onlines, thumbnails, sources, ...
        to all requested records.<br/><a
        href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'>More
        info</a>
      operationId: getAssociated_1
      produces:
        - application/xml
        - application/json
      parameters:
        - name: type
          in: query
          description: 'Type of related resource. If none, all resources are returned.'
          required: false
          type: array
          items:
            type: string
            enum:
              - children
              - parent
              - siblings
              - associated
              - services
              - datasets
              - fcats
              - hasfeaturecats
              - sources
              - hassources
              - related
              - onlines
              - thumbnails
          collectionFormat: multi
          enum:
            - children
            - parent
            - siblings
            - associated
            - services
            - datasets
            - fcats
            - hasfeaturecats
            - sources
            - hassources
            - related
            - onlines
            - thumbnails
        - name: uuid
          in: query
          description: Uuids of the metadatas you request the relations from.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: Return the associated resources.
          schema:
            type: object
            additionalProperties:
              $ref: '#/definitions/RelatedResponse'
        '403':
          description: Operation not allowed. User needs to be able to view the resource.
  '/srv/api/0.1/reports/datadownloads':
    get:
      tags:
        - records
      summary: Get list of metadata file downloads
      operationId: getReportDataDownloads
      produces:
        - text/x-csv;charset=UTF-8
      parameters:
        - name: dateFrom
          in: query
          description: From date of the metadata downloads
          required: true
          type: string
        - name: dateTo
          in: query
          description: To date of the metadata downloads
          required: true
          type: string
        - name: groups
          in: query
          description: Metadata group(s)
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
      responses:
        '200':
          description: List of metadata file downloads.
  '/srv/api/0.1/reports/datauploads':
    get:
      tags:
        - records
      summary: Get uploaded files to metadata records during a period.
      operationId: getReportDataUploads
      produces:
        - text/x-csv;charset=UTF-8
      parameters:
        - name: dateFrom
          in: query
          description: From date of the metadata uploads
          required: true
          type: string
        - name: dateTo
          in: query
          description: To date of the metadata uploads
          required: true
          type: string
        - name: groups
          in: query
          description: Metadata group(s)
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
      responses:
        '200':
          description: OK
  '/srv/api/0.1/reports/metadatainternal':
    get:
      tags:
        - records
      summary: Get the metadata not published during a period.
      operationId: getReportDataUploads_1
      produces:
        - text/x-csv;charset=UTF-8
      parameters:
        - name: dateFrom
          in: query
          description: From date of metadata change date
          required: true
          type: string
        - name: dateTo
          in: query
          description: To date of metadata change date
          required: true
          type: string
        - name: groups
          in: query
          description: Metadata group(s)
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
      responses:
        '200':
          description: Metadata not published during a period.
  '/srv/api/0.1/reports/metadataupdated':
    get:
      tags:
        - records
      summary: Get the updated metadata during a period.
      operationId: getReportDataUploads_2
      produces:
        - text/x-csv;charset=UTF-8
      parameters:
        - name: dateFrom
          in: query
          description: From date of metadata change date
          required: true
          type: string
        - name: dateTo
          in: query
          description: To date of metadata change date
          required: true
          type: string
        - name: groups
          in: query
          description: Metadata group(s)
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
      responses:
        '200':
          description: Updated metadata during a period.
  '/srv/api/0.1/reports/users':
    get:
      tags:
        - records
      summary: Get the list of users "active" during a time period.
      operationId: getActiveUsers
      produces:
        - text/x-csv;charset=UTF-8
      parameters:
        - name: dateFrom
          in: query
          description: From date of users login date
          required: true
          type: string
        - name: dateTo
          in: query
          description: To date of users login date
          required: true
          type: string
        - name: groups
          in: query
          description: Group(s) for the users
          required: false
          type: array
          items:
            type: integer
            format: int32
          collectionFormat: multi
      responses:
        '200':
          description: List of users "active" during a time period.
  '/srv/api/0.1/selections/{bucket}':
    get:
      tags:
        - selections
      summary: Get current selection
      operationId: getSelection
      produces:
        - application/json
      parameters:
        - name: bucket
          in: path
          description: Bucket name
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: string
    put:
      tags:
        - selections
      summary: Select one or more items
      operationId: addToSelection
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: bucket
          in: path
          description: Bucket name
          required: true
          type: string
        - name: uuid
          in: query
          description: >-
            One or more record UUIDs. If null, select all in current search if
            bucket name is 'metadata' (TODO: remove this limitation?).
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
    delete:
      tags:
        - selections
      summary: Clear selection or remove items
      operationId: clearSelection
      produces:
        - application/json
      parameters:
        - name: bucket
          in: path
          description: Selection bucket name
          required: true
          type: string
        - name: uuid
          in: query
          description: One or more record UUIDs
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
  '/srv/api/0.1/site':
    get:
      tags:
        - site
      summary: Get site (or portal) description
      operationId: getDescription
      produces:
        - application/json
      responses:
        '200':
          description: Site description.
          schema:
            $ref: '#/definitions/SettingsListResponse'
  '/srv/api/0.1/site/index':
    put:
      tags:
        - site
      summary: Index
      operationId: index
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: reset
          in: query
          description: Drop and recreate index
          required: false
          type: boolean
          default: true
        - name: havingXlinkOnly
          in: query
          description: Records having only XLinks
          required: false
          type: boolean
          default: false
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/HttpEntity'
  '/srv/api/0.1/site/index/es':
    put:
      tags:
        - site
      summary: Index in Elastic
      operationId: indexes
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: reset
          in: query
          description: Drop and recreate index
          required: false
          type: boolean
          default: true
        - name: havingXlinkOnly
          in: query
          description: Records having only XLinks
          required: false
          type: boolean
          default: false
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/HttpEntity'
    delete:
      tags:
        - site
      summary: Delete index in Elastic
      operationId: deleteIndexes
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/HttpEntity'
  '/srv/api/0.1/site/indexing':
    get:
      tags:
        - site
      summary: Is indexing?
      operationId: isIndexing
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: boolean
  '/srv/api/0.1/site/info':
    get:
      tags:
        - site
      summary: Get site informations
      operationId: getInformation
      produces:
        - application/json
      responses:
        '200':
          description: Site information.
          schema:
            $ref: '#/definitions/SiteInformation'
  '/srv/api/0.1/site/info/build':
    get:
      tags:
        - site
      summary: Get build details
      description: To know when and how this version of the application was built.
      operationId: getSystemInfo
      produces:
        - application/json
      responses:
        '200':
          description: Build info.
          schema:
            $ref: '#/definitions/SystemInfo'
  '/srv/api/0.1/site/info/isCasEnabled':
    get:
      tags:
        - site
      summary: Is CAS enabled?
      operationId: isCasEnabled
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: boolean
  '/srv/api/0.1/site/info/readonly':
    get:
      tags:
        - site
      summary: Is in read-only mode?
      operationId: isReadOnly
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: boolean
  '/srv/api/0.1/site/info/staging/{profile}':
    put:
      tags:
        - site
      summary: Update staging profile
      description: 'TODO: Needs doc'
      operationId: updateStagingProfile
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: profile
          in: path
          description: profile
          required: true
          type: string
          enum:
            - testing
            - development
            - production
      responses:
        '204':
          description: Staging profile saved.
        '403':
          description: Operation not allowed. Only Administrators can access it.
  '/srv/api/0.1/site/info/transforms':
    get:
      tags:
        - site
      summary: Get XSL tranformations available
      description: >-
        XSL transformations may be applied while importing or harvesting
        records.
      operationId: getXslTransformations
      produces:
        - application/json
      responses:
        '200':
          description: XSLT available.
          schema:
            type: array
            items:
              type: string
  '/srv/api/0.1/site/logging':
    get:
      tags:
        - site
      summary: Get log files
      operationId: getLogFiles
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/LogFileResponse'
  '/srv/api/0.1/site/logging/activity':
    get:
      tags:
        - site
      summary: Get last activity
      operationId: getLastActivity
      produces:
        - text/plain
      parameters:
        - name: lines
          in: query
          description: Number of lines to return
          required: false
          type: integer
          default: 2000
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: string
  '/srv/api/0.1/site/logging/activity/zip':
    get:
      tags:
        - site
      summary: Get last activity in a ZIP
      operationId: getLastActivityInAZip
      produces:
        - application/zip
      responses:
        '200':
          description: OK
  '/srv/api/0.1/site/logo':
    put:
      tags:
        - site
      summary: Set catalog logo
      description: >-
        Logos are stored in the data directory resources/images/harvesting as
        PNG or GIF images. When a logo is assigned to the catalog, a new image
        is created in images/logos/<catalogUuid>.png.
      operationId: setLogo
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: file
          in: query
          description: Logo to use for the catalog
          required: false
          type: string
        - name: asFavicon
          in: query
          description: Create favicon too
          required: false
          type: boolean
          default: false
      responses:
        '204':
          description: Logo set.
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
  '/srv/api/0.1/site/settings':
    get:
      tags:
        - site
      summary: Get settings
      description: >-
        Return public settings for anonymous users, internals are allowed for
        authenticated.
      operationId: getSettings
      produces:
        - application/json
      parameters:
        - name: set
          in: query
          description: Setting set. A common set of settings to retrieve.
          required: false
          type: array
          items:
            type: string
            enum:
              - INSPIRE
              - HARVESTER
              - USER_GROUP_ONLY
              - AUTH
              - READ_ONLY
              - INDEX
              - SYSTEMINFO
              - STAGING_PROFILE
              - TYPE
          collectionFormat: multi
          enum:
            - INSPIRE
            - HARVESTER
            - USER_GROUP_ONLY
            - AUTH
            - READ_ONLY
            - INDEX
            - SYSTEMINFO
            - STAGING_PROFILE
            - TYPE
        - name: key
          in: query
          description: Setting key
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: Settings.
          schema:
            $ref: '#/definitions/SettingsListResponse'
    post:
      tags:
        - site
      summary: Save settings
      operationId: saveSettingsDetails
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '204':
          description: Settings saved.
        '403':
          description: Operation not allowed. Only Administrators can access it.
  '/srv/api/0.1/site/settings/details':
    get:
      tags:
        - site
      summary: Get settings with details
      description: Provides also setting properties.
      operationId: getSettingsDetails
      produces:
        - application/json
      parameters:
        - name: set
          in: query
          description: Setting set. A common set of settings to retrieve.
          required: false
          type: array
          items:
            type: string
            enum:
              - INSPIRE
              - HARVESTER
              - USER_GROUP_ONLY
              - AUTH
              - READ_ONLY
              - INDEX
              - SYSTEMINFO
              - STAGING_PROFILE
              - TYPE
          collectionFormat: multi
          enum:
            - INSPIRE
            - HARVESTER
            - USER_GROUP_ONLY
            - AUTH
            - READ_ONLY
            - INDEX
            - SYSTEMINFO
            - STAGING_PROFILE
            - TYPE
        - name: key
          in: query
          description: Setting key
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: Settings with details.
          schema:
            type: array
            items:
              $ref: '#/definitions/Setting'
  '/srv/api/0.1/sources':
    get:
      tags:
        - sources
      summary: Get portal list
      description: List all subportal available.
      operationId: getSubPortal
      produces:
        - text/html
      responses:
        '200':
          description: List of portals.
    put:
      tags:
        - sources
      summary: Add a source
      operationId: addSource
      consumes:
        - application/json
      produces:
        - text/plain
      parameters:
        - in: body
          name: source
          description: source
          required: false
          schema:
            $ref: '#/definitions/Source'
      responses:
        '201':
          description: Source created.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '403':
          description: Operation not allowed. Only Administrators can access it.
  '/srv/api/0.1/sources/{sourceIdentifier}':
    put:
      tags:
        - sources
      summary: Update a source
      operationId: updateSource
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: sourceIdentifier
          in: path
          description: Source identifier
          required: true
          type: string
        - in: body
          name: source
          description: source
          required: false
          schema:
            $ref: '#/definitions/Source'
      responses:
        '204':
          description: Source updated.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
        '404':
          description: Source not found.
    delete:
      tags:
        - sources
      summary: Remove a source
      operationId: deleteSource
      produces:
        - '*/*'
      parameters:
        - name: sourceIdentifier
          in: path
          description: Source identifier
          required: true
          type: string
      responses:
        '201':
          description: Source deleted.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '204':
          description: No Content
          schema:
            $ref: '#/definitions/ResponseEntity'
        '403':
          description: Operation not allowed. Only Administrators can access it.
  '/srv/api/0.1/standards':
    get:
      tags:
        - standards
      summary: Get standards
      operationId: getStandards
      produces:
        - application/json
      responses:
        '200':
          description: List of standards.
          schema:
            type: array
            items:
              $ref: '#/definitions/MetadataSchema'
  '/srv/api/0.1/standards/batchconfiguration':
    get:
      tags:
        - standards
      summary: Get batch editor configuration for standards
      operationId: getBatchConfigurations
      produces:
        - application/json
      parameters:
        - name: schema
          in: query
          description: Schema identifiers
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: Batch editor configuration.
          schema:
            type: object
            additionalProperties:
              $ref: '#/definitions/BatchEditing'
  '/srv/api/0.1/standards/reload':
    get:
      tags:
        - standards
      summary: Reload standards
      operationId: reloadStandards
      produces:
        - application/json
      responses:
        '200':
          description: Standards reloaded.
  '/srv/api/0.1/standards/{schema}/batchconfiguration':
    get:
      tags:
        - standards
      summary: Get batch editor configuration for a standard
      operationId: getBatchConfiguration
      produces:
        - application/json
      parameters:
        - name: schema
          in: path
          description: Schema identifier
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              $ref: '#/definitions/BatchEditing'
  '/srv/api/0.1/standards/{schema}/codelists/{codelist}':
    get:
      tags:
        - standards
      summary: Get codelist translations
      operationId: getSchemaTranslations
      produces:
        - application/json
      parameters:
        - name: schema
          in: path
          description: Schema identifier
          required: true
          type: string
        - name: codelist
          in: path
          description: Codelist element name or alias
          required: false
          type: string
        - name: parent
          in: query
          description: parent
          required: false
          type: string
        - name: displayIf
          in: query
          description: displayIf
          required: false
          type: string
        - name: xpath
          in: query
          description: xpath
          required: false
          type: string
        - name: isoType
          in: query
          description: isoType
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: string
  '/srv/api/0.1/standards/{schema}/codelists/{codelist}/details':
    get:
      tags:
        - standards
      summary: Get codelist details
      operationId: getSchemaCodelistsWithDetails
      produces:
        - application/xml
        - application/json
      parameters:
        - name: schema
          in: path
          description: Schema identifier
          required: true
          type: string
        - name: codelist
          in: path
          description: Codelist element name or alias
          required: false
          type: string
        - name: parent
          in: query
          description: >-
            Parent name with namespace which may indicate a more precise label
            as defined in context attribute.
          required: false
          type: string
        - name: displayIf
          in: query
          description: >-
            Display if condition as defined in the codelist.xml file. Allows to
            select a more precise codelist when more than one is defined for
            same name.
          required: false
          type: string
        - name: xpath
          in: query
          description: >-
            XPath of the element to target which may indicate a more precise
            label as defined in context attribute.
          required: false
          type: string
        - name: isoType
          in: query
          description: >-
            ISO type of the element to target which may indicate a more precise
            label as defined in context attribute. (Same as context. TODO:
            Deprecate ?)
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Codelist'
  '/srv/api/0.1/standards/{schema}/descriptors/{element}/details':
    get:
      tags:
        - standards
      summary: Get descriptor details
      operationId: getElementDetails
      produces:
        - application/xml
        - application/json
      parameters:
        - name: schema
          in: path
          description: Schema identifier
          required: true
          type: string
        - name: element
          in: path
          description: Descriptor name
          required: true
          type: string
        - name: parent
          in: query
          description: parent
          required: false
          type: string
        - name: displayIf
          in: query
          description: displayIf
          required: false
          type: string
        - name: xpath
          in: query
          description: xpath
          required: false
          type: string
        - name: isoType
          in: query
          description: isoType
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Element'
  '/srv/api/0.1/standards/{schema}/editor/associatedpanel/config/{name}.json':
    get:
      tags:
        - standards
      summary: Get editor associated resources panel configuration
      operationId: getEditorAssociatedPanelConfiguration
      produces:
        - application/json
      parameters:
        - name: schema
          in: path
          description: Schema identifier
          required: true
          type: string
        - name: name
          in: path
          description: Configuration identifier
          required: true
          type: string
          default: default
      responses:
        '200':
          description: OK
          schema:
            type: string
  '/srv/api/0.1/status':
    get:
      tags:
        - status
      summary: Get status
      operationId: getStatus_1
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/StatusValue'
  '/srv/api/0.1/status/{type}':
    get:
      tags:
        - status
      summary: Get status by type
      operationId: getStatusByType
      produces:
        - application/json
      parameters:
        - name: type
          in: path
          description: Type
          required: true
          type: string
          enum:
            - workflow
            - task
            - event
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/StatusValue'
  '/srv/api/0.1/tags':
    get:
      tags:
        - tags
      summary: Get tags
      operationId: getTags
      produces:
        - application/json
      responses:
        '200':
          description: List of tags.
          schema:
            type: array
            items:
              $ref: '#/definitions/MetadataCategory'
    put:
      tags:
        - tags
      summary: Create a tag
      description: >-
        If labels are not defined, a default label is created with the category
        name for all languages.
      operationId: putTag
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: category
          description: category
          required: false
          schema:
            $ref: '#/definitions/MetadataCategory'
      responses:
        '201':
          description: Tag created. Return the new tag identifier.
          schema:
            type: integer
            format: int32
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
  '/srv/api/0.1/tags/{tagIdentifier}':
    get:
      tags:
        - tags
      summary: Get a tag
      operationId: getTag
      produces:
        - application/json
      parameters:
        - name: tagIdentifier
          in: path
          description: Tag identifier
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Tag details.
          schema:
            $ref: '#/definitions/MetadataCategory'
    put:
      tags:
        - tags
      summary: Update a tag
      operationId: updateTag
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: tagIdentifier
          in: path
          description: Tag identifier
          required: true
          type: integer
          format: int32
        - in: body
          name: category
          description: category
          required: false
          schema:
            $ref: '#/definitions/MetadataCategory'
      responses:
        '204':
          description: Tag updated.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
    delete:
      tags:
        - tags
      summary: Remove a tag
      operationId: deleteTag
      produces:
        - '*/*'
      parameters:
        - name: tagIdentifier
          in: path
          description: Tag identifier
          required: true
          type: integer
          format: int32
      responses:
        '204':
          description: Tag removed.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
  '/srv/api/0.1/tools/i18n/db':
    get:
      tags:
        - tools
      summary: List translations for database description table
      operationId: getTranslations
      produces:
        - application/json
      parameters:
        - name: type
          in: query
          description: type
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: string
  '/srv/api/0.1/tools/mail/test':
    get:
      tags:
        - tools
      summary: Test mail configuration
      description: Send an email to the catalog feedback email.
      operationId: testMailConfiguration
      produces:
        - text/plain
      responses:
        '201':
          description: Created
          schema:
            type: string
  '/srv/api/0.1/tools/migration/steps/{stepName}':
    put:
      tags:
        - tools
      summary: Call a migration step
      operationId: callStep
      consumes:
        - application/json
      produces:
        - text/plain
      parameters:
        - name: stepName
          in: path
          description: >-
            Class name to execute corresponding to a migration step. See
            DatabaseMigrationTask.
          required: true
          type: string
      responses:
        '201':
          description: Created
          schema:
            type: string
  '/srv/api/0.1/tools/ogc/sld':
    get:
      tags:
        - tools
      summary: Get the list of SLD available
      operationId: getSLDUsingGET
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: string
    post:
      tags:
        - tools
      summary: Generate a SLD with a new filter
      description: >-
        Get the currend SLD for the requested layers, add new filters in, save
        the SLD and return the new SLD URL.
      operationId: buildSLD
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/plain
      parameters:
        - name: url
          in: formData
          description: The WMS server URL
          required: true
          type: string
        - name: layers
          in: formData
          description: The layers
          required: true
          type: string
        - name: filters
          in: formData
          description: The filters in JSON
          required: true
          type: string
      responses:
        '201':
          description: Created
          schema:
            type: string
    delete:
      tags:
        - tools
      summary: Remove all SLD files
      description: Clean all SLD generated previously
      operationId: deteleSLDUsingDELETE
      produces:
        - application/json
      responses:
        '200':
          description: OK
  '/srv/api/0.1/tools/ogc/sld/{id}.{extension}':
    get:
      tags:
        - tools
      summary: Download a SLD
      operationId: downloadSLD
      produces:
        - application/xml
      parameters:
        - name: id
          in: path
          description: The SLD identifier
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
  '/srv/api/0.1/ui':
    get:
      tags:
        - ui
      summary: Get UI configuration
      operationId: getUiConfigurations
      produces:
        - application/json
      responses:
        '200':
          description: List of configuration.
          schema:
            type: array
            items:
              $ref: '#/definitions/UiSetting'
    put:
      tags:
        - ui
      summary: Create a UI configuration
      operationId: putUiConfiguration
      consumes:
        - application/json
      produces:
        - text/plain
      parameters:
        - in: body
          name: uiConfiguration
          description: uiConfiguration
          required: false
          schema:
            $ref: '#/definitions/UiSetting'
      responses:
        '201':
          description: >-
            UI configuration created. Return the new UI configuration
            identifier.
          schema:
            type: string
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
  '/srv/api/0.1/ui/{uiIdentifier}':
    get:
      tags:
        - ui
      summary: Get a UI configuration
      operationId: getUiConfiguration
      produces:
        - application/json
      parameters:
        - name: uiIdentifier
          in: path
          description: UI identifier
          required: true
          type: string
      responses:
        '200':
          description: UI configuration.
          schema:
            $ref: '#/definitions/UiSetting'
    put:
      tags:
        - ui
      summary: Update a UI configuration
      operationId: updateUiConfiguration
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: uiIdentifier
          in: path
          description: UI configuration identifier
          required: true
          type: string
        - in: body
          name: UI configuration
          description: uiConfiguration
          required: false
          schema:
            $ref: '#/definitions/UiSetting'
      responses:
        '204':
          description: UI configuration updated.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
    delete:
      tags:
        - ui
      summary: Remove a UI Configuration
      operationId: deleteUiConfiguration
      produces:
        - '*/*'
      parameters:
        - name: uiIdentifier
          in: path
          description: UI configuration identifier
          required: true
          type: string
      responses:
        '204':
          description: UI Configuration removed.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
        '404':
          description: UI Configuration not found.
  '/srv/api/0.1/user/actions/register':
    put:
      tags:
        - users
      summary: Create user account
      description: >-
        User is created with a registered user profile. username field is
        ignored and the email is used as username. Password is sent by email.
        Catalog administrator is also notified.
      operationId: registerUser
      consumes:
        - application/json
      produces:
        - text/plain
      parameters:
        - in: body
          name: userRegisterDto
          description: User details
          required: true
          schema:
            $ref: '#/definitions/UserRegisterDto'
      responses:
        '201':
          description: Created
          schema:
            type: string
  '/srv/api/0.1/user/{username}':
    patch:
      tags:
        - users
      summary: Update user password
      description: Get a valid changekey by email first and then update your password.
      operationId: updatePassword
      consumes:
        - application/json
      produces:
        - text/plain
      parameters:
        - name: username
          in: path
          description: The user name
          required: true
          type: string
        - in: body
          name: passwordAndChangeKey
          description: The new password and a valid change key
          required: true
          schema:
            $ref: '#/definitions/PasswordUpdateParameter'
      responses:
        '201':
          description: Created
          schema:
            type: string
  '/srv/api/0.1/user/{username}/actions/forgot-password':
    get:
      tags:
        - users
      summary: Send user password reminder by email
      description: >-
        An email is sent to the requested user with a link to reset his
        password. User MUST have an email to get the link. LDAP users will not
        be able to retrieve their password using this service.
      operationId: sendPasswordByEmail
      produces:
        - text/plain
      parameters:
        - name: username
          in: path
          description: The user name
          required: true
          type: string
      responses:
        '201':
          description: Created
          schema:
            type: string
  '/srv/api/0.1/userfeedback':
    get:
      tags:
        - userfeedback
      summary: 'Finds a list of user feedback records. '
      description: ' This list will include also the draft user feedback if the client is logged as reviewer.'
      operationId: getUserComments
      produces:
        - application/json
      parameters:
        - name: metadataUuid
          in: query
          description: Metadata record UUID.
          required: false
          type: string
        - name: size
          in: query
          description: Maximum number of feedback to return.
          required: false
          type: integer
          default: -1
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/UserFeedbackDTO'
    post:
      tags:
        - userfeedback
      summary: Creates a user feedback
      description: Creates a user feedback in draft status if the user is not logged in.
      operationId: newUserFeedback
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: uf
          description: userFeedbackDto
          required: false
          schema:
            $ref: '#/definitions/UserFeedbackDTO'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/ResponseEntity'
  '/srv/api/0.1/userfeedback/ratingcriteria':
    get:
      tags:
        - userfeedback
      summary: Get list of rating criteria
      operationId: getRatingCriteria
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/RatingCriteria'
  '/srv/api/0.1/userfeedback/{uuid}':
    get:
      tags:
        - userfeedback
      summary: Finds a specific user feedback
      operationId: getUserFeedback
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: User feedback UUID.
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserFeedbackDTO'
    delete:
      tags:
        - userfeedback
      summary: Removes a user feedback
      description: Removes a user feedback
      operationId: deleteUserFeedback
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: User feedback UUID.
          required: true
          type: string
      responses:
        '204':
          description: User feedback removed.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '403':
          description: Operation not allowed. Only Reviewvers can access it.
  '/srv/api/0.1/userfeedback/{uuid}/publish':
    get:
      tags:
        - userfeedback
      summary: Publishes a feedback
      description: For reviewers
      operationId: publishFeedback
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: User feedback UUID.
          required: true
          type: string
      responses:
        '204':
          description: User feedback published.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '403':
          description: Operation not allowed. Only Reviewvers can access it.
        '404':
          description: Resource not found.
  '/srv/api/0.1/users':
    get:
      tags:
        - users
      summary: Get users
      operationId: getUsers
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    put:
      tags:
        - users
      summary: Creates a user
      description: Creates a catalog user.
      operationId: createUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: userDto
          required: false
          schema:
            $ref: '#/definitions/UserDto'
      responses:
        '200':
          description: OK
          schema:
            type: string
  '/srv/api/0.1/users/groups':
    get:
      tags:
        - users
      summary: Retrieve all user groups
      operationId: retrieveAllUserGroups
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/UserGroupsResponse'
  '/srv/api/0.1/users/owners':
    get:
      tags:
        - users
      summary: Get owners
      description: Return users who actually owns one or more records.
      operationId: getOwners
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/OwnerResponse'
    put:
      tags:
        - users
      summary: Transfer privileges
      operationId: saveOwners
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: transfer
          description: transfer
          required: true
          schema:
            $ref: '#/definitions/TransferRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ResponseEntity'
  '/srv/api/0.1/users/properties/{property}':
    get:
      tags:
        - users
      summary: Check if a user property already exist
      operationId: checkUserPropertyExist
      produces:
        - '*/*'
      parameters:
        - name: property
          in: path
          description: The user property to check
          required: false
          type: string
        - name: exist
          in: query
          description: The value to search
          required: false
          type: string
      responses:
        '200':
          description: Property does not exist.
          schema:
            type: string
            enum:
              - '100'
              - '101'
              - '102'
              - '103'
              - '200'
              - '201'
              - '202'
              - '203'
              - '204'
              - '205'
              - '206'
              - '207'
              - '208'
              - '226'
              - '300'
              - '301'
              - '302'
              - '303'
              - '304'
              - '305'
              - '307'
              - '308'
              - '400'
              - '401'
              - '402'
              - '403'
              - '404'
              - '405'
              - '406'
              - '407'
              - '408'
              - '409'
              - '410'
              - '411'
              - '412'
              - '413'
              - '414'
              - '415'
              - '416'
              - '417'
              - '418'
              - '419'
              - '420'
              - '421'
              - '422'
              - '423'
              - '424'
              - '426'
              - '428'
              - '429'
              - '431'
              - '500'
              - '501'
              - '502'
              - '503'
              - '504'
              - '505'
              - '506'
              - '507'
              - '508'
              - '509'
              - '510'
              - '511'
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
        '404':
          description: A property with that value already exist.
      security:
        - basicAuth: []
  '/srv/api/0.1/users/{userIdentifier}':
    get:
      tags:
        - users
      summary: Get user
      operationId: getUser
      produces:
        - application/json
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier.
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
    put:
      tags:
        - users
      summary: Update a user
      description: Updates a catalog user.
      operationId: updateUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier.
          required: false
          type: integer
          format: int32
        - in: body
          name: user
          description: userDto
          required: false
          schema:
            $ref: '#/definitions/UserDto'
      responses:
        '200':
          description: OK
          schema:
            type: string
    delete:
      tags:
        - users
      summary: Delete a user
      description: Deletes a catalog user by identifier.
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier.
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: string
  '/srv/api/0.1/users/{userIdentifier}/actions/forget-password':
    post:
      tags:
        - users
      summary: Resets user password
      description: Resets the user password.
      operationId: resetUserPassword
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier.
          required: false
          type: integer
          format: int32
        - name: password
          in: query
          description: Password to change.
          required: false
          type: string
        - name: password2
          in: query
          description: Password to change (repeat).
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
  '/srv/api/0.1/users/{userIdentifier}/groups':
    get:
      tags:
        - users
      summary: Retrieve user groups
      description: Retrieve the user groups.
      operationId: retrieveUserGroups
      produces:
        - application/json
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier.
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/UserGroup'
  '/srv/api/0.1/usersearches':
    get:
      tags:
        - usersearches
      summary: Get user custom searches
      operationId: getUserCustomSearches
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/UserSearchDto'
    put:
      tags:
        - usersearches
      summary: Creates a user search
      description: Creates a user search.
      operationId: createUserCustomSearch
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: userSearchDto
          description: User search details
          required: false
          schema:
            $ref: '#/definitions/UserSearchDto'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: User search created.
          schema:
            type: integer
            format: int32
  '/srv/api/0.1/usersearches/all':
    get:
      tags:
        - usersearches
      summary: Get user custom searches for all users (no paginated)
      operationId: getAllUserCustomSearches
      produces:
        - application/json
      parameters:
        - name: featuredType
          in: query
          description: Featured type search.
          required: false
          type: string
          enum:
            - HOME
            - EDITOR_BOARD
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/UserSearchDto'
  '/srv/api/0.1/usersearches/allpaginated':
    get:
      tags:
        - usersearches
      summary: Get user custom searches for all users (paginated)
      operationId: getAllUserCustomSearchesPaginated
      produces:
        - application/json
      parameters:
        - name: featuredType
          in: query
          description: Featured  type search.
          required: false
          type: string
          enum:
            - HOME
            - EDITOR_BOARD
        - name: search
          in: query
          description: search
          required: false
          type: string
        - name: offset
          in: query
          description: From page
          required: false
          type: integer
          default: 0
          format: int32
        - name: limit
          in: query
          description: Number of records to return
          required: false
          type: integer
          default: 10
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PaginatedUserSearchResponse'
  '/srv/api/0.1/usersearches/featured':
    get:
      tags:
        - usersearches
      summary: Get featured user custom searches
      operationId: getFeaturedUserCustomSearches
      produces:
        - application/json
      parameters:
        - name: type
          in: query
          description: Number of records to return
          required: false
          type: string
          enum:
            - HOME
            - EDITOR_BOARD
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/UserSearchDto'
  '/srv/api/0.1/usersearches/{searchIdentifier}':
    get:
      tags:
        - usersearches
      summary: Get custom search
      operationId: getUserCustomSearch
      produces:
        - application/json
      parameters:
        - name: searchIdentifier
          in: path
          description: User search identifier
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserSearchDto'
    put:
      tags:
        - usersearches
      summary: Update a user search
      operationId: updateCustomUserSearch
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: searchIdentifier
          in: path
          description: User search identifier
          required: false
          type: integer
          format: int32
        - in: body
          name: userSearchDto
          description: User search details
          required: false
          schema:
            $ref: '#/definitions/UserSearchDto'
      responses:
        '204':
          description: User search  updated.
        '404':
          description: Resource not found.
      security:
        - basicAuth: []
    delete:
      tags:
        - usersearches
      summary: Delete a user search
      description: Deletes a user search by identifier.
      operationId: deleteUserCustomSearch
      produces:
        - application/json
      parameters:
        - name: searchIdentifier
          in: path
          description: Search identifier.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: string
  '/srv/api/0.1/userselections':
    get:
      tags:
        - userselections
      summary: Get list of user selection sets
      operationId: getUserSelectionType
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Selection'
    put:
      tags:
        - userselections
      summary: Add a user selection set
      operationId: createUserSelectionType
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: selection
          description: selection
          required: false
          schema:
            $ref: '#/definitions/Selection'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ResponseEntity'
        '201':
          description: Selection created.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '400':
          description: A selection with that id or name already exist.
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
  '/srv/api/0.1/userselections/{selectionIdentifier}':
    put:
      tags:
        - userselections
      summary: Update a user selection set
      operationId: updateUserSelection
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: selectionIdentifier
          in: path
          description: Selection identifier
          required: true
          type: integer
          format: int32
        - in: body
          name: selection
          description: selection
          required: false
          schema:
            $ref: '#/definitions/Selection'
      responses:
        '204':
          description: Selection updated.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
        '404':
          description: Selection not found.
    delete:
      tags:
        - userselections
      summary: Remove a user selection set
      operationId: deleteUserSelection
      produces:
        - '*/*'
      parameters:
        - name: selectionIdentifier
          in: path
          description: Selection identifier
          required: true
          type: integer
          format: int32
      responses:
        '204':
          description: Selection removed.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
        '404':
          description: Selection not found.
  '/srv/api/0.1/userselections/{selectionIdentifier}/{userIdentifier}':
    get:
      tags:
        - userselections
      summary: Get record in a user selection set
      operationId: getSelection_1
      produces:
        - application/json
      parameters:
        - name: selectionIdentifier
          in: path
          description: Selection identifier
          required: true
          type: integer
          format: int32
        - name: userIdentifier
          in: path
          description: User identifier
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: string
    put:
      tags:
        - userselections
      summary: Add items to a user selection set
      operationId: addToUserSelection
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: selectionIdentifier
          in: path
          description: Selection identifier
          required: true
          type: integer
          format: int32
        - name: userIdentifier
          in: path
          description: User identifier
          required: true
          type: integer
          format: int32
        - name: uuid
          in: query
          description: One or more record UUIDs.
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: OK
          schema:
            type: string
        '201':
          description: Records added to selection set.
          schema:
            type: string
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
        '404':
          description: Selection or user or at least one UUID not found.
    delete:
      tags:
        - userselections
      summary: Remove items to a user selection set
      operationId: deleteFromUserSelection
      produces:
        - application/json
      parameters:
        - name: selectionIdentifier
          in: path
          description: Selection identifier
          required: true
          type: integer
          format: int32
        - name: userIdentifier
          in: path
          description: User identifier
          required: true
          type: integer
          format: int32
        - name: uuid
          in: query
          description: 'One or more record UUIDs. If null, remove all.'
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ResponseEntity'
        '204':
          description: Items removed from a set.
          schema:
            $ref: '#/definitions/ResponseEntity'
        '403':
          description: Operation not allowed. Only UserAdmins can access it.
        '404':
          description: Selection or user not found.
  '/srv/api/0.1/workers/data/wfs/actions':
    delete:
      tags:
        - workers
      summary: Delete a WFS feature type
      operationId: deleteWfsFeatureType
      consumes:
        - '*/*'
      produces:
        - '*/*'
      parameters:
        - name: serviceUrl
          in: query
          description: serviceUrl
          required: true
          type: string
        - name: typeName
          in: query
          description: typeName
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: object
  '/srv/api/0.1/workers/data/wfs/actions/start':
    put:
      tags:
        - workers
      summary: Index a WFS feature type
      operationId: indexWfsFeatureType
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: config
          description: config
          required: true
          schema:
            $ref: '#/definitions/WFSHarvesterParameter'
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: object
securityDefinitions:
  basicAuth:
    type: basic
definitions:
  Address:
    type: object
    properties:
      address:
        type: string
      city:
        type: string
      country:
        type: string
      id:
        type: integer
        format: int32
      state:
        type: string
      zip:
        type: string
    title: Address
  AnonymousMapserver:
    type: object
    properties:
      configurl:
        type: string
      description:
        type: string
      id:
        type: integer
        format: int32
      name:
        type: string
      namespace:
        type: string
      namespacePrefix:
        type: string
      password:
        type: string
      stylerurl:
        type: string
      username:
        type: string
      wcsurl:
        type: string
      wfsurl:
        type: string
      wmsurl:
        type: string
    title: AnonymousMapserver
  Associated:
    type: object
    properties:
      item:
        type: array
        items:
          $ref: '#/definitions/AssociatedSiblingMetadataItem'
    title: Associated
    xml:
      name: Associated
      attribute: false
      wrapped: false
  AssociatedSiblingMetadataItem:
    type: object
    properties:
      agg_isDescriptionOf:
        type: array
        xml:
          name: agg_isDescriptionOf
          attribute: false
          wrapped: false
        items:
          type: string
      agg_isTemporalStatOf:
        type: array
        xml:
          name: agg_isTemporalStatOf
          attribute: false
          wrapped: false
        items:
          type: string
      agg_largerWorkCitation:
        type: array
        xml:
          name: agg_largerWorkCitation
          attribute: false
          wrapped: false
        items:
          type: string
      description:
        xml:
          name: description
          attribute: false
          wrapped: false
        $ref: '#/definitions/Description'
      id:
        type: string
      mdType:
        type: array
        xml:
          name: mdType
          attribute: false
          wrapped: false
        items:
          type: string
      title:
        xml:
          name: title
          attribute: false
          wrapped: false
        $ref: '#/definitions/MultilingualValue'
      type:
        type: string
      url:
        $ref: '#/definitions/MultilingualValue'
    title: AssociatedSiblingMetadataItem
    xml:
      name: associatedSiblingMetadataItem
      attribute: false
      wrapped: false
  AttributeTable:
    type: object
    properties:
      element:
        type: array
        items:
          $ref: '#/definitions/Element'
    title: AttributeTable
    xml:
      name: AttributeTable
      attribute: false
      wrapped: false
  BatchEditParameter:
    type: object
    properties:
      value:
        type: string
        xml:
          name: value
          attribute: false
          wrapped: false
      xpath:
        type: string
        xml:
          name: xpath
          attribute: false
          wrapped: false
    title: BatchEditParameter
  BatchEditing:
    type: object
    properties:
      section:
        type: array
        xml:
          name: section
          attribute: false
          wrapped: false
        items:
          $ref: '#/definitions/Section'
    title: BatchEditing
  Category:
    type: object
    properties:
      id:
        type: string
        xml:
          name: id
          attribute: true
          wrapped: false
      label:
        type: string
        xml:
          name: label
          attribute: true
          wrapped: false
    title: Category
  Character:
    type: object
    title: Character
  Children:
    type: object
    properties:
      item:
        type: array
        items:
          $ref: '#/definitions/RelatedMetadataItem'
    title: Children
    xml:
      name: Children
      attribute: false
      wrapped: false
  Codelist:
    type: object
    properties:
      alias:
        type: string
        xml:
          name: alias
          attribute: true
          wrapped: false
      entry:
        type: array
        items:
          $ref: '#/definitions/Entry'
      name:
        type: string
        xml:
          name: name
          attribute: true
          wrapped: false
    title: Codelist
    xml:
      name: Codelist
      attribute: false
      wrapped: false
  Crs:
    type: object
    properties:
      authority:
        type: string
      code:
        type: string
      codeSpace:
        type: string
      description:
        type: string
      version:
        type: string
    title: Crs
  Dataset:
    type: object
    properties:
      item:
        type: array
        items:
          $ref: '#/definitions/RelatedMetadataItem'
    title: Dataset
    xml:
      name: Dataset
      attribute: false
      wrapped: false
  Description:
    type: object
    properties:
      value:
        type: array
        items:
          $ref: '#/definitions/LocalizedString'
    title: Description
    xml:
      name: Description
      attribute: false
      wrapped: false
  Element:
    type: object
    properties:
      condition:
        type: string
      context:
        type: string
        xml:
          name: context
          attribute: true
          wrapped: false
      description:
        type: string
      example:
        type: string
      help:
        type: string
      helper:
        $ref: '#/definitions/Helper'
      id:
        type: number
        xml:
          name: id
          attribute: true
          wrapped: false
      label:
        type: string
        xml:
          name: label
          attribute: false
          wrapped: false
      name:
        type: string
        xml:
          name: name
          attribute: true
          wrapped: false
    title: Element
    xml:
      name: Element
      attribute: false
      wrapped: false
  Entry:
    type: object
    properties:
      code:
        type: string
        xml:
          name: code
          attribute: false
          wrapped: false
      description:
        type: string
        xml:
          name: description
          attribute: false
          wrapped: false
      hideInEditMode:
        type: string
        xml:
          name: hideInEditMode
          attribute: true
          wrapped: false
      label:
        type: string
        xml:
          name: label
          attribute: false
          wrapped: false
    title: Entry
    xml:
      name: Entry
      attribute: false
      wrapped: false
  FCRelatedMetadataItem:
    type: object
    properties:
      description:
        xml:
          name: description
          attribute: false
          wrapped: false
        $ref: '#/definitions/Description'
      featureType:
        xml:
          name: featureType
          attribute: false
          wrapped: false
        $ref: '#/definitions/FeatureType'
      id:
        type: string
      mdType:
        type: array
        xml:
          name: mdType
          attribute: false
          wrapped: false
        items:
          type: string
      title:
        xml:
          name: title
          attribute: false
          wrapped: false
        $ref: '#/definitions/MultilingualValue'
      type:
        type: string
      url:
        $ref: '#/definitions/MultilingualValue'
    title: FCRelatedMetadataItem
    xml:
      name: FCRelatedMetadataItem
      attribute: false
      wrapped: false
  Fcat:
    type: object
    properties:
      item:
        type: array
        items:
          $ref: '#/definitions/FCRelatedMetadataItem'
    title: Fcat
    xml:
      name: Fcat
      attribute: false
      wrapped: false
  FeatureResponse:
    type: object
    properties:
      decodeMap:
        type: object
        additionalProperties:
          type: array
          items:
            type: string
    title: FeatureResponse
    xml:
      name: relatedResponse
      attribute: false
      wrapped: false
  FeatureType:
    type: object
    properties:
      attributeTable:
        $ref: '#/definitions/AttributeTable'
    title: FeatureType
    xml:
      name: FeatureType
      attribute: false
      wrapped: false
  Field:
    type: object
    properties:
      codelist:
        type: string
        xml:
          name: codelist
          attribute: true
          wrapped: false
      indexField:
        type: string
        xml:
          name: indexField
          attribute: true
          wrapped: false
      insertMode:
        type: string
        xml:
          name: insertMode
          attribute: true
          wrapped: false
      name:
        type: string
        xml:
          name: name
          attribute: true
          wrapped: false
      removable:
        type: boolean
        xml:
          name: removable
          attribute: true
          wrapped: false
      template:
        type: string
      use:
        type: string
        xml:
          name: use
          attribute: true
          wrapped: false
      xpath:
        type: string
        xml:
          name: xpath
          attribute: true
          wrapped: false
    title: Field
  FileObject:
    type: object
    properties:
      absolute:
        type: boolean
      absoluteFile:
        $ref: '#/definitions/FileObject'
      absolutePath:
        type: string
      canonicalFile:
        $ref: '#/definitions/FileObject'
      canonicalPath:
        type: string
      directory:
        type: boolean
      file:
        type: boolean
      freeSpace:
        type: integer
        format: int64
      hidden:
        type: boolean
      name:
        type: string
      parent:
        type: string
      parentFile:
        $ref: '#/definitions/FileObject'
      path:
        type: string
      totalSpace:
        type: integer
        format: int64
      usableSpace:
        type: integer
        format: int64
    title: File
  FileSystemResource:
    type: object
    properties:
      description:
        type: string
      file:
        $ref: '#/definitions/FileObject'
      filename:
        type: string
      inputStream:
        $ref: '#/definitions/InputStream'
      open:
        type: boolean
      outputStream:
        $ref: '#/definitions/OutputStream'
      path:
        type: string
      readable:
        type: boolean
      uri:
        $ref: '#/definitions/URI'
      url:
        $ref: '#/definitions/URL'
      writable:
        type: boolean
    title: FileSystemResource
  GrantedAuthority:
    type: object
    properties:
      authority:
        type: string
    title: GrantedAuthority
  Group:
    type: object
    properties:
      allowedCategories:
        type: array
        items:
          $ref: '#/definitions/MetadataCategory'
      defaultCategory:
        $ref: '#/definitions/MetadataCategory'
      description:
        type: string
      email:
        type: string
      enableAllowedCategories:
        type: boolean
      id:
        type: integer
        format: int32
      label:
        type: object
        additionalProperties:
          type: string
      logo:
        type: string
      name:
        type: string
      referrer:
        type: integer
        format: int32
      reserved:
        type: boolean
      website:
        type: string
    title: Group
  GroupOperations:
    type: object
    properties:
      group:
        type: integer
        format: int32
      operations:
        type: object
        additionalProperties:
          type: boolean
    title: GroupOperations
  GroupPrivilege:
    type: object
    properties:
      group:
        type: integer
        format: int32
      operations:
        type: object
        additionalProperties:
          type: boolean
      reserved:
        type: boolean
      userGroup:
        type: boolean
      userProfiles:
        type: array
        items:
          type: string
          enum:
            - Administrator
            - UserAdmin
            - Reviewer
            - Editor
            - RegisteredUser
            - Guest
            - Monitor
    title: GroupPrivilege
  Hasfeaturecats:
    type: object
    properties:
      item:
        type: array
        items:
          $ref: '#/definitions/RelatedMetadataItem'
    title: Hasfeaturecats
    xml:
      name: Hasfeaturecats
      attribute: false
      wrapped: false
  Hassource:
    type: object
    properties:
      item:
        type: array
        items:
          $ref: '#/definitions/RelatedMetadataItem'
    title: Hassource
    xml:
      name: Hassource
      attribute: false
      wrapped: false
  Helper:
    type: object
    properties:
      displayIf:
        type: string
        xml:
          name: displayIf
          attribute: true
          wrapped: false
      editorMode:
        type: string
        xml:
          name: editorMode
          attribute: true
          wrapped: false
      option:
        type: array
        xml:
          name: option
          attribute: false
          wrapped: false
        items:
          $ref: '#/definitions/Option'
      rel:
        type: string
        xml:
          name: rel
          attribute: true
          wrapped: false
      relAtt:
        type: string
        xml:
          name: relAtt
          attribute: true
          wrapped: false
      sort:
        type: boolean
        xml:
          name: sort
          attribute: true
          wrapped: false
    title: Helper
    xml:
      name: Helper
      attribute: false
      wrapped: false
  HttpEntity:
    type: object
    properties:
      body:
        type: object
    title: HttpEntity
  IProcessingReport:
    type: object
    properties:
      ellapsedTimeInSeconds:
        type: integer
        format: int64
      endIsoDateTime:
        type: string
      running:
        type: boolean
      startIsoDateTime:
        type: string
      totalTimeInSeconds:
        type: integer
        format: int64
      type:
        type: string
      uuid:
        type: string
    title: IProcessingReport
  ISODate:
    type: object
    properties:
      dateAndTime:
        type: string
      dateAsString:
        type: string
      dateOnly:
        type: boolean
      dateYearMonthOnly:
        type: boolean
      dateYearOnly:
        type: boolean
      days:
        type: integer
        format: int32
      hours:
        type: integer
        format: int32
      minutes:
        type: integer
        format: int32
      months:
        type: integer
        format: int32
      seconds:
        type: integer
        format: int32
      timeAsString:
        type: string
      timeInSeconds:
        type: integer
        format: int64
      years:
        type: integer
        format: int32
    title: ISODate
  InfoReport:
    type: object
    properties:
      date:
        type: string
      message:
        type: string
    title: InfoReport
  InputStream:
    type: object
    title: InputStream
  IsoLanguage:
    type: object
    properties:
      code:
        type: string
      id:
        type: integer
        format: int32
      label:
        type: object
        additionalProperties:
          type: string
      shortCode:
        type: string
    title: IsoLanguage
  KeywordBean:
    type: object
    properties:
      coordEast:
        type: string
      coordNorth:
        type: string
      coordSouth:
        type: string
      coordWest:
        type: string
      definition:
        type: string
      definitions:
        type: object
        additionalProperties:
          type: string
      thesaurusKey:
        type: string
      uri:
        type: string
      value:
        type: string
      values:
        type: object
        additionalProperties:
          type: string
    title: KeywordBean
  Language:
    type: object
    properties:
      defaultLanguage:
        type: boolean
      id:
        type: string
      inspire:
        type: boolean
      name:
        type: string
    title: Language
  Link:
    type: object
    properties:
      id:
        type: integer
        format: int32
      lastState:
        type: integer
        format: int32
      linkStatus:
        type: array
        items:
          $ref: '#/definitions/LinkStatus'
      linkType:
        type: string
        enum:
          - HTTP
          - METADATA
      protocol:
        type: string
      records:
        type: array
        items:
          $ref: '#/definitions/MetadataLink'
      url:
        type: string
    title: Link
  LinkStatus:
    type: object
    properties:
      batchKey:
        type: string
      checkDate:
        $ref: '#/definitions/ISODate'
      failing:
        type: boolean
      id:
        type: integer
        format: int32
      statusInfo:
        type: string
      statusValue:
        type: string
    title: LinkStatus
  ListRegionsResponse:
    type: object
    title: ListRegionsResponse
  LocalizedString:
    type: object
    properties:
      href:
        type: string
        xml:
          name: href
          attribute: true
          wrapped: false
      lang:
        type: string
        xml:
          name: lang
          attribute: true
          wrapped: false
      value:
        type: string
    title: LocalizedString
    xml:
      name: localizedString
      attribute: false
      wrapped: false
  LogFileResponse:
    type: object
    properties:
      file:
        type: string
        xml:
          name: file
          attribute: true
          wrapped: false
      name:
        type: string
        xml:
          name: name
          attribute: true
          wrapped: false
    title: LogFileResponse
  MapServer:
    type: object
    properties:
      configurl:
        type: string
      description:
        type: string
      id:
        type: integer
        format: int32
      name:
        type: string
      namespace:
        type: string
      namespacePrefix:
        type: string
      password:
        type: string
      pushStyleInWorkspace:
        type: boolean
      pushStyleInWorkspace_JpaWorkaround:
        type: string
      stylerurl:
        type: string
      username:
        type: string
      wcsurl:
        type: string
      wfsurl:
        type: string
      wmsurl:
        type: string
    title: MapServer
  MeResponse:
    type: object
    properties:
      admin:
        type: boolean
      email:
        type: string
      groupsWithEditor:
        type: array
        items:
          type: integer
          format: int32
      groupsWithRegisteredUser:
        type: array
        items:
          type: integer
          format: int32
      groupsWithReviewer:
        type: array
        items:
          type: integer
          format: int32
      groupsWithUserAdmin:
        type: array
        items:
          type: integer
          format: int32
      hash:
        type: string
      id:
        type: string
      name:
        type: string
      organisation:
        type: string
      profile:
        type: string
      surname:
        type: string
      username:
        type: string
    title: MeResponse
  MetadataCategory:
    type: object
    properties:
      id:
        type: integer
        format: int32
      label:
        type: object
        additionalProperties:
          type: string
      name:
        type: string
    title: MetadataCategory
  MetadataIdentifierTemplate:
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
      systemDefault:
        type: boolean
      systemProvided:
        type: boolean
      systemProvided_JPAWorkaround:
        type: string
      template:
        type: string
    title: MetadataIdentifierTemplate
  MetadataLink:
    type: object
    properties:
      metadataId:
        type: integer
        format: int32
      metadataUuid:
        type: string
    title: MetadataLink
  MetadataProcessingReport:
    type: object
    properties:
      ellapsedTimeInSeconds:
        type: integer
        format: int64
        xml:
          name: ellapsedTimeInSeconds
          attribute: true
          wrapped: false
      endIsoDateTime:
        type: string
        xml:
          name: endIsoDateTime
          attribute: true
          wrapped: false
      errors:
        type: array
        xml:
          name: errors
          attribute: false
          wrapped: false
        items:
          $ref: '#/definitions/Report'
      infos:
        type: array
        xml:
          name: infos
          attribute: false
          wrapped: false
        items:
          $ref: '#/definitions/InfoReport'
      metadata:
        type: array
        items:
          type: integer
          format: int32
      metadataErrors:
        type: object
        xml:
          name: errors
          attribute: false
          wrapped: false
        additionalProperties:
          type: array
          items:
            $ref: '#/definitions/Report'
      metadataInfos:
        type: object
        xml:
          name: infos
          attribute: false
          wrapped: false
        additionalProperties:
          type: array
          items:
            $ref: '#/definitions/InfoReport'
      numberOfNullRecords:
        type: integer
        format: int32
      numberOfRecordNotFound:
        type: integer
        format: int32
      numberOfRecords:
        type: integer
        format: int32
        xml:
          name: numberOfRecords
          attribute: true
          wrapped: false
      numberOfRecordsNotEditable:
        type: integer
        format: int32
      numberOfRecordsProcessed:
        type: integer
        format: int32
      numberOfRecordsWithErrors:
        type: integer
        format: int32
      running:
        type: boolean
      startIsoDateTime:
        type: string
        xml:
          name: startIsoDateTime
          attribute: true
          wrapped: false
      totalTimeInSeconds:
        type: integer
        format: int64
        xml:
          name: totalTimeInSeconds
          attribute: true
          wrapped: false
      type:
        type: string
        xml:
          name: type
          attribute: true
          wrapped: false
      uuid:
        type: string
        xml:
          name: uuid
          attribute: true
          wrapped: false
    title: MetadataProcessingReport
    xml:
      name: MetadataProcessingReport
      attribute: false
      wrapped: false
  MetadataReplacementProcessingReport:
    type: object
    properties:
      ellapsedTimeInSeconds:
        type: integer
        format: int64
        xml:
          name: ellapsedTimeInSeconds
          attribute: true
          wrapped: false
      endIsoDateTime:
        type: string
        xml:
          name: endIsoDateTime
          attribute: true
          wrapped: false
      errors:
        type: array
        xml:
          name: errors
          attribute: false
          wrapped: false
        items:
          $ref: '#/definitions/Report'
      infos:
        type: array
        xml:
          name: infos
          attribute: false
          wrapped: false
        items:
          $ref: '#/definitions/InfoReport'
      metadata:
        type: array
        items:
          type: integer
          format: int32
      metadataChanges:
        type: object
        xml:
          name: changes
          attribute: false
          wrapped: false
        additionalProperties:
          $ref: '#/definitions/ReplaceReport'
      metadataErrors:
        type: object
        xml:
          name: errors
          attribute: false
          wrapped: false
        additionalProperties:
          type: array
          items:
            $ref: '#/definitions/Report'
      metadataInfos:
        type: object
        xml:
          name: infos
          attribute: false
          wrapped: false
        additionalProperties:
          type: array
          items:
            $ref: '#/definitions/InfoReport'
      noProcessFoundCount:
        type: integer
        format: int32
      numberOfNullRecords:
        type: integer
        format: int32
      numberOfRecordNotFound:
        type: integer
        format: int32
      numberOfRecords:
        type: integer
        format: int32
        xml:
          name: numberOfRecords
          attribute: true
          wrapped: false
      numberOfRecordsChanged:
        type: integer
        format: int32
      numberOfRecordsNotChanged:
        type: integer
        format: int32
      numberOfRecordsNotEditable:
        type: integer
        format: int32
      numberOfRecordsProcessed:
        type: integer
        format: int32
      numberOfRecordsWithErrors:
        type: integer
        format: int32
      processId:
        type: string
        xml:
          name: process
          attribute: true
          wrapped: false
      running:
        type: boolean
      startIsoDateTime:
        type: string
        xml:
          name: startIsoDateTime
          attribute: true
          wrapped: false
      totalTimeInSeconds:
        type: integer
        format: int64
        xml:
          name: totalTimeInSeconds
          attribute: true
          wrapped: false
      type:
        type: string
        xml:
          name: type
          attribute: true
          wrapped: false
      uuid:
        type: string
        xml:
          name: uuid
          attribute: true
          wrapped: false
    title: MetadataReplacementProcessingReport
    xml:
      name: MetadataReplacementProcessingReport
      attribute: false
      wrapped: false
  MetadataResource:
    type: object
    properties:
      id:
        type: string
      size:
        type: number
        format: double
      type:
        type: string
      url:
        type: string
    title: MetadataResource
  MetadataSchema:
    type: object
    properties:
      appMajorVersionSupported:
        type: string
      appMinorVersionSupported:
        type: string
      dependsOn:
        type: string
      descriptions:
        type: object
        additionalProperties:
          type: string
      name:
        type: string
      namespaces:
        type: object
        additionalProperties:
          type: string
      readwriteUUID:
        type: boolean
      schematronRules:
        type: array
        items:
          type: string
      standardUrl:
        type: string
      targetNamespace:
        type: string
      titles:
        type: object
        additionalProperties:
          type: string
    title: MetadataSchema
  MetadataStatus:
    type: object
    properties:
      asXml:
        type: object
      changeMessage:
        type: string
      closeDate:
        $ref: '#/definitions/ISODate'
      currentState:
        type: string
      dueDate:
        $ref: '#/definitions/ISODate'
      id:
        $ref: '#/definitions/MetadataStatusId'
      owner:
        type: integer
        format: int32
      previousState:
        type: string
      statusValue:
        $ref: '#/definitions/StatusValue'
    title: MetadataStatus
  MetadataStatusId:
    type: object
    properties:
      changeDate:
        $ref: '#/definitions/ISODate'
      metadataId:
        type: integer
        format: int32
      statusId:
        type: integer
        format: int32
      userId:
        type: integer
        format: int32
    title: MetadataStatusId
  MetadataStatusParameter:
    type: object
    properties:
      changeMessage:
        type: string
      closeDate:
        type: string
      dueDate:
        type: string
      owner:
        type: integer
        format: int32
      status:
        type: integer
        format: int32
      type:
        type: string
        enum:
          - workflow
          - task
          - event
    title: MetadataStatusParameter
  MetadataStatusResponse:
    type: object
    properties:
      asXml:
        type: object
      authorEmail:
        type: string
      authorName:
        type: string
      authorProfile:
        type: string
      changeMessage:
        type: string
      closeDate:
        $ref: '#/definitions/ISODate'
      currentState:
        type: string
      currentStatus:
        type: string
      currentStatusDetails:
        type: string
      dueDate:
        $ref: '#/definitions/ISODate'
      id:
        $ref: '#/definitions/MetadataStatusId'
      owner:
        type: integer
        format: int32
      ownerEmail:
        type: string
      ownerName:
        type: string
      ownerProfile:
        type: string
      previousState:
        type: string
      previousStatus:
        type: string
      previousStatusDetails:
        type: string
      statusValue:
        $ref: '#/definitions/StatusValue'
      title:
        type: string
    title: MetadataStatusResponse
  MetadataWorkflowStatusResponse:
    type: object
    properties:
      currentStatus:
        $ref: '#/definitions/MetadataStatus'
      hasEditPermission:
        type: boolean
      reviewers:
        type: array
        items:
          $ref: '#/definitions/User'
      status:
        type: array
        items:
          $ref: '#/definitions/StatusValue'
    title: MetadataWorkflowStatusResponse
  MultilingualValue:
    type: object
    properties:
      value:
        type: array
        items:
          $ref: '#/definitions/LocalizedString'
    title: MultilingualValue
    xml:
      name: MultilingualValue
      attribute: false
      wrapped: false
  Online:
    type: object
    properties:
      item:
        type: array
        items:
          $ref: '#/definitions/RelatedLinkItem'
    title: Online
    xml:
      name: Online
      attribute: false
      wrapped: false
  Operation:
    type: object
    properties:
      id:
        type: integer
        format: int32
      label:
        type: object
        additionalProperties:
          type: string
      name:
        type: string
      reserved:
        type: boolean
      reservedOperation:
        type: string
        enum:
          - view
          - download
          - editing
          - notify
          - dynamic
          - featured
    title: Operation
  Option:
    type: object
    properties:
      description:
        type: string
        xml:
          name: title
          attribute: true
          wrapped: false
      isDefault:
        type: boolean
        xml:
          name: default
          attribute: true
          wrapped: false
      label:
        type: string
      value:
        type: string
        xml:
          name: value
          attribute: true
          wrapped: false
    title: Option
    xml:
      name: Option
      attribute: false
      wrapped: false
  OutputStream:
    type: object
    title: OutputStream
  OwnerResponse:
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
      records:
        type: integer
        format: int64
    title: OwnerResponse
  PageJSONWrapper:
    type: object
    properties:
      format:
        type: string
        enum:
          - LINK
          - HTML
          - TEXT
          - MARKDOWN
          - WIKI
      language:
        type: string
      link:
        type: string
      linkText:
        type: string
      sections:
        type: array
        items:
          type: string
          enum:
            - ALL
            - TOP
            - FOOTER
            - MENU
            - SUBMENU
            - CUSTOM_MENU1
            - CUSTOM_MENU2
            - CUSTOM_MENU3
            - DRAFT
      status:
        type: string
        enum:
          - PUBLIC
          - PUBLIC_ONLY
          - PRIVATE
          - HIDDEN
    title: PageJSONWrapper
  PaginatedUserSearchResponse:
    type: object
    properties:
      rows:
        type: array
        items:
          $ref: '#/definitions/UserSearchDto'
      total:
        type: integer
        format: int64
    title: PaginatedUserSearchResponse
  Parent:
    type: object
    properties:
      item:
        type: array
        items:
          $ref: '#/definitions/RelatedMetadataItem'
    title: Parent
    xml:
      name: Parent
      attribute: false
      wrapped: false
  PasswordUpdateParameter:
    type: object
    properties:
      changeKey:
        type: string
      password:
        type: string
    title: PasswordUpdateParameter
  Pattern:
    type: object
    properties:
      rules:
        xml:
          name: rules
          attribute: false
          wrapped: false
        $ref: '#/definitions/Rules'
      title:
        type: string
        xml:
          name: title
          attribute: false
          wrapped: false
    title: Pattern
    xml:
      name: Pattern
      attribute: false
      wrapped: false
  Patterns:
    type: object
    properties:
      pattern:
        type: array
        xml:
          name: pattern
          attribute: false
          wrapped: false
        items:
          $ref: '#/definitions/Pattern'
    title: Patterns
    xml:
      name: Patterns
      attribute: false
      wrapped: false
  ProcessingReport:
    type: object
    properties:
      ellapsedTimeInSeconds:
        type: integer
        format: int64
        xml:
          name: ellapsedTimeInSeconds
          attribute: true
          wrapped: false
      endIsoDateTime:
        type: string
        xml:
          name: endIsoDateTime
          attribute: true
          wrapped: false
      errors:
        type: array
        xml:
          name: errors
          attribute: false
          wrapped: false
        items:
          $ref: '#/definitions/Report'
      infos:
        type: array
        xml:
          name: infos
          attribute: false
          wrapped: false
        items:
          $ref: '#/definitions/InfoReport'
      running:
        type: boolean
      startIsoDateTime:
        type: string
        xml:
          name: startIsoDateTime
          attribute: true
          wrapped: false
      totalTimeInSeconds:
        type: integer
        format: int64
        xml:
          name: totalTimeInSeconds
          attribute: true
          wrapped: false
      type:
        type: string
        xml:
          name: type
          attribute: true
          wrapped: false
      uuid:
        type: string
        xml:
          name: uuid
          attribute: true
          wrapped: false
    title: ProcessingReport
    xml:
      name: ProcessingReport
      attribute: false
      wrapped: false
  RatingAverage:
    type: object
    properties:
      lastComment:
        type: string
      ratingAverages:
        type: object
        additionalProperties:
          type: integer
          format: int32
      ratingCount:
        type: integer
        format: int32
      userfeedbackCount:
        type: integer
        format: int32
    title: RatingAverage
  RatingCriteria:
    type: object
    properties:
      id:
        type: integer
        format: int32
      internal:
        type: boolean
      label:
        type: object
        additionalProperties:
          type: string
      name:
        type: string
    title: RatingCriteria
  Related:
    type: object
    properties:
      item:
        type: array
        items:
          $ref: '#/definitions/RelatedMetadataItem'
    title: Related
    xml:
      name: Related
      attribute: false
      wrapped: false
  RelatedLinkItem:
    type: object
    properties:
      applicationProfile:
        type: string
      description:
        xml:
          name: description
          attribute: false
          wrapped: false
        $ref: '#/definitions/Description'
      function:
        type: string
      id:
        type: string
      protocol:
        type: string
      title:
        xml:
          name: title
          attribute: false
          wrapped: false
        $ref: '#/definitions/MultilingualValue'
      type:
        type: string
      url:
        $ref: '#/definitions/MultilingualValue'
    title: RelatedLinkItem
    xml:
      name: relatedLinkItem
      attribute: false
      wrapped: false
  RelatedMetadataItem:
    type: object
    properties:
      description:
        xml:
          name: description
          attribute: false
          wrapped: false
        $ref: '#/definitions/Description'
      id:
        type: string
      mdType:
        type: array
        xml:
          name: mdType
          attribute: false
          wrapped: false
        items:
          type: string
      title:
        xml:
          name: title
          attribute: false
          wrapped: false
        $ref: '#/definitions/MultilingualValue'
      type:
        type: string
      url:
        $ref: '#/definitions/MultilingualValue'
    title: RelatedMetadataItem
    xml:
      name: relatedMetadataItem
      attribute: false
      wrapped: false
  RelatedResponse:
    type: object
    properties:
      associated:
        $ref: '#/definitions/Associated'
      children:
        $ref: '#/definitions/Children'
      datasets:
        $ref: '#/definitions/Dataset'
      fcats:
        $ref: '#/definitions/Fcat'
      hasfeaturecats:
        $ref: '#/definitions/Hasfeaturecats'
      hassources:
        $ref: '#/definitions/Hassource'
      onlines:
        $ref: '#/definitions/Online'
      parent:
        $ref: '#/definitions/Parent'
      related:
        $ref: '#/definitions/Related'
      services:
        $ref: '#/definitions/Service'
      siblings:
        $ref: '#/definitions/Siblings'
      sources:
        $ref: '#/definitions/Source'
      thumbnails:
        $ref: '#/definitions/Thumbnail'
    title: RelatedResponse
    xml:
      name: relatedResponse
      attribute: false
      wrapped: false
  RelatedSiblingMetadataItem:
    type: object
    properties:
      associationType:
        type: string
        xml:
          name: associationType
          attribute: false
          wrapped: false
      description:
        xml:
          name: description
          attribute: false
          wrapped: false
        $ref: '#/definitions/Description'
      id:
        type: string
      initiativeType:
        type: string
        xml:
          name: initiativeType
          attribute: false
          wrapped: false
      mdType:
        type: array
        xml:
          name: mdType
          attribute: false
          wrapped: false
        items:
          type: string
      title:
        xml:
          name: title
          attribute: false
          wrapped: false
        $ref: '#/definitions/MultilingualValue'
      type:
        type: string
      url:
        $ref: '#/definitions/MultilingualValue'
    title: RelatedSiblingMetadataItem
    xml:
      name: relatedSiblingMetadataItem
      attribute: false
      wrapped: false
  RelatedThumbnailItem:
    type: object
    properties:
      id:
        type: string
      title:
        xml:
          name: title
          attribute: false
          wrapped: false
        $ref: '#/definitions/MultilingualValue'
      type:
        type: string
      url:
        $ref: '#/definitions/MultilingualValue'
    title: RelatedThumbnailItem
    xml:
      name: relatedThumbnailItem
      attribute: false
      wrapped: false
  ReplaceEntryChange:
    type: object
    properties:
      changedVal:
        type: string
      fieldId:
        type: string
      originalVal:
        type: string
    title: ReplaceEntryChange
  ReplaceReport:
    type: object
    properties:
      date:
        type: string
      elementChanges:
        type: array
        items:
          $ref: '#/definitions/ReplaceEntryChange'
      message:
        type: string
    title: ReplaceReport
  Report:
    type: object
    properties:
      date:
        type: string
      message:
        type: string
    title: Report
  Reports:
    type: object
    properties:
      report:
        type: array
        items:
          $ref: '#/definitions/Report'
    title: Reports
    xml:
      name: Reports
      attribute: false
      wrapped: false
  ResponseEntity:
    type: object
    properties:
      body:
        type: object
      statusCode:
        type: string
        enum:
          - '100'
          - '101'
          - '102'
          - '103'
          - '200'
          - '201'
          - '202'
          - '203'
          - '204'
          - '205'
          - '206'
          - '207'
          - '208'
          - '226'
          - '300'
          - '301'
          - '302'
          - '303'
          - '304'
          - '305'
          - '307'
          - '308'
          - '400'
          - '401'
          - '402'
          - '403'
          - '404'
          - '405'
          - '406'
          - '407'
          - '408'
          - '409'
          - '410'
          - '411'
          - '412'
          - '413'
          - '414'
          - '415'
          - '416'
          - '417'
          - '418'
          - '419'
          - '420'
          - '421'
          - '422'
          - '423'
          - '424'
          - '426'
          - '428'
          - '429'
          - '431'
          - '500'
          - '501'
          - '502'
          - '503'
          - '504'
          - '505'
          - '506'
          - '507'
          - '508'
          - '509'
          - '510'
          - '511'
    title: ResponseEntity
  Rule:
    type: object
    properties:
      details:
        type: string
        xml:
          name: details
          attribute: false
          wrapped: false
      group:
        type: string
        xml:
          name: group
          attribute: true
          wrapped: false
      id:
        type: string
        xml:
          name: id
          attribute: true
          wrapped: false
      msg:
        type: string
      ref:
        type: string
        xml:
          name: ref
          attribute: true
          wrapped: false
      test:
        type: string
      type:
        type: string
        xml:
          name: type
          attribute: true
          wrapped: false
    title: Rule
    xml:
      name: Rule
      attribute: false
      wrapped: false
  Rules:
    type: object
    properties:
      rule:
        type: array
        items:
          $ref: '#/definitions/Rule'
    title: Rules
    xml:
      name: Rules
      attribute: false
      wrapped: false
  SavedQuery:
    type: object
    properties:
      cleanValues:
        type: string
      id:
        type: string
      label:
        type: string
      parameters:
        type: array
        items:
          type: string
      xpath:
        type: string
    title: SavedQuery
  Section:
    type: object
    properties:
      field:
        type: array
        xml:
          name: field
          attribute: false
          wrapped: false
        items:
          $ref: '#/definitions/Field'
      name:
        type: string
        xml:
          name: name
          attribute: true
          wrapped: false
    title: Section
  Selection:
    type: object
    properties:
      id:
        type: integer
        format: int32
      label:
        type: object
        additionalProperties:
          type: string
      name:
        type: string
      watchable:
        type: boolean
    title: Selection
  Service:
    type: object
    properties:
      className:
        type: string
      description:
        type: string
      explicitQuery:
        type: string
      id:
        type: integer
        format: int32
      name:
        type: string
      parameters:
        type: array
        items:
          $ref: '#/definitions/ServiceParam'
    title: Service
  ServiceParam:
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
      occur:
        $ref: '#/definitions/Character'
      value:
        type: string
    title: ServiceParam
  Setting:
    type: object
    properties:
      dataType:
        type: string
        enum:
          - STRING
          - INT
          - BOOLEAN
          - JSON
      internal:
        type: boolean
      name:
        type: string
      position:
        type: integer
        format: int32
      value:
        type: string
    title: Setting
  SettingsListResponse:
    type: object
    properties:
      settings:
        type: array
        items:
          $ref: '#/definitions/Setting'
    title: SettingsListResponse
  SharingParameter:
    type: object
    properties:
      clear:
        type: boolean
      privileges:
        type: array
        items:
          $ref: '#/definitions/GroupOperations'
    title: SharingParameter
  SharingResponse:
    type: object
    properties:
      groupOwner:
        type: string
      owner:
        type: string
      privileges:
        type: array
        items:
          $ref: '#/definitions/GroupPrivilege'
    title: SharingResponse
  Siblings:
    type: object
    properties:
      item:
        type: array
        items:
          $ref: '#/definitions/RelatedSiblingMetadataItem'
    title: Siblings
    xml:
      name: Siblings
      attribute: false
      wrapped: false
  SimpleMetadataProcessingReport:
    type: object
    properties:
      ellapsedTimeInSeconds:
        type: integer
        format: int64
        xml:
          name: ellapsedTimeInSeconds
          attribute: true
          wrapped: false
      endIsoDateTime:
        type: string
        xml:
          name: endIsoDateTime
          attribute: true
          wrapped: false
      errors:
        type: array
        xml:
          name: errors
          attribute: false
          wrapped: false
        items:
          $ref: '#/definitions/Report'
      infos:
        type: array
        xml:
          name: infos
          attribute: false
          wrapped: false
        items:
          $ref: '#/definitions/InfoReport'
      metadata:
        type: array
        items:
          type: integer
          format: int32
      metadataErrors:
        type: object
        xml:
          name: errors
          attribute: false
          wrapped: false
        additionalProperties:
          type: array
          items:
            $ref: '#/definitions/Report'
      metadataInfos:
        type: object
        xml:
          name: infos
          attribute: false
          wrapped: false
        additionalProperties:
          type: array
          items:
            $ref: '#/definitions/InfoReport'
      numberOfNullRecords:
        type: integer
        format: int32
      numberOfRecordNotFound:
        type: integer
        format: int32
      numberOfRecords:
        type: integer
        format: int32
        xml:
          name: numberOfRecords
          attribute: true
          wrapped: false
      numberOfRecordsNotEditable:
        type: integer
        format: int32
      numberOfRecordsProcessed:
        type: integer
        format: int32
      numberOfRecordsWithErrors:
        type: integer
        format: int32
      running:
        type: boolean
      startIsoDateTime:
        type: string
        xml:
          name: startIsoDateTime
          attribute: true
          wrapped: false
      totalTimeInSeconds:
        type: integer
        format: int64
        xml:
          name: totalTimeInSeconds
          attribute: true
          wrapped: false
      type:
        type: string
        xml:
          name: type
          attribute: true
          wrapped: false
      uuid:
        type: string
        xml:
          name: uuid
          attribute: true
          wrapped: false
    title: SimpleMetadataProcessingReport
    xml:
      name: SimpleMetadataProcessingReport
      attribute: false
      wrapped: false
  SiteInformation:
    type: object
    properties:
      catalogue:
        type: object
        additionalProperties:
          type: string
      database:
        type: object
        additionalProperties:
          type: string
      index:
        type: object
        additionalProperties:
          type: string
      main:
        type: object
        additionalProperties:
          type: string
      version:
        type: object
        additionalProperties:
          type: string
    title: SiteInformation
  Source:
    type: object
    properties:
      creationDate:
        $ref: '#/definitions/ISODate'
      filter:
        type: string
      groupOwner:
        type: integer
        format: int32
      label:
        type: object
        additionalProperties:
          type: string
      logo:
        type: string
      name:
        type: string
      type:
        type: string
        enum:
          - portal
          - subportal
          - externalportal
          - harvester
      uiConfig:
        type: string
      uuid:
        type: string
    title: Source
  StatusValue:
    type: object
    properties:
      displayOrder:
        type: integer
        format: int32
      id:
        type: integer
        format: int32
      label:
        type: object
        additionalProperties:
          type: string
      name:
        type: string
      notificationLevel:
        type: string
        enum:
          - statusUserOwner
          - catalogueAdministrator
          - catalogueProfileAdministrator
          - catalogueProfileUserAdmin
          - catalogueProfileReviewer
          - catalogueProfileEditor
          - catalogueProfileRegisteredUser
          - catalogueProfileGuest
          - recordProfileReviewer
          - recordUserAuthor
      reserved:
        type: boolean
      type:
        type: string
        enum:
          - workflow
          - task
          - event
    title: StatusValue
  SuggestionType:
    type: object
    properties:
      category:
        type: string
        xml:
          name: category
          attribute: true
          wrapped: false
      id:
        type: string
        xml:
          name: id
          attribute: true
          wrapped: false
      name:
        type: string
        xml:
          name: name
          attribute: false
          wrapped: false
      operational:
        type: string
        xml:
          name: operational
          attribute: false
          wrapped: false
      params:
        type: string
      process:
        type: string
        xml:
          name: process
          attribute: true
          wrapped: false
      target:
        type: string
        xml:
          name: target
          attribute: true
          wrapped: false
    title: SuggestionType
    xml:
      name: suggestionType
      attribute: false
      wrapped: false
  SystemInfo:
    type: object
    properties:
      buildDate:
        type: string
      buildJavaVendor:
        type: string
      buildJavaVersion:
        type: string
      buildOsInfo:
        type: string
      devMode:
        type: boolean
      scmRevision:
        type: string
      scmUrl:
        type: string
      stagingProfile:
        type: string
      subVersion:
        type: string
      version:
        type: string
    title: SystemInfo
  Thumbnail:
    type: object
    properties:
      item:
        type: array
        items:
          $ref: '#/definitions/RelatedThumbnailItem'
    title: Thumbnail
    xml:
      name: Thumbnail
      attribute: false
      wrapped: false
  TransferRequest:
    type: object
    properties:
      sourceGroup:
        type: integer
        format: int32
      sourceUser:
        type: integer
        format: int32
      targetGroup:
        type: integer
        format: int32
      targetUser:
        type: integer
        format: int32
    title: TransferRequest
  URI:
    type: object
    properties:
      absolute:
        type: boolean
      authority:
        type: string
      fragment:
        type: string
      host:
        type: string
      opaque:
        type: boolean
      path:
        type: string
      port:
        type: integer
        format: int32
      query:
        type: string
      rawAuthority:
        type: string
      rawFragment:
        type: string
      rawPath:
        type: string
      rawQuery:
        type: string
      rawSchemeSpecificPart:
        type: string
      rawUserInfo:
        type: string
      scheme:
        type: string
      schemeSpecificPart:
        type: string
      userInfo:
        type: string
    title: URI
  URL:
    type: object
    properties:
      authority:
        type: string
      content:
        type: object
      defaultPort:
        type: integer
        format: int32
      file:
        type: string
      host:
        type: string
      path:
        type: string
      port:
        type: integer
        format: int32
      protocol:
        type: string
      query:
        type: string
      ref:
        type: string
      userInfo:
        type: string
    title: URL
  UiSetting:
    type: object
    properties:
      configuration:
        type: string
      id:
        type: string
    title: UiSetting
  User:
    type: object
    properties:
      accountNonExpired:
        type: boolean
      accountNonLocked:
        type: boolean
      addresses:
        type: array
        items:
          $ref: '#/definitions/Address'
      authorities:
        type: array
        items:
          $ref: '#/definitions/GrantedAuthority'
      credentialsNonExpired:
        type: boolean
      email:
        type: string
      emailAddresses:
        type: array
        items:
          type: string
      enabled:
        type: boolean
      id:
        type: integer
        format: int32
      kind:
        type: string
      lastLoginDate:
        type: string
      name:
        type: string
      organisation:
        type: string
      primaryAddress:
        $ref: '#/definitions/Address'
      profile:
        type: string
        enum:
          - Administrator
          - UserAdmin
          - Reviewer
          - Editor
          - RegisteredUser
          - Guest
          - Monitor
      security:
        type: object
      surname:
        type: string
      username:
        type: string
    title: User
  UserDto:
    type: object
    properties:
      addresses:
        type: array
        items:
          $ref: '#/definitions/Address'
      email:
        type: array
        items:
          type: string
      emailAddresses:
        type: array
        items:
          type: string
      enabled:
        type: boolean
      groupsEditor:
        type: array
        items:
          type: string
      groupsRegisteredUser:
        type: array
        items:
          type: string
      groupsReviewer:
        type: array
        items:
          type: string
      groupsUserAdmin:
        type: array
        items:
          type: string
      id:
        type: string
      kind:
        type: string
      name:
        type: string
      organisation:
        type: string
      password:
        type: string
      profile:
        type: string
      surname:
        type: string
      username:
        type: string
    title: UserDto
  UserFeedbackDTO:
    type: object
    properties:
      approverName:
        type: string
      authorEmail:
        type: string
      authorName:
        type: string
      authorOrganization:
        type: string
      authorUserId:
        type: integer
        format: int32
      captcha:
        type: string
      comment:
        type: string
      date:
        type: string
      keywords:
        type: array
        items:
          type: string
      metadataTitle:
        type: string
      metadataUUID:
        type: string
      optionPrivacy:
        type: boolean
      parentUuid:
        type: string
      published:
        type: boolean
      rating:
        type: object
        additionalProperties:
          type: integer
          format: int32
      ratingAVG:
        type: integer
        format: int32
      showApproveButton:
        type: boolean
      uuid:
        type: string
    title: UserFeedbackDTO
  UserGroup:
    type: object
    properties:
      group:
        $ref: '#/definitions/Group'
      id:
        $ref: '#/definitions/UserGroupId'
      profile:
        type: string
        enum:
          - Administrator
          - UserAdmin
          - Reviewer
          - Editor
          - RegisteredUser
          - Guest
          - Monitor
      user:
        $ref: '#/definitions/User'
    title: UserGroup
  UserGroupId:
    type: object
    properties:
      groupId:
        type: integer
        format: int32
      profile:
        type: string
        enum:
          - Administrator
          - UserAdmin
          - Reviewer
          - Editor
          - RegisteredUser
          - Guest
          - Monitor
      userId:
        type: integer
        format: int32
    title: UserGroupId
  UserGroupsResponse:
    type: object
    properties:
      groupId:
        type: integer
        format: int32
      groupName:
        type: string
      userId:
        type: integer
        format: int32
      userName:
        type: string
      userProfile:
        type: string
    title: UserGroupsResponse
  UserRegisterDto:
    type: object
    properties:
      address:
        $ref: '#/definitions/Address'
      captcha:
        type: string
      email:
        type: string
      name:
        type: string
      organisation:
        type: string
      profile:
        type: string
      surname:
        type: string
      username:
        type: string
    title: UserRegisterDto
  UserSearchDto:
    type: object
    properties:
      creationDate:
        type: string
      creator:
        type: string
      creatorId:
        type: integer
        format: int32
      featuredType:
        type: string
      groups:
        type: array
        items:
          type: integer
          format: int32
      id:
        type: integer
        format: int32
      logo:
        type: string
      names:
        type: object
        additionalProperties:
          type: string
      url:
        type: string
    title: UserSearchDto
  Values:
    type: object
    properties:
      code:
        type: string
        xml:
          name: code
          attribute: false
          wrapped: false
      definition:
        type: string
        xml:
          name: definition
          attribute: false
          wrapped: false
      label:
        type: string
        xml:
          name: label
          attribute: false
          wrapped: false
    title: Values
    xml:
      name: Values
      attribute: false
      wrapped: false
  WFSHarvesterParameter:
    type: object
    properties:
      crs:
        type: string
      encoding:
        type: string
        xml:
          name: encoding
          attribute: true
          wrapped: false
      maxFeatures:
        type: integer
        format: int32
        xml:
          name: maxFeatures
          attribute: true
          wrapped: false
      metadataUuid:
        type: string
        xml:
          name: metadataUuid
          attribute: true
          wrapped: false
      timeOut:
        type: integer
        format: int32
        xml:
          name: timeOut
          attribute: true
          wrapped: false
      titleExpression:
        type: string
        xml:
          name: titleExpression
          attribute: true
          wrapped: false
      tokenizedFields:
        type: object
        additionalProperties:
          type: string
      treeFields:
        type: array
        items:
          type: string
      typeName:
        type: string
        xml:
          name: typeName
          attribute: true
          wrapped: false
      url:
        type: string
        xml:
          name: url
          attribute: true
          wrapped: false
      version:
        type: string
        xml:
          name: version
          attribute: true
          wrapped: false
    title: WFSHarvesterParameter
  XsltMetadataProcessingReport:
    type: object
    properties:
      ellapsedTimeInSeconds:
        type: integer
        format: int64
        xml:
          name: ellapsedTimeInSeconds
          attribute: true
          wrapped: false
      endIsoDateTime:
        type: string
        xml:
          name: endIsoDateTime
          attribute: true
          wrapped: false
      errors:
        type: array
        xml:
          name: errors
          attribute: false
          wrapped: false
        items:
          $ref: '#/definitions/Report'
      infos:
        type: array
        xml:
          name: infos
          attribute: false
          wrapped: false
        items:
          $ref: '#/definitions/InfoReport'
      metadata:
        type: array
        items:
          type: integer
          format: int32
      metadataErrors:
        type: object
        xml:
          name: errors
          attribute: false
          wrapped: false
        additionalProperties:
          type: array
          items:
            $ref: '#/definitions/Report'
      metadataInfos:
        type: object
        xml:
          name: infos
          attribute: false
          wrapped: false
        additionalProperties:
          type: array
          items:
            $ref: '#/definitions/InfoReport'
      noProcessFoundCount:
        type: integer
        format: int32
      numberOfNullRecords:
        type: integer
        format: int32
      numberOfRecordNotFound:
        type: integer
        format: int32
      numberOfRecords:
        type: integer
        format: int32
        xml:
          name: numberOfRecords
          attribute: true
          wrapped: false
      numberOfRecordsNotEditable:
        type: integer
        format: int32
      numberOfRecordsProcessed:
        type: integer
        format: int32
      numberOfRecordsWithErrors:
        type: integer
        format: int32
      processId:
        type: string
        xml:
          name: process
          attribute: true
          wrapped: false
      running:
        type: boolean
      startIsoDateTime:
        type: string
        xml:
          name: startIsoDateTime
          attribute: true
          wrapped: false
      totalTimeInSeconds:
        type: integer
        format: int64
        xml:
          name: totalTimeInSeconds
          attribute: true
          wrapped: false
      type:
        type: string
        xml:
          name: type
          attribute: true
          wrapped: false
      uuid:
        type: string
        xml:
          name: uuid
          attribute: true
          wrapped: false
    title: XsltMetadataProcessingReport
    xml:
      name: XsltMetadataProcessingReport
      attribute: false
      wrapped: false
