<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
<!--   <parent> -->
<!--     <groupId>org.georchestra</groupId> -->
<!--     <artifactId>root</artifactId> -->
<!--     <version>20.2-SNAPSHOT</version> -->
<!--   </parent> -->
  <version>21.0-SNAPSHOT</version>
  <groupId>org.georchestra</groupId>
  <artifactId>datafeeder</artifactId>
  <packaging>jar</packaging>
  <name>Data-Feeder microservice</name>
  <properties>
    <context.name>${project.artifactId}</context.name>
    <packageDatadirScmVersion>datafeeder</packageDatadirScmVersion>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <java.version>1.8</java.version>
    <spring-boot.version>2.3.3.RELEASE</spring-boot.version>

    <gt.version>24.2</gt.version>
    <openapi-generator-maven-plugin.version>5.0.1</openapi-generator-maven-plugin.version>
    <mapstruct.version>1.4.1.Final</mapstruct.version>
    <lombok.version>1.18.12</lombok.version>

    <jersey-version>2.29.1</jersey-version>

    <formatter-maven-plugin.version>2.10.0</formatter-maven-plugin.version>
    <fmt.skip>false</fmt.skip>
    <fmt.action>format</fmt.action><!-- or fmt.action 'validate' -->
    <gs-rest-java-client.version>2.20-SNAPSHOT</gs-rest-java-client.version>
  </properties>
  <repositories>
    <repository>
      <id>osgeo</id>
      <name>OSGeo Nexus Release Repository</name>
      <url>https://repo.osgeo.org/repository/release/</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
      </releases>
    </repository>
    <repository>
      <id>osgeo-snapshot</id>
      <name>OSGeo Nexus Snapshot Repository</name>
      <url>https://repo.osgeo.org/repository/snapshot/</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
      <releases>
        <enabled>false</enabled>
      </releases>
    </repository>
  </repositories>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring-boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.geoserver.community</groupId>
        <artifactId>gs-rest-openapi-java-client</artifactId>
        <version>${gs-rest-java-client.version}</version>
      </dependency>
      <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>${lombok.version}</version>
      </dependency>
      <dependency>
        <groupId>org.mapstruct</groupId>
        <artifactId>mapstruct</artifactId>
        <version>${mapstruct.version}</version>
      </dependency>
      <dependency>
        <groupId>org.mapstruct</groupId>
        <artifactId>mapstruct-processor</artifactId>
        <version>${mapstruct.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-vfs2</artifactId>
        <version>2.7.0</version>
        <exclusions>
          <!-- hadoop transitive dependency carries over an old version of okhttp that interferes with the geoserver rest client -->
          <exclusion>
            <groupId>com.squareup.okhttp</groupId>
            <artifactId>okhttp</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-compress</artifactId>
        <version>1.20</version>
      </dependency>
      <dependency>
        <groupId>org.geotools.jdbc</groupId>
        <artifactId>gt-jdbc-postgis</artifactId>
        <version>${gt.version}</version>
      </dependency>
      <dependency>
        <groupId>org.geotools</groupId>
        <artifactId>gt-shapefile</artifactId>
        <version>${gt.version}</version>
      </dependency>
      <!-- 
      <dependency>
        <groupId>org.geotools</groupId>
        <artifactId>gt-geopkg</artifactId>
        <version>${gt.version}</version>
      </dependency>
       -->
      <dependency>
        <groupId>org.geotools</groupId>
        <artifactId>gt-geojson</artifactId>
        <version>${gt.version}</version>
      </dependency>
      <!--SpringFox dependencies -->
      <dependency>
        <groupId>io.springfox</groupId>
        <artifactId>springfox-boot-starter</artifactId>
        <version>3.0.0</version>
      </dependency>
      <dependency>
        <groupId>io.swagger.core.v3</groupId>
        <artifactId>swagger-annotations</artifactId>
        <version>2.1.7</version>
      </dependency>
      <dependency>
        <groupId>javax.xml.bind</groupId>
        <artifactId>jaxb-api</artifactId>
        <version>2.2.11</version>
      </dependency>
      <dependency>
        <groupId>io.github.threeten-jaxb</groupId>
        <artifactId>threeten-jaxb-core</artifactId>
        <version>1.2</version>
      </dependency>
      <dependency>
        <groupId>net.sf.saxon</groupId>
        <artifactId>Saxon-HE</artifactId>
        <version>9.9.1-8</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.datatype</groupId>
        <artifactId>jackson-datatype-jsr310</artifactId>
        <version>2.11.3</version>
      </dependency>
      <dependency>
        <groupId>org.openapitools</groupId>
        <artifactId>jackson-databind-nullable</artifactId>
        <version>0.1.0</version>
      </dependency>
      <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
        <version>30.1-jre</version>
      </dependency>
      <!-- test deps -->
      <dependency>
        <groupId>org.geotools</groupId>
        <artifactId>gt-sample-data</artifactId>
        <version>${gt.version}</version>
      </dependency>
      <dependency>
        <groupId>org.awaitility</groupId>
        <artifactId>awaitility</artifactId>
        <version>4.0.3</version>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>org.geoserver.community</groupId>
      <artifactId>gs-rest-openapi-java-client</artifactId>
    </dependency>
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
      <version>2.10.10</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-hateoas</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-batch</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
    </dependency>
    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-vfs2</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-compress</artifactId>
    </dependency>
    <!-- Geotools dependencies -->
    <dependency>
      <groupId>org.geotools</groupId>
      <artifactId>gt-main</artifactId>
      <version>${gt.version}</version>
    </dependency>
    <dependency>
      <groupId>org.geotools</groupId>
      <artifactId>gt-epsg-hsql</artifactId>
      <version>${gt.version}</version>
    </dependency>
    <dependency>
      <!-- upgrade hsqldb to avoid "data exception: string data, right truncation" error on @Lob columns -->
      <groupId>org.hsqldb</groupId>
      <artifactId>hsqldb</artifactId>
      <version>2.5.1</version>
    </dependency>
    <dependency>
      <groupId>org.geotools</groupId>
      <artifactId>gt-shapefile</artifactId>
    </dependency>
    <dependency>
      <groupId>org.geotools</groupId>
      <artifactId>gt-geojson</artifactId>
    </dependency>
    <!--
    <dependency>
      <groupId>org.geotools</groupId>
      <artifactId>gt-geopkg</artifactId>
    </dependency>
    -->
    <dependency>
      <groupId>org.geotools.jdbc</groupId>
      <artifactId>gt-jdbc-postgis</artifactId>
    </dependency>
    <!--SpringFox dependencies -->
    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-boot-starter</artifactId>
    </dependency>
    <dependency>
      <groupId>io.swagger.core.v3</groupId>
      <artifactId>swagger-annotations</artifactId>
    </dependency>

    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
    </dependency>
    <dependency>
      <groupId>io.github.threeten-jaxb</groupId>
      <artifactId>threeten-jaxb-core</artifactId>
    </dependency>
      <!-- Need Saxon for XSLT, the Java8 internal Xalan-based one does not handle "node-set" parameters -->
    <dependency>
      <groupId>net.sf.saxon</groupId>
      <artifactId>Saxon-HE</artifactId>
    </dependency>
    <dependency>
      <groupId>org.openapitools</groupId>
      <artifactId>jackson-databind-nullable</artifactId>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
    </dependency>
      <!-- GeoNetwork client library deps -->
    <dependency>
      <groupId>org.glassfish.jersey.core</groupId>
      <artifactId>jersey-client</artifactId>
      <version>${jersey-version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-multipart</artifactId>
      <version>${jersey-version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-json-jackson</artifactId>
      <version>${jersey-version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.inject</groupId>
      <artifactId>jersey-hk2</artifactId>
      <version>${jersey-version}</version>
    </dependency>

    <!-- Testing -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <!-- test scoped for spring boot's (1.5.19.RELEASE) TestRestTemplate pass request headers (sec-* headers ignored with 
        default java client) -->
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>4.5.13</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.batch</groupId>
      <artifactId>spring-batch-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.geotools</groupId>
      <artifactId>gt-sample-data</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <finalName>${project.artifactId}-${server}</finalName>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.openapitools</groupId>
          <artifactId>openapi-generator-maven-plugin</artifactId>
          <version>${openapi-generator-maven-plugin.version}</version>
          <inherited>true</inherited>
        </plugin>
        <plugin>
          <!-- for GeoNetwork OpenAPI 2.0 spec -->
          <groupId>io.swagger</groupId>
          <artifactId>swagger-codegen-maven-plugin</artifactId>
          <version>2.4.19</version>
        </plugin>
        <plugin>
          <groupId>net.revelc.code.formatter</groupId>
          <artifactId>formatter-maven-plugin</artifactId>
          <version>${formatter-maven-plugin.version}</version>
          <inherited>true</inherited>
          <executions>
            <execution>
              <goals>
                <goal>${fmt.action}</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <skip>${fmt.skip}</skip>
            <configFile>${maven.multiModuleProjectDirectory}/.mvn/formatter.xml</configFile>
            <compilerSource>${java.version}</compilerSource>
            <compilerCompliance>${java.version}</compilerCompliance>
            <compilerTargetPlatform>${java.version}</compilerTargetPlatform>
            <!-- Use Unix and Mac style line endings -->
            <lineEnding>LF</lineEnding>
            <encoding>UTF-8</encoding>
            <skipJsFormatting>true</skipJsFormatting>
            <skipCssFormatting>true</skipCssFormatting>
            <skipHtmlFormatting>true</skipHtmlFormatting>
            <skipJsonFormatting>true</skipJsonFormatting>
            <skipXmlFormatting>true</skipXmlFormatting>
            <skipJavaFormatting>false</skipJavaFormatting>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>net.revelc.code.formatter</groupId>
        <artifactId>formatter-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${spring-boot.version}</version>
        <configuration>
          <mainClass>org.georchestra.datafeeder.app.DataFeederApplication</mainClass>
          <classifier>bin</classifier>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.openapitools</groupId>
        <artifactId>openapi-generator-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>build-datafeeder-api</id>
            <goals>
              <goal>generate</goal>
            </goals>
            <inherited>true</inherited>
            <configuration>
              <generatorName>spring</generatorName>
              <configurationFile>${project.basedir}/openapi-generator-api-config.json</configurationFile>
              <ignoreFileOverride>${project.basedir}/openapi-generator-ignore</ignoreFileOverride>
              <inputSpec>${project.basedir}/api.yaml</inputSpec>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>io.swagger</groupId>
        <artifactId>swagger-codegen-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>build-geonetwork-client</id>
            <goals>
              <goal>generate</goal>
            </goals>
            <inherited>true</inherited>
            <configuration>
              <language>java</language>
              <configurationFile>${project.basedir}/openapi-generator-geonetwork-api-config.json</configurationFile>
              <ignoreFileOverride>${project.basedir}/openapi-generator-ignore</ignoreFileOverride>
              <inputSpec>${project.basedir}/api-geonetwork.yaml</inputSpec>
              <generateApiTests>false</generateApiTests>
              <generateModelTests>false</generateModelTests>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${project.build.directory}/generated-sources/openapi/src</source>
                <source>${project.build.directory}/generated-sources/swagger/src</source>
                <source>${project.build.directory}/generated-sources/mapstruct</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <dependencies>
          <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>${mapstruct.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <encoding>UTF-8</encoding>
          <annotationProcessorPaths>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>${lombok.version}</version>
            </path>
            <path>
              <groupId>org.mapstruct</groupId>
              <artifactId>mapstruct-processor</artifactId>
              <version>${mapstruct.version}</version>
            </path>
          </annotationProcessorPaths>
          <generatedSourcesDirectory>${project.build.directory}/generated-sources/mapstruct</generatedSourcesDirectory>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>docker</id>
      <properties>
        <dockerImageName>georchestra/${project.artifactId}:${project.version}</dockerImageName>
        <dockerDatadirScmUrl>scm:git:https://github.com/georchestra/datadir.git</dockerDatadirScmUrl>
        <dockerDatadirScmVersion>docker-${packageDatadirScmVersion}</dockerDatadirScmVersion>
      </properties>
      <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
          <plugin>
            <!-- REVISIT: why don't have the datadir project as a submodule at the project's root folder instead of checking 
              it out on each service module? -->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-scm-plugin</artifactId>
            <version>1.11.2</version>
            <configuration>
              <checkoutDirectory>${project.build.directory}/datadir/</checkoutDirectory>
              <connectionUrl>${dockerDatadirScmUrl}</connectionUrl>
              <pushChanges>false</pushChanges>
              <scmVersion>${dockerDatadirScmVersion}</scmVersion>
              <scmVersionType>branch</scmVersionType>
            </configuration>
            <executions>
              <execution>
                <id>checkout-docker-default-datadir</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>checkout</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.spotify</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>1.2.2</version>
            <configuration>
              <imageName>${dockerImageName}</imageName>
              <dockerDirectory>${project.basedir}/src/docker</dockerDirectory>
              <buildArgs>
                <JAR_FILE>${project.artifactId}-bin.jar</JAR_FILE>
              </buildArgs>
              <serverId>docker-hub</serverId>
              <registryUrl>https://index.docker.io/v1/</registryUrl>
              <resources>
                <resource>
                  <targetPath>/</targetPath>
                  <directory>${project.build.directory}</directory>
                  <include>${project.artifactId}-bin.jar</include>
                </resource>
              </resources>
            </configuration>
            <dependencies>
              <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>28.2-jre</version>
              </dependency>
            </dependencies>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>docker-compose</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <!-- define the ports where the services will be exposed to on localhost -->
        <postgresql.port>15432</postgresql.port>
        <geoserver.port>18080</geoserver.port>
        <geonetwork.port>28080</geonetwork.port>
        <skipTests>false</skipTests>
        <skipITs>${skipTests}</skipITs>
        <docker-compose.skip>${skipITs}</docker-compose.skip>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>3.0.0-M5</version>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <skipITs>${skipITs}</skipITs>
              <systemProperties>
                <geoserver_api_url>http://localhost:${geoserver.port}/geoserver/rest</geoserver_api_url>
                <geoserver_admin_user>admin</geoserver_admin_user>
                <geoserver_admin_password>geoserver</geoserver_admin_password>
              </systemProperties>
            </configuration>
          </plugin>
          <plugin>
            <groupId>com.dkanejs.maven.plugins</groupId>
            <artifactId>docker-compose-maven-plugin</artifactId>
            <version>4.0.0</version>
            <executions>
              <execution>
                <id>up</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>up</goal>
                </goals>
                <configuration>
                  <awaitCmd>curl</awaitCmd>
                  <awaitCmdArgs>http://localhost:${geoserver.port}/geoserver/web</awaitCmdArgs>
                  <awaitTimeout>60</awaitTimeout>
                </configuration>
              </execution>
              <execution>
                <id>down</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>down</goal>
                </goals>
                <inherited>true</inherited>
              </execution>
            </executions>
            <configuration>
              <skip>${docker-compose.skip}</skip>
              <composeFile>${project.basedir}/docker-compose-it.yml</composeFile>
              <envVars>
                <POSTGRESQL_PORT>${postgresql.port}</POSTGRESQL_PORT>
                <GEOSERVER_PORT>${geoserver.port}</GEOSERVER_PORT>
                <GEONETWORK_PORT>${geonetwork.port}</GEONETWORK_PORT>
              </envVars>
              <detachedMode>true</detachedMode>
              <verbose>false</verbose>
              <removeVolumes>true</removeVolumes>
              <removeImages>false</removeImages>
              <removeImagesType>local</removeImagesType>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
