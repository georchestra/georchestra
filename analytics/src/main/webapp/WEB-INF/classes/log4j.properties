### log de analytics ###

# Ayuda sobre Log4j: ver https://logging.apache.org/log4j/1.2/manual.html
#
# Objetos:
# * logger: objeto que maneja los logs - pueden existir varios loggers, en un arbol, 
#           herendiendo del logger raíz que siempre existe. Cada logger tiene un nivel de log
#           Niveles de log disponibles: ALL < TRACE < DEBUG INFO < WARN < ERROR < FATAL < OFF
# * appender: objeto conectado a un logger y que define a donde exportar el log (archivo,
#             consola, GUI, demonio syslog, etc.
# * layout: objeto conectado a un appender y que define el formato del log (estilo printf)

### Logger raíz
# nivel de log por omisión: WARN
# appenders por omisión: "R"
log4j.rootCategory=WARN, R

### Logger logger.org.georchestra.analytics
# nivel de log por omisión: DEBUG
# appenders por omisión: "console"
log4j.logger.org.georchestra.analytics=WARN, console

### Appender "R"
# RollingFileAppender: para escribir los logs en un archivo de log, con rotación
log4j.appender.R = org.apache.log4j.rolling.RollingFileAppender
log4j.appender.R.RollingPolicy = org.apache.log4j.rolling.TimeBasedRollingPolicy
# formato del archivo de backup
# por omisión: /var/log/tomcat/analytics.%d.log.gz
log4j.appender.R.RollingPolicy.FileNamePattern = /srv/comun/general_logs//analytics.%d.log.gz
# formato del archivo corriente
# por omisión: /var/log/tomcat/analytics.log
log4j.appender.R.RollingPolicy.ActiveFileName = /srv/comun/general_logs//analytics.log
log4j.appender.R.Append = true
# layout del appender (formato del log)
log4j.appender.R.layout = org.apache.log4j.PatternLayout
log4j.appender.R.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %c{1} [%p] %m%n

### Appender "console"
# para escribir los logs en la consola
log4j.appender.console        = org.apache.log4j.ConsoleAppender
# layout del appender
log4j.appender.console.layout = org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{ISO8601} %-5p [%c] - %m%n
