<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd                 
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">


	<!-- The controllers are autodetected POJOs labeled with the @Controller 
		annotation. -->
	<context:component-scan base-package="org.georchestra.ldapadmin.ws" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/WEB-INF/views/public/" p:suffix=".jsp">
	</bean>
	<bean id='recaptcha' class='net.tanesha.recaptcha.ReCaptchaImpl'>
		<property name='privateKey' value='6Lf0h-MSAAAAAI2nHJfNPDaEXXjsdmn8eKSZUrQZ' />
	</bean>

	<!-- LDAP connection -->
	<bean id="contextSource" class="org.springframework.ldap.core.support.LdapContextSource">
		<property name="url" value="ldap://localhost:389" />
		<property name="base" value="dc=georchestra,dc=org" />
		<property name="userDn" value="cn=admin,dc=georchestra,dc=org" />
        <property name="password" value="secret" /> 
	</bean>
	

	<bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
		<constructor-arg ref="contextSource" />
	</bean>
	<bean id="groupDao" class="org.georchestra.ldapadmin.ds.GroupDaoImpl">
		<property name="ldapTemplate" ref="ldapTemplate" />
	</bean>

	<bean id="accountDao" class="org.georchestra.ldapadmin.ds.AccountDaoImpl">
        <constructor-arg ref="ldapTemplate" />
        <constructor-arg ref="groupDao" />
	</bean>
	
	<!-- 
        <property name="ldapTemplate" ref="ldapTemplate" />
        <property name="groupDao" ref="groupDao" />
    -->

    <!-- userTokenDao  -->
    <!-- Note: because this is a work in progress right now the the following postgresql parameters are not used. 
        To configure the connection, for testing purpose, change the  UserTokenDao.getConnection() method
        Example:
        
        this.databaseName = "ldapadmin";
        this.databaseUser = "ldapadmin";
        this.databasePassword = "ldapadmin";
     -->
    <bean id="userTokenDao" class="org.georchestra.ldapadmin.ds.UserTokenDao">
        <property name="databaseUser" value="ldapadmin" />
        <property name="databasePassword" value="ldapadmin" />
        <property name="jdbcURL" value="jdbc:postgresql://localhost:5432/ldapadmin" />
    </bean>

	<!-- Resolves localized messages*.properties and application.properties 
		files in the application to allow for internationalization. The messages*.properties 
		files translate Roo generated messages which are part of the admin interface, 
		the application.properties resource bundle localizes all application specific 
		messages such as entity names and menu items. -->
	<bean
	    id="messageSource"
	    class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
		p:basenames="WEB-INF/i18n/messages,WEB-INF/i18n/application"
		p:fallbackToSystemLocale="false">
	</bean>
    <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
	<!-- Store preferred language configuration in a cookie -->
	<bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
		id="localeResolver" p:cookieName="locale" />

	<!-- Resolves localized <theme_name>.properties files in the classpath to 
		allow for theme support -->
	<bean
		class="org.springframework.ui.context.support.ResourceBundleThemeSource"
		id="themeSource" />

	<!-- Store preferred theme configuration in a cookie -->
	<bean class="org.springframework.web.servlet.theme.CookieThemeResolver"
		id="themeResolver" p:cookieName="theme" p:defaultThemeName="standard" />

	<!-- This bean resolves specific types of exceptions to corresponding logical 
		- view names for error views. The default behaviour of DispatcherServlet 
		- is to propagate all exceptions to the servlet container: this will happen 
		- here with all other types of exceptions. -->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"
		p:defaultErrorView="uncaughtException">
		<property name="exceptionMappings">
			<props>
				<prop key=".DataAccessException">dataAccessFailure</prop>
				<prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
				<prop key=".TypeMismatchException">resourceNotFound</prop>
				<prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
			</props>
		</property>
	</bean>

	<!-- Email Factory configuration -->
    <bean id="emailFactory" class="org.georchestra.ldapadmin.mailservice.EmailFactoryImpl">
        <property name="smtpHost" value="localhost" />
        <property name="smtpPort" value="25" />
        <property name="replyTo" value="psc@georchestra.org" />
        <property name="from" value="psc@georchestra.org" />
        <property name="bodyEncoding" value="UTF-8" />
        <property name="subjectEncoding" value="UTF-8" />
        <property name="languages" value="fr,fra" />
        
        <property name="accountWasCreatedEmailFile"
            value="/WEB-INF/templates/newaccount-was-created-template.txt" />
        <property name="accountWasCreatedEmailSubject"
            value="The account was created" />

        <property name="accountCreationInProcessEmailFile"
            value="/WEB-INF/templates/account-creation-in-progrss-template.txt" />
        <property name="accountCreationInProcessEmailSubject"
            value="account creation in process" />
            
        <property name="newAccountRequiresSignupEmailFile"
            value="/WEB-INF/templates/newaccount-requires-singup-template.txt" />
        <property name="newAccountRequiresSignupEmailSubject"
            value="New account requires singnup" />

        <property name="changePasswordEmailFile"
            value="/WEB-INF/templates/changepassword-email-template.txt" />
        <property name="changePasswordEmailSubject"
            value="change password" />
    </bean>

	<bean id="mailService" class="org.georchestra.ldapadmin.mailservice.MailService">
		<constructor-arg ref="emailFactory" />
	</bean>

    <bean id="moderator" class="org.georchestra.ldapadmin.bs.Moderator">
        <property name="requiresSignup" value="false" /> 
        <property name="moderatorEmail" value="moderator@mail" />
    </bean>
    
    <bean id="expiredTokenManagement" class="org.georchestra.ldapadmin.bs.ExpiredTokenManagement">
        <property name="delayInDays" value="1" />
    </bean>
    
</beans>
