<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.georchestra</groupId>
		<artifactId>root</artifactId>
                <version>15.12-SNAPSHOT</version>
	</parent>
	<artifactId>config</artifactId>
	<packaging>jar</packaging>
	<name>Configuration Project</name>
	<url>http://www.georchestra.org</url>
	<build>
		<filters>
			<filter>${basedir}/shared.maven.filters</filter>
			<filter>${build.support.dir}/shared.maven.filters</filter>
			<filter>${generated.output}/shared.maven.filters</filter>
		</filters>
		<resources>
			<resource>
				<directory>${basedir}/defaults</directory>
				<filtering>true</filtering>
				<excludes>
					<exclude>shared.maven.filters</exclude>
					<exclude>**/*.class</exclude>
					<exclude>**/*.jar</exclude>
					<exclude>**/*.gif</exclude>
					<exclude>**/*.bmp</exclude>
					<exclude>**/*.png*</exclude>
					<exclude>**/*.exe</exclude>
					<exclude>**/*.jpg</exclude>
					<exclude>**/*.jpeg</exclude>
					<exclude>**/*.ico</exclude>
					<exclude>**/*.odg</exclude>
					<exclude>**/*.swf</exclude>
					<exclude>**/*.doc</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>${basedir}/defaults</directory>
				<filtering>false</filtering>
				<includes>
					<include>**/*.class</include>
					<include>**/*.jar</include>
					<include>**/*.gif</include>
					<include>**/*.bmp</include>
					<include>**/*.png*</include>
					<include>**/*.exe</include>
					<include>**/*.jpg</include>
					<include>**/*.jpeg</include>
					<include>**/*.ico</include>
					<include>**/*.odg</include>
					<include>**/*.swf</include>
					<include>**/*.doc</include>
				</includes>
			</resource>
			<resource>
				<directory>${conf.base}</directory>
				<filtering>true</filtering>
				<excludes>
                                        <exclude>excluded/**</exclude>
					<exclude>build_support/**</exclude>
					<exclude>**/*.class</exclude>
					<exclude>**/*.jar</exclude>
					<exclude>**/*.gif</exclude>
					<exclude>**/*.bmp</exclude>
					<exclude>**/*.png*</exclude>
					<exclude>**/*.exe</exclude>
					<exclude>**/*.jpg</exclude>
					<exclude>**/*.jpeg</exclude>
					<exclude>**/*.ico</exclude>
					<exclude>**/*.odg</exclude>
					<exclude>**/*.swf</exclude>
					<exclude>**/*.doc</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>${conf.base}</directory>
				<filtering>false</filtering>
				<includes>
					<include>**/*.class</include>
					<include>**/*.jar</include>
					<include>**/*.gif</include>
					<include>**/*.bmp</include>
					<include>**/*.png*</include>
					<include>**/*.exe</include>
					<include>**/*.jpg</include>
					<include>**/*.jpeg</include>
					<include>**/*.ico</include>
					<include>**/*.odg</include>
					<include>**/*.swf</include>
					<include>**/*.doc</include>
				</includes>
			</resource>
			<resource>
				<directory>${generated.output}</directory>
				<filtering>true</filtering>
				<excludes>
					<exclude>/shared.maven.filters</exclude>
					<exclude>**/*.class</exclude>
					<exclude>**/*.jar</exclude>
					<exclude>**/*.gif</exclude>
					<exclude>**/*.bmp</exclude>
					<exclude>**/*.png*</exclude>
					<exclude>**/*.exe</exclude>
					<exclude>**/*.jpg</exclude>
					<exclude>**/*.jpeg</exclude>
					<exclude>**/*.ico</exclude>
					<exclude>**/*.odg</exclude>
					<exclude>**/*.swf</exclude>
					<exclude>**/*.doc</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>${generated.output}</directory>
				<filtering>false</filtering>
				<includes>
					<include>**/*.class</include>
					<include>**/*.jar</include>
					<include>**/*.gif</include>
					<include>**/*.bmp</include>
					<include>**/*.png*</include>
					<include>**/*.exe</include>
					<include>**/*.jpg</include>
					<include>**/*.jpeg</include>
					<include>**/*.ico</include>
					<include>**/*.odg</include>
					<include>**/*.swf</include>
					<include>**/*.doc</include>
				</includes>
			</resource>
			<resource>
				<directory>${project.basedir}/src/main</directory>
				<filtering>false</filtering>
				<includes>
					<include>**/*.groovy</include>
				</includes>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<overwrite>true</overwrite>
					<delimiters>
						<delimiter>@</delimiter>
					</delimiters>
					<!-- Bug #479: see https://github.com/georchestra/georchestra/issues/479 -->
					<encoding>ISO-8859-1</encoding>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<failOnError>false</failOnError>
					<excludes>
						<exclude>**/*</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.groovy.maven</groupId>
				<artifactId>gmaven-plugin</artifactId>
				<executions>
					<execution>
						<id>generateJavaStubsForDocs</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generateStubs</goal>
						</goals>
						<configuration>
							<sources>
								<source>
									<directory>${basedir}/src/main/scripts</directory>
									<includes>
										<include>**/*.groovy</include>
									</includes>
								</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>create-default-gen-config-file</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<source><![CDATA[
def supportdir = new File(project.basedir, "configurations/${server}/build_support")
def generateConfigFile = new File(supportdir, "GenerateConfig.groovy")
if(generateConfigFile.exists()) {
	log.info(generateConfigFile.path+" exists so it will be used in build")
} else {
	log.info(generateConfigFile.path+" does NOT exist so a default will be created")
	generateConfigFile.parentFile.mkdirs()
	generateConfigFile << """
// Generated empty build file
class GenerateConfig {
	def generate(def project, def log, def ant, def basedirFile,
		def target, def subTarget, def targetDir,
		def buildSupportDir, def outputDir) {
		// do nothing
	}
}
"""
}
]]>
							</source>
						</configuration>
					</execution>
					<execution>
						<id>generate-config-files</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<scriptpath>
								<element>${build.support.dir}</element>
								<element>${basedir}/src/main/scripts</element>
							</scriptpath>
							<source><![CDATA[
// note: the params have to be initialized for the required files to be created
// doesn't matter if GenerateConfig is ran or not
def params = new Parameters(
	project: project,
	target: "${server}",
	subTarget: "${sub.target}",
	log: log,
	ant: ant
)
params.init(true)

log.info("Running groovy configuration generation scripts with parameters: "+params)
log.info("")

new GenerateConfig().generate(
	this, log, ant, params.basedirFile,
	params.target, params.subTarget, params.projectDir,
	params.buildSupportDir, params.outputDir)
log.info("Finished running groovy configuration generation scripts")

def mavenFilters = new File(params.outputDir, "shared.maven.filters")
if (!mavenFilters.exists()) {
	mavenFilters << ""
}

]]>
							</source>
						</configuration>
					</execution>
					<execution>
						<id>tests</id>
						<phase>test</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<scriptpath>
								<element>${basedir}/src/test/groovy</element>
								<element>${basedir}/src/main/scripts</element>
							</scriptpath>
							<source><![CDATA[
log.info("Running variable Substitution test")
def params = new Parameters(
	project: project,
	target: "${server}",
	subTarget: "${sub.target}",
	log: log,
	ant: ant
)
params.init()

new VariableSubstitutionTest().execute(params)
log.info("Finished running variable substitution test")
]]>
							</source>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<classifier>${server}</classifier>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<show>private</show>
					<quiet>true</quiet>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>javadoc</goal>
						</goals>
						<phase>compile</phase>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.yahoo.platform.yui</groupId>
			<artifactId>yuicompressor</artifactId>
			<version>2.4.7</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-all</artifactId>
			<version>${groovy-version}</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>
	<properties>
		<generated.output>${basedir}/target/generated</generated.output>
		<conf.base>${basedir}/configurations/${server}</conf.base>
		<build.support.dir>${conf.base}/build_support/</build.support.dir>
		<postTreatmentScript>println("No post treatment script")</postTreatmentScript>
		<groovy-version>1.6.0</groovy-version>
	</properties>
</project>
