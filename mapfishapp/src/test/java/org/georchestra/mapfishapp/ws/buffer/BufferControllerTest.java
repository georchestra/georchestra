package org.georchestra.mapfishapp.ws.buffer;

import static org.junit.Assert.*;

import javax.servlet.http.HttpServletResponse;

import org.junit.Test;
import org.springframework.mock.web.MockHttpServletResponse;

public class BufferControllerTest {
	private BufferController bc = new BufferController();

	@Test
	public void testComputeBufferMULTILINESTRING() throws Exception {
		MockHttpServletResponse resp = new MockHttpServletResponse();
		String wktTest = "MULTILINESTRING((725856.11641881 5804006.8385157,715766.42868517 5836110.3903954,746646.98811238 5835498.8941692),(739232.6019472 5846735.1317486,714161.25666966 5811574.0987374))";
		String e = bc.computeBuffer((double) 100, wktTest, resp);
		
		assertTrue(resp.getStatus() == HttpServletResponse.SC_OK);
		assertTrue(e.startsWith("{\"geometry\":\"POLYGON"));

	}

	@Test
	public void testComputeBufferPOINT() throws Exception {
		MockHttpServletResponse resp = new MockHttpServletResponse();
		String wktTest = "POINT(213436.08796317643 6092895.241696653)";
		String e = bc.computeBuffer((double) 100, wktTest, resp);
		
		assertTrue(resp.getStatus() == HttpServletResponse.SC_OK);
		assertTrue(e.startsWith("{\"geometry\":\"POLYGON"));

	}

	@Test
	public void testComputeBufferMULTIPOINT() throws Exception {
		MockHttpServletResponse resp = new MockHttpServletResponse();
		String wktTest = "MULTIPOINT((260564.08494643515 6250676.017314933),(261584.66203802783 6249497.319797626))";
		String e = bc.computeBuffer((double) 100, wktTest, resp);
		
		assertTrue(resp.getStatus() == HttpServletResponse.SC_OK);
		assertTrue(e.startsWith("{\"geometry\":\"MULTIPOLYGON"));

	}

	@Test
	public void testComputeBufferMULTIPOINT2() throws Exception {
		MockHttpServletResponse resp = new MockHttpServletResponse();
		String wktTest = "MULTIPOINT((213436.08796317643 6092895.241696653))";
		String e = bc.computeBuffer((double) 100, wktTest, resp);
		
		assertTrue(resp.getStatus() == HttpServletResponse.SC_OK);
		assertTrue(e.startsWith("{\"geometry\":\"POLYGON"));

	}

	@Test
	public void testComputeBufferMULTIPOLYGON() throws Exception {
		MockHttpServletResponse resp = new MockHttpServletResponse();
		String wktTest = "MULTIPOLYGON(((-111319.49079327357 5621521.486192066,-111319.49079327357 5942074.072431108,111319.49079327357 5942074.072431108,111319.49079327357 5621521.486192066,-111319.49079327357 5621521.486192066)),((-111319.49079327357 5942074.072431108,-111319.49079327357 6274861.394006575,111319.49079327357 6274861.394006575,111319.49079327357 5942074.072431108,-111319.49079327357 5942074.072431108)))";
		String e = bc.computeBuffer((double) 100, wktTest, resp);
		
		assertTrue(resp.getStatus() == HttpServletResponse.SC_OK);
		assertTrue(e.startsWith("{\"geometry\":\"POLYGON"));

	}

	@Test
	public void testComputeBufferPOLYGON() throws Exception {
		MockHttpServletResponse resp = new MockHttpServletResponse();
		String wktTest = "POLYGON((666356.4681377013 5803411.403076603,666197.281265867 5802725.21426544,665762.2446958468 5801885.986616389,664626.1179728106 5801598.604788917,663306.7593679288 5801264.649596591,663178.1853560625 5801923.416015521,664312.9762452091 5802654.525864523,664041.5793266553 5803843.451391027,665094.2164315964 5805601.104604165,665721.6130817073 5806758.923322267,665922.7674015707 5807464.232013618,665876.34717391 5808511.690309115,666529.2359874125 5808751.2278268235,666791.7273467031 5808294.022247162,666842.2663955231 5808206.409953523,667253.5919140043 5809120.674924653,667331.1815990872 5809387.400246617,667380.9414114718 5809559.2727257125,667571.7430186915 5810215.923896137,665399.6771143331 5811410.369457321,665527.5832092545 5813124.651976284,670246.0824655091 5817499.115297743,673274.640532031 5817644.753486349,673285.3272031471 5817651.3515163995,673416.4615633015 5817738.735647581,675099.3896251143 5818851.14843295,678511.5546569097 5819771.988452874,679605.8252514076 5818677.9684838345,681021.4752158256 5820042.415928418,681771.2119863183 5820890.291948325,681719.2257841178 5821460.847101731,681653.435965059 5821715.065123519,681711.0994612899 5821909.235307188,680654.9001326434 5826337.184809686,683087.453645458 5830866.636754206,683694.1448702812 5829903.222528857,684778.7306690802 5829155.029439943,685936.1194148578 5828445.8918542545,687030.9466068096 5827993.465756355,687058.1085625632 5826906.320118787,686821.8886030999 5826052.711460447,687172.4336796079 5824511.946652917,686804.8567210085 5823009.452666381,686095.7515646553 5822714.298212715,685499.7470109481 5821538.287028436,685043.8936961497 5820678.918995643,685247.0517668475 5819154.543426116,685013.9487531263 5818171.484907143,684999.1432608508 5817305.846669283,685302.9341512257 5816135.221589635,685263.0817735217 5814788.752093049,684566.8896781005 5814052.938289036,685023.7448683162 5813328.123475832,686686.6354217861 5814346.19473197,687277.2966399352 5814931.771552397,688199.4673016667 5816281.159096887,688817.0678365878 5817291.202840648,689330.3620086355 5818077.980947028,689750.4817668893 5818879.797487967,689465.8378289309 5820052.235177098,689629.9227583603 5820849.884389459,689826.8469375735 5821795.08333031,690186.297573345 5822909.134470006,691517.7900027233 5823254.85864588,692337.1014549618 5824345.419711453,692904.6082190259 5825207.2386323,693735.2742593253 5826609.585496311,694441.0398309547 5827033.748309864,695014.7804865033 5828139.277189342,695736.5760648068 5827352.407391411,695788.0056695533 5826514.220136067,695803.813037246 5826257.608668083,694869.8425094904 5825182.273529291,694768.6530923594 5825065.502210971,695013.6672915953 5823890.305046117,695982.3695004784 5823154.376632566,698130.6130338069 5821522.026197461,700285.8696950555 5822334.94342479,700882.3195267259 5823351.477045075,701387.4873759459 5822937.796695495,701280.175386821 5822710.272715557,701591.7586415515 5822827.33492256,702347.0613865837 5821879.771397505,702713.636469766 5821919.056632265,702536.5271599139 5821642.13165535,702593.0774612369 5821571.291777444,702532.5196582454 5821224.506577322,702260.232183765 5819672.5118579725,699555.3911964701 5816019.374347886,695046.3952218886 5813944.839630939,694695.2935479266 5813593.206418083,689165.1638842984 5808061.731002362,689280.0455987969 5807268.610906471,687664.4658289142 5805867.080916394,686623.7399094879 5805710.5476649115,684886.4879361681 5804802.259498522,684544.5144604511 5803819.671314305,683722.5313404335 5803742.386506503,682567.3689844718 5803033.840014582,682008.6564601804 5803404.815668021,679988.8756192272 5803609.830976122,678970.9701954136 5803271.943864349,678554.6352998466 5803775.00350519,679199.6204295028 5804343.811884835,678652.3738127631 5804739.589126997,678341.235835996 5804964.56175575,677847.3112553462 5804782.494179558,677053.1580080269 5804489.554834288,675642.5174206946 5804629.354627995,673564.8504445289 5803453.819678623,673544.5902972047 5803385.053471716,672697.6716112493 5802865.46815135,672076.3975331321 5802113.296350975,671614.6442853216 5802964.595091238,671035.8942526873 5803144.8579486385,670523.935914529 5803304.077128451,669807.7063107652 5803394.854230219,669330.4796537345 5803310.343128547,668568.0524612913 5803176.026765295,668194.0189722258 5803420.5611893665,667784.0292876343 5803689.685403191,666503.8551435117 5803584.926825422,666394.7620425342 5803576.250557129,666356.4681377013 5803411.403076603))";
		String e = bc.computeBuffer((double) 100, wktTest, resp);
		
		assertTrue(resp.getStatus() == HttpServletResponse.SC_OK);
		assertTrue(e.startsWith("{\"geometry\":\"POLYGON"));

	}

	@Test
	public void testComputeBufferBadParam() throws Exception {

		String wktTest = "Not Parseable input 12345{))";
		MockHttpServletResponse resp = new MockHttpServletResponse();
		String e = bc.computeBuffer((double) 100, wktTest, resp);
		
		assertTrue(resp.getStatus() == HttpServletResponse.SC_BAD_REQUEST);
		assertTrue(e.contains("Unknown geometry type"));
	}

}
