<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:s="http://www.springframework.org/schema/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="file:${georchestra.datadir}/default.properties, file:${georchestra.datadir}/security-proxy/security-proxy.properties"
        ignore-resource-not-found="true" ignore-unresolvable="true" />
    <context:annotation-config />

	<bean id="allowSemicolonHttpFirewall" class="org.springframework.security.web.firewall.StrictHttpFirewall">
		<!-- 
			Allows configuring the allowSemicolon StrictHttpFirewall property to avoid errors 
		    like 'the request was rejected because the URL contained a potentially malicious String ";"'
		    ";" in URL's come in the form http://<domain>/<path>;jsessionid=xxxx OR in static resource 
		    URLs (e.g to reference bundles of JS files (minified on the fly)). 
		    In general, proxied applications are discouraged to disclose jsessionid this way, and shall use a cookie instead.
		    Some applications like though can't be modified to use cookies, hence this configuration.
		 --> 
	  	<property name="allowSemicolon" value="${allowSemicolon:false}"/> 
	</bean> 
	<s:http-firewall ref="allowSemicolonHttpFirewall"/>

    <s:http entry-point-ref="casProcessingFilterEntryPoint" request-matcher="regex" realm="${realmName:georchestra}" disable-url-rewriting="true">
        <s:custom-filter ref="trustAnotherProxy" before="PRE_AUTH_FILTER" />
        <s:custom-filter ref="basicAuthChallengeByUserAgent" before="CAS_FILTER" />
        <s:custom-filter ref="casFilter" after="CAS_FILTER" />
        <s:custom-filter ref="filterSecurityInterceptor" after="EXCEPTION_TRANSLATION_FILTER" />
        <s:custom-filter ref="urlFormEncodedPostFilter" after="CHANNEL_FILTER" />
        <!--  <s:http-basic />  -->
        <s:headers>
          <s:frame-options disabled="true"/>
        </s:headers>
        <s:anonymous granted-authority="ROLE_ANONYMOUS" />
        <s:logout logout-success-url="${logout-success-url:https://${domainName}/cas/logout?fromgeorchestra}" />
        <s:csrf disabled="true" />
     </s:http>

    <bean id="urlFormEncodedPostFilter" class="org.georchestra.security.UrlFormEncodedPostFilter" />

	<bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager">
			<bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
				<constructor-arg>
					<list>
						<bean class="org.springframework.security.access.vote.RoleVoter" />
						<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
					</list>
				</constructor-arg>
			</bean>
		</property>
		<property name="securityMetadataSource">
			<bean id="spMetadataSource" class="org.georchestra.security.SecurityProxyMetadataSource">
				<property name="requestMap">
					<map>
						<!-- default geOrchestra rules (can be overridden in datadir) -->
						<entry key=".*\?.*login.*" value="ROLE_USER,ROLE_GN_EDITOR,ROLE_GN_REVIEWER,ROLE_GN_ADMIN,ROLE_ADMINISTRATOR" />
						<entry key=".*\?.*casLogin.*" value="ROLE_USER,ROLE_GN_EDITOR,ROLE_GN_REVIEWER,ROLE_GN_ADMIN,ROLE_ADMINISTRATOR" />
						<entry key="/geofence/.*" value="ROLE_ADMINISTRATOR" />
						<entry key="/analytics/.*" value="ROLE_SUPERUSER" />
						<entry key="/console/private/.*" value="ROLE_SUPERUSER" />
						<entry key="/console/manager/.*" value="ROLE_SUPERUSER" />
						<entry key="/console/account/userdetails" value="IS_AUTHENTICATED_FULLY" />
						<entry key="/console/account/changePassword" value="IS_AUTHENTICATED_FULLY" />
						<entry key="/console/.*/emails" value="ROLE_SUPERUSER" />
						<entry key="/console/.*/sendEmail" value="ROLE_SUPERUSER" />
						<entry key="/console/attachments" value="ROLE_SUPERUSER" />
						<entry key="/console/emailTemplates" value="ROLE_SUPERUSER" />
						<entry key="/testPage" value="IS_AUTHENTICATED_FULLY" />
						<entry key=".*/ogcproxy/.*" value="ROLE_NO_ONE" />
						<entry key=".*" value="IS_AUTHENTICATED_ANONYMOUSLY,ROLE_USER,ROLE_GN_EDITOR,ROLE_GN_REVIEWER,ROLE_GN_ADMIN,ROLE_ADMINISTRATOR" />
					</map>
				</property>
			</bean>
		</property>
	</bean>

    <!--  end custom -->

    <bean id="basicAuthenticationEntryPoint"
      class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
      <property name="realmName" value="${realmName:georchestra}" />
    </bean>

    <bean id="basicAuthChallengeByUserAgent" class="org.georchestra.security.BasicAuthChallengeByUserAgent">
        <constructor-arg ref="authenticationManager" />
        <constructor-arg ref="basicAuthenticationEntryPoint" />
        <!-- preemptive basic auth -->
        <!-- note that this will prevent access to public layers for users with no account -->
        <!-- Comma-separated list of user agents, eg: ".*ArcGIS.*,.*uDig.*,.*QGIS.*" -->
        <property name="userAgents" value="#{'${userAgents:}'.split(',')}"/>
        <property name="ignoreHttps" value="true" />
        <property name="credentialsCharset" value="UTF-8"/>
    </bean>

    <bean id="trustAnotherProxy" class="org.georchestra.security.ProxyTrustAnotherProxy">
        <property name="authenticationManager" ref="authenticationManager" />
        <!-- Note that the default value of trustedProxy is an empty string. It can only be
             set to a list of trusted proxies through the datadir -->
        <property name="rawProxyValue" value="${trustedProxy}" />
    </bean>


    <bean id="userDetailsService" class="org.georchestra.security.MyUserDetailsService"/>

    <bean id="preauthAuthProvider"
          class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
        <property name="preAuthenticatedUserDetailsService">
            <bean id="userDetailsServiceWrapper"
                  class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
                <property name="userDetailsService" ref="userDetailsService"/>
            </bean>
        </property>
    </bean>

    <s:authentication-manager alias="authenticationManager">
        <s:authentication-provider ref='casAuthenticationProvider' />
        <s:authentication-provider ref='ldapAuthenticationProvider' />
        <s:authentication-provider ref="preauthAuthProvider" />
    </s:authentication-manager>


    <!-- This bean points at the embedded directory server created by the ldap-server element above  -->
    <bean id="contextSource" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
        <constructor-arg value="${ldapScheme}://${ldapHost}:${ldapPort}/${ldapBaseDn}"/>
        <property name="userDn" value="${ldapAdminDn}" />
	    <property name="password" value="${ldapAdminPassword}" />
        <property name="baseEnvironmentProperties">
	        <map>
                <entry>
                    <key>
                        <value>java.naming.security.authentication</value>
	              </key>
                    <value>simple</value>
                  </entry>
             </map>
         </property>
     </bean>

    <bean id="ldapUserSearch" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
        <constructor-arg index="0" value="${ldapUsersRdn}"/>
        <constructor-arg index="1" value="${userSearchFilter:(uid={0})}"/>
        <constructor-arg index="2" ref="contextSource" />
    </bean>

    <bean id="LdapContextSource" class="org.springframework.ldap.core.support.LdapContextSource">
        <property name="url" value="${ldapScheme}://${ldapHost}:${ldapPort}"/>
        <property name="base" value="${ldapBaseDn}"/>
        <property name="userDn" value="${ldapAdminDn}"/>
        <property name="password" value="${ldapAdminPassword}"/>
    </bean>

    <bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
        <constructor-arg ref="contextSource"/>
    </bean>

    <bean id="ldapAuthoritiesPopulator" class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
        <constructor-arg ref="contextSource" />
        <constructor-arg value="${ldapRolesRdn}" />
        <property name="groupSearchFilter" value="${roleSearchFilter:(member=uid={1},${ldapUsersRdn},${ldapBaseDn})}"/>
        <property name="rolePrefix" value="ROLE_"/>
        <property name="searchSubtree" value="true"/>
        <property name="convertToUpperCase" value="true"/>
    </bean>

    <bean id="ldapAuthenticationProvider" class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
        <constructor-arg>
            <bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
                <constructor-arg ref="contextSource" />
                <property name="userSearch" ref="ldapUserSearch"/>
            </bean>
        </constructor-arg>
        <constructor-arg ref="ldapAuthoritiesPopulator" />
    </bean>

    <bean id="userService" class="org.springframework.security.ldap.userdetails.LdapUserDetailsService">
        <constructor-arg index="0" ref="ldapUserSearch" />
        <constructor-arg index="1" ref="ldapAuthoritiesPopulator" />
    </bean>

    <!-- start cas config -->
    <bean id="casAuthenticationFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationFailureHandler">
            <bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
                <property name="defaultFailureUrl" value="/casfailed.jsp"/>
            </bean>
        </property>
        <property name="authenticationSuccessHandler">
            <bean class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
                <property name="defaultTargetUrl" value="/"/>
            </bean>
        </property>
    </bean>

    <bean id="casFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
      <property name="authenticationManager" ref="authenticationManager" />
    </bean>

    <bean id="casProcessingFilterEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
        <property name="loginUrl" value="${casLoginUrl:https://${domainName}/cas/login}"/>
        <property name="serviceProperties" ref="serviceProperties"/>
    </bean>

	<bean id="casAuthenticationProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
		<property name="userDetailsService" ref="userService" />
		<property name="serviceProperties" ref="serviceProperties" />
		<property name="ticketValidator">
			<bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
				<constructor-arg index="0" value="${casTicketValidation:https://${domainName}/cas}" />
			</bean>
		</property>
		<property name="key" value="security-proxy" />
	</bean>

    <bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
        <property name="service" value="${proxyCallback:https://${domainName}/login/cas}"/>
        <property name="sendRenew" value="false"/>
    </bean>

    <bean
        id="messageSource"
        class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
        p:basenames="WEB-INF/i18n/application"
        p:defaultEncoding="UTF-8"
        p:fallbackToSystemLocale="false">
    </bean>
	<!-- end cas config -->

    <bean id="georchestraConfiguration" class="org.georchestra.commons.configuration.GeorchestraConfiguration">
        <constructor-arg value="security-proxy" />
    </bean>

  <context:component-scan base-package="org.georchestra.ds"/>

  <bean class="org.georchestra.ds.users.UserRule">
    <property name="listOfprotectedUsers">
      <description>Comma separated list of one or more user identifiers (uid) of protected user</description>
        <!-- Users are defined as a comma separated list of uid and can be overridden in data dir with "protectedUsersList" key-->
        <value>${protectedUsersList:geoserver_privileged_user}</value>
    </property>
  </bean>

  <bean class="org.georchestra.ds.roles.RoleProtected">
    <property name="listOfprotectedRoles">
      <description>Comma separated list of one or more protected Roles</description>
        <!-- Roles are defined as a comma separated list of Roles name and can be override in data dir with "protectedRolesList" key-->
      <value>${protectedRolesList:ADMINISTRATOR,EXTRACTORAPP,GN_.*,ORGADMIN,REFERENT,USER,SUPERUSER}</value>
    </property>
  </bean>

  <bean id="roleDao" class="org.georchestra.ds.roles.RoleDaoImpl">
    <property name="ldapTemplate" ref="ldapTemplate"/>
    <property name="roleSearchBaseDN" value="${ldapRolesRdn}"/>
  </bean>

  <bean id="orgsDao" class="org.georchestra.ds.orgs.OrgsDaoImpl">
    <property name="ldapTemplate" ref="ldapTemplate"/>
    <property name="basePath" value="${ldapBaseDn}"/>
    <property name="orgTypeValues" value="${orgTypeValues:Association,Company,NGO,Individual,Other}"/>
    <property name="orgSearchBaseDN" value="${ldapOrgsRdn}"/>
    <property name="pendingOrgSearchBaseDN" value="${pendingOrgSearchBaseDN:ou=pendingorgs}"/>
  </bean>

  <bean id="accountDao" class="org.georchestra.ds.users.AccountDaoImpl">
    <constructor-arg ref="ldapTemplate"/>
    <property name="basePath" value="${ldapBaseDn}"/>
    <property name="userSearchBaseDN" value="${ldapUsersRdn}"/>
    <property name="pendingUserSearchBaseDN" value="${pendingUserSearchBaseDN:ou=pendingusers}"/>
    <property name="orgSearchBaseDN" value="${ldapOrgsRdn}"/>
    <property name="pendingOrgSearchBaseDN" value="${pendingOrgSearchBaseDN:ou=pendingorgs}"/>
    <property name="roleSearchBaseDN" value="${ldapRolesRdn}"/>
  </bean>

</beans>
