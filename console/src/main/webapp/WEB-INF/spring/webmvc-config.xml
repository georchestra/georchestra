<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/data/jpa
            http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/security
            http://www.springframework.org/schema/security/spring-security.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <security:global-method-security pre-post-annotations="enabled" >
	  <security:expression-handler ref="expressionHandler"/>
	</security:global-method-security>

	<bean id="expressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
		<property name="permissionEvaluator" ref="consolePermissionEvaluator"/>
	</bean>

  <bean id="consolePermissionEvaluator" class="org.georchestra.console.ConsolePermissionEvaluator" />

  <!-- Directory to scan for repository classes -->
  <jpa:repositories base-package="org.georchestra.console.dao" />

  <mvc:annotation-driven>
    <mvc:message-converters>
      <bean class="org.georchestra.console.ws.utils.converter.CsvMessageConverter" />
      <bean class="org.georchestra.console.ws.utils.converter.VcardMessageConverter" />
    </mvc:message-converters>
  </mvc:annotation-driven>

  <context:annotation-config/>

  <context:property-placeholder location="file:${georchestra.datadir}/default.properties, file:${georchestra.datadir}/console/console.properties, file:${georchestra.datadir}/console/protectedroles.properties" ignore-resource-not-found="true" ignore-unresolvable="true" />

  <context:component-scan base-package="org.georchestra.console"/>

  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/views/" p:suffix=".jsp">
    <property name="attributes">
      <map>
        <entry key="headerHeight" value="${headerHeight}" />
        <entry key="headerUrl" value="${headerUrl}" />
        <entry key="readonlyUid" value="${readonlyUid:false}" />
        <entry key="publicContextPath" value="${publicContextPath:/console}"/>
      </map>
    </property>
  </bean>

  <bean id="reCaptchaActivated" class="java.lang.Boolean">
    <constructor-arg value="${recaptcha.activated:false}" />
  </bean>

  <bean id="reCaptchaParameters" class="org.georchestra.console.bs.ReCaptchaParameters">
    <property name="publicKey" value="${publicKey:6LfTgF4UAAAAADphdZKi6ocxIpn9MSzt8wRBFmmd}"/>
    <property name="privateKey" value="${privateKey:6LfTgF4UAAAAAL-FJJecf36W69hEaC4qZ1yu_s5-}"/>
    <property name="verifyUrl" value="${verificationURL:https://www.google.com/recaptcha/api/siteverify}"/>
  </bean>

  <bean id="clock" class="java.time.Clock" factory-method="systemDefaultZone" />

  <bean id="privacyPolicyAgreementActivated" class="java.lang.Boolean">
    <constructor-arg value="${privacy.policy.agreement.activated:false}" />
  </bean>

  <bean id="privacyPolicyAgreementUrl" class="java.lang.String">
    <constructor-arg value="${privacy.policy.agreement.url:}" />
  </bean>

  <!-- LDAP connection -->
  <bean id="contextSource" class="org.springframework.ldap.core.support.LdapContextSource">
    <property name="url" value="${ldapScheme}://${ldapHost}:${ldapPort}"/>
    <property name="base" value="${ldapBaseDn}"/>
    <property name="userDn" value="${ldapAdminDn}"/>
    <property name="password" value="${ldapAdminPassword}"/>
  </bean>

  <bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
    <constructor-arg ref="contextSource"/>
  </bean>

  <bean id="roleDao" class="org.georchestra.console.ds.RoleDaoImpl">
    <property name="ldapTemplate" ref="ldapTemplate"/>
    <property name="basePath" value="${ldapBaseDn}"/>
    <property name="roleSearchBaseDN" value="${ldapRolesRdn}"/>
  </bean>

  <bean id="orgsDao" class="org.georchestra.console.ds.OrgsDao">
    <property name="ldapTemplate" ref="ldapTemplate"/>
    <property name="basePath" value="${ldapBaseDn}"/>
    <property name="orgTypeValues" value="${orgTypeValues:Association,Company,NGO,Individual,Other}"/>
    <property name="orgSearchBaseDN" value="${ldapOrgsRdn}"/>
    <property name="pendingOrgSearchBaseDN" value="${pendingOrgSearchBaseDN:ou=pendingorgs}"/>
  </bean>

  <bean id="accountDao" class="org.georchestra.console.ds.AccountDaoImpl" init-method="init">
    <constructor-arg ref="ldapTemplate"/>
    <property name="basePath" value="${ldapBaseDn}"/>
    <property name="userSearchBaseDN" value="${ldapUsersRdn}"/>
    <property name="pendingUserSearchBaseDN" value="${pendingUserSearchBaseDN:ou=pendingusers}"/>
    <property name="orgSearchBaseDN" value="${ldapOrgsRdn}"/>
    <property name="pendingOrgSearchBaseDN" value="${pendingOrgSearchBaseDN:ou=pendingorgs}"/>
    <property name="roleSearchBaseDN" value="${ldapRolesRdn}"/>
  </bean>
  
  <bean id="AccountGDPRDao" class="org.georchestra.console.ds.AccountGDPRDaoImpl"/>
  
  <bean id="userInfoExporter" class="org.georchestra.console.ws.backoffice.users.UserInfoExporterImpl"/>
  
  <bean id="GDPRAccountWorker" class="org.georchestra.console.ws.backoffice.users.GDPRAccountWorker"/>
  
  <bean class="org.georchestra.console.ws.backoffice.users.UserRule">
    <property name="listOfprotectedUsers">
      <description>Comma separated list of one or more user identifiers (uid) of protected user</description>
        <!-- Users are defined as a comma separated list of uid and can be overridden in data dir with "protectedUsersList" key-->
        <value>${protectedUsersList:geoserver_privileged_user}</value>
    </property>
  </bean>

  <bean class="org.georchestra.console.ws.backoffice.roles.RoleProtected">
    <property name="listOfprotectedRoles">
      <description>Comma separated list of one or more protected Roles</description>
        <!-- Roles are defined as a comma separated list of Roles name and can be override in data dir with "protectedRolesList" key-->
      <value>${protectedRolesList:SUPERUSER,ADMINISTRATOR,ORGADMIN,USER,EXTRACTORAPP,GN_.*}</value>
    </property>
  </bean>

  <bean id="userTokenDao" class="org.georchestra.console.ds.UserTokenDao"/>

  <bean id="waitForDb" class="org.georchestra.commons.WaitForDb" init-method="test">
    <property name="url" value="jdbc:postgresql://${pgsqlHost}:${pgsqlPort}/${pgsqlDatabase}"/>
    <property name="username" value="${pgsqlUser}"/>
    <property name="password" value="${pgsqlPassword}"/>
    <property name="driverClassName" value="org.postgresql.Driver"/>
  </bean>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" depends-on="waitForDb">
        <property name="jdbcUrl" value="jdbc:postgresql://${pgsqlHost}:${pgsqlPort}/${pgsqlDatabase}"/>
        <property name="user" value="${pgsqlUser}"/>
        <property name="password" value="${pgsqlPassword}"/>
        <property name="driverClass" value="org.postgresql.Driver"/>
        <property name="initialPoolSize" value="2"/>
        <property name="minPoolSize" value="${dataSource.minPoolSize:2}"/>
        <property name="maxPoolSize" value="${dataSource.maxPoolSize:10}"/>
        <property name="checkoutTimeout" value = "${dataSource.timeout:1000}"/>
        <property name="idleConnectionTestPeriod" value="30"/>
        <property name="maxIdleTime" value = "${dataSource.maxIdleTime:60}"/>
        <property name="acquireIncrement" value="2"/>
        <property name="testConnectionOnCheckout" value="true"/> <!-- Uses JDBC4's Connection.isValid() -->
    </bean>

   <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
       <!--<property name="driverClassName" value="org.postgresql.Driver"/>-->
       <!--<property name="url" value="jdbc:postgresql://${pgsqlHost}:${pgsqlPort}/${pgsqlDatabase}"/>-->
       <!--<property name="username" value="${pgsqlUser}"/>-->
       <!--<property name="password" value="${pgsqlPassword}"/>-->
   <!--</bean>-->

   <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
       <property name="dataSource" ref="dataSource" />
       <property name="persistenceUnitName" value="myPU" />
       <property name="persistenceXmlLocation" value="classpath:persistence.xml"/>
       <property name="jpaVendorAdapter">
           <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
       </property>
       <property name="jpaProperties">
           <props>
               <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQL94Dialect</prop>
               <prop key="hibernate.show_sql">false</prop>
               <prop key="hibernate.format_sql">false</prop>
               <prop key="hibernate.hbm2ddl.auto">update</prop>
           </props>
       </property>
   </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

  <bean id="advancedDelegationDao" class="org.georchestra.console.dao.AdvancedDelegationDao"/>

  <bean id="expiredTokenCleanTask" class="org.georchestra.console.bs.ExpiredTokenCleanTask"/>

  <!-- Resolves localized messages*.properties and application.properties
		files in the application to allow for internationalization.

		The messages*.properties files translate Roo generated messages which are part
		of the admin interface, the application.properties resource bundle localizes
		all application specific messages such as entity names and menu items.
  -->
  <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
    p:basenames="WEB-INF/i18n/messages,WEB-INF/i18n/application"
    p:defaultEncoding="UTF-8"
    p:fallbackToSystemLocale="false" />

  <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>

  <!-- Store preferred language configuration in a cookie -->
  <bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver" id="localeResolver" p:cookieName="locale"/>

  <!-- Resolves localized <theme_name>.properties files in the classpath to allow for theme support -->
  <bean class="org.springframework.ui.context.support.ResourceBundleThemeSource" id="themeSource"/>

  <!-- Store preferred theme configuration in a cookie -->
  <bean class="org.springframework.web.servlet.theme.CookieThemeResolver" id="themeResolver" p:cookieName="theme" p:defaultThemeName="standard"/>

  <!-- This bean resolves specific types of exceptions to corresponding logical
        - view names for error views. The default behaviour of DispatcherServlet
        - is to propagate all exceptions to the servlet container: this will happen
        - here with all other types of exceptions.
  -->
  <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" p:defaultErrorView="uncaughtException">
    <property name="exceptionMappings">
      <props>
        <prop key=".DataAccessException">dataAccessFailure</prop>
        <prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
        <prop key=".TypeMismatchException">resourceNotFound</prop>
        <prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
      </props>
    </property>
  </bean>

  <!-- Email Factory configuration -->
  <bean id="emailFactory" class="org.georchestra.console.mailservice.EmailFactory" >
    <property name="smtpHost" value="${smtpHost}"/>
    <property name="smtpPort" value="${smtpPort}"/>
    <property name="emailHtml" value="${emailHtml:false}"/>
    <property name="replyTo" value="${replyTo:${administratorEmail}}"/>
    <property name="from" value="${from:${administratorEmail}}"/>
    <property name="bodyEncoding" value="UTF-8"/>
    <property name="subjectEncoding" value="UTF-8"/>
    <property name="templateEncoding" value="${templateEncoding:UTF-8}"/>
    <property name="accountWasCreatedEmailFile" value="/WEB-INF/templates/newaccount-was-created-template.txt"/>
    <property name="accountWasCreatedEmailSubject" value="${subject.account.created:[${instanceName}] Your account has been created}"/>
    <property name="accountCreationInProcessEmailFile" value="/WEB-INF/templates/account-creation-in-progress-template.txt"/>
    <property name="accountCreationInProcessEmailSubject" value="${subject.account.in.process:[${instanceName}] Your new account is waiting for validation}"/>
    <property name="newAccountRequiresModerationEmailFile" value="/WEB-INF/templates/newaccount-requires-moderation-template.txt"/>
    <property name="newAccountRequiresModerationEmailSubject" value="${subject.requires.moderation:[${instanceName}] New account waiting for validation}"/>
    <property name="changePasswordEmailFile" value="/WEB-INF/templates/changepassword-email-template.txt"/>
    <property name="changePasswordEmailSubject" value="${subject.change.password:[${instanceName}] Update your password}"/>
    <property name="accountUidRenamedEmailFile" value="/WEB-INF/templates/account-uid-renamed.txt" />
    <property name="accountUidRenamedEmailSubject" value="${subject.account.uid.renamed:[${instanceName}] New login for your account}" />
    <property name="newAccountNotificationEmailFile" value="/WEB-INF/templates/newaccount-notification-template.txt"/>
    <property name="newAccountNotificationEmailSubject" value="${subject.new.account.notification:[${instanceName}] New account created}"/>
    <property name="publicUrl" value="${scheme}://${domainName}"/>
    <property name="instanceName" value="${instanceName}"/>
  </bean>

  <bean id="moderatedSignup" class="java.lang.Boolean">
    <constructor-arg value="${moderatedSignup:true}" />
  </bean>

  <bean id="expiredTokenManagement" class="org.georchestra.console.bs.ExpiredTokenManagement">
    <property name="delayInDays" value="${delayInDays:1}"/>
  </bean>

  <bean id="validation" class="org.georchestra.console.ws.utils.Validation">
    <constructor-arg value="${requiredFields:firstName,surname,org,orgType}" name="requiredFields" type="java.lang.String"/>
  </bean>

  <bean id="warnUserIfUidModified" class="java.lang.Boolean">
    <constructor-arg value="${warnUserIfUidModified:true}" />
  </bean>

  <bean id="georchestraConfiguration" class="org.georchestra.commons.configuration.GeorchestraConfiguration">
    <constructor-arg value="console"/>
  </bean>

  <bean id="passwordUtils" class="org.georchestra.console.ws.utils.PasswordUtils"/>
</beans>
