name: "geoserver"
on:
  push:
    paths:
    - "commons/**"
    - "geoserver/**"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: "Checking out"
      uses: actions/checkout@v1

    - name: "Checking out submodules"
      run: git submodule update --init --recursive geoserver/geoserver-submodule

    - name: "Setting up Java"
      uses: actions/setup-java@v1
      with:
        java-version: '8.x'

    - name: "Configuring Maven"
      run: |
          mkdir -p $HOME/.m2
          echo $M2_SETTINGS_FILE > $HOME/.m2/settings.xml
      env:
          M2_SETTINGS_FILE: ${{ secrets.M2_SETTINGS_FILE }}

    - name: "Installing & checking formatting"
      run: ./mvnw --no-transfer-progress -B -P-all,geoserver -Dfmt.skip=true install -Dadditionalparam=-Xdoclint:none -DskipTests

    - name: "Running tests"
      working-directory: geoserver/
      run: ../mvnw --no-transfer-progress clean verify -Pit -Dfmt.skip=true -Dadditionalparam=-Xdoclint:none

    - name: Getting image tag
      id: version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

    - name: "Building docker image with native security"
      working-directory: geoserver/webapp
      run: ../../mvnw --no-transfer-progress clean package docker:build -Pdocker,colormap,mbtiles,wps-download,app-schema,control-flow,csw,feature-pregeneralized,importer,inspire,libjpeg-turbo,monitor,pyramid,wps,css,s3-geotiff,jp2k -DdockerImageName=docker.pkg.github.com/georchestra/georchestra/geoserver:${{ steps.version.outputs.VERSION }} -DskipTests


    - name: "Building docker image with geofence"
      working-directory: geoserver/webapp
      run: ../../mvnw --no-transfer-progress clean package docker:build -Pdocker,colormap,mbtiles,wps-download,app-schema,control-flow,csw,feature-pregeneralized,importer,inspire,libjpeg-turbo,monitor,pyramid,wps,css,s3-geotiff,jp2k,geofence -DdockerImageName=docker.pkg.github.com/georchestra/georchestra/geoserver:${{ steps.version.outputs.VERSION }}-geofence -DskipTests

    - name: "Logging in docker.pkg.github.com"
      uses: azure/docker-login@v1
      with:
        login-server: 'docker.pkg.github.com'
        username: 'georchestra'
        password: '${{ secrets.GITHUB_TOKEN }}'

    - name: "Pushing to docker.pkg.github.com"
      run: |
        docker push docker.pkg.github.com/georchestra/georchestra/geoserver:${{ steps.version.outputs.VERSION }}
        docker push docker.pkg.github.com/georchestra/georchestra/geoserver:${{ steps.version.outputs.VERSION }}-geofence

    - name: "Logging in docker.io"
      uses: azure/docker-login@v1
      with:
        username: '${{ secrets.DOCKER_HUB_USERNAME }}'
        password: '${{ secrets.DOCKER_HUB_PASSWORD }}'

    - name: "Pushing latest to docker.io"
      if: github.ref == 'refs/heads/master'
      run: |
        docker tag docker.pkg.github.com/georchestra/georchestra/geoserver:${{ steps.version.outputs.VERSION }} georchestra/geoserver:latest
        docker tag docker.pkg.github.com/georchestra/georchestra/geoserver:${{ steps.version.outputs.VERSION }}-geofence georchestra/geoserver:geofence
        docker push georchestra/geoserver:latest
        docker push georchestra/geoserver:geofence

    - name: "Pushing release branch to docker.io"
      if: contains(github.ref, 'refs/heads/20.')
      run: |
        docker tag docker.pkg.github.com/georchestra/georchestra/geoserver:${{ steps.version.outputs.VERSION }} georchestra/geoserver:${{ steps.version.outputs.VERSION }}
        docker tag docker.pkg.github.com/georchestra/georchestra/geoserver:${{ steps.version.outputs.VERSION }}-geofence georchestra/geoserver:${{ steps.version.outputs.VERSION }}-geofence
        docker push georchestra/geoserver:${{ steps.version.outputs.VERSION }}
        docker push georchestra/geoserver:${{ steps.version.outputs.VERSION }}-geofence

    - name: "Pushing release tag to docker.io"
      if: contains(github.ref, 'refs/tags/20.')
      run: |
        docker tag docker.pkg.github.com/georchestra/georchestra/geoserver:${{ steps.version.outputs.VERSION }} georchestra/geoserver:${{ steps.version.outputs.VERSION }}
        docker tag docker.pkg.github.com/georchestra/georchestra/geoserver:${{ steps.version.outputs.VERSION }}-geofence georchestra/geoserver:${{ steps.version.outputs.VERSION }}-geofence
        docker push georchestra/geoserver:${{ steps.version.outputs.VERSION }}
        docker push georchestra/geoserver:${{ steps.version.outputs.VERSION }}-geofence
